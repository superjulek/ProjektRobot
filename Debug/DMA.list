
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009418  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d0  080097d0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080097d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004244  200000b0  08009884  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200042f4  08009884  000242f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019387  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039ef  00000000  00000000  00039463  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003ce58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003e298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e14  00000000  00000000  0003f500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011cfe  00000000  00000000  00058314  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099c61  00000000  00000000  0006a012  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103c73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  00103cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095a0 	.word	0x080095a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	080095a0 	.word	0x080095a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000ece:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000ed0:	4a46      	ldr	r2, [pc, #280]	; (8000fec <MX_ADC1_Init+0x130>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed4:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ee2:	4b41      	ldr	r3, [pc, #260]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eee:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f0e:	2206      	movs	r2, #6
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f20:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f22:	f001 fe0d 	bl	8002b40 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f2c:	f001 f9d2 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4829      	ldr	r0, [pc, #164]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f42:	f002 f873 	bl	800302c <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f4c:	f001 f9c2 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4822      	ldr	r0, [pc, #136]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f5e:	f002 f865 	bl	800302c <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f68:	f001 f9b4 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f70:	2303      	movs	r3, #3
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f7a:	f002 f857 	bl	800302c <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000f84:	f001 f9a6 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f88:	230c      	movs	r3, #12
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000f96:	f002 f849 	bl	800302c <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000fa0:	f001 f998 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000fb6:	f002 f839 	bl	800302c <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000fc0:	f001 f988 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x12c>)
 8000fd2:	f002 f82b 	bl	800302c <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000fdc:	f001 f97a 	bl	80022d4 <Error_Handler>
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20004078 	.word	0x20004078
 8000fec:	40012000 	.word	0x40012000

08000ff0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a40      	ldr	r2, [pc, #256]	; (8001110 <HAL_ADC_MspInit+0x120>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d179      	bne.n	8001106 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a3e      	ldr	r2, [pc, #248]	; (8001114 <HAL_ADC_MspInit+0x124>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a37      	ldr	r2, [pc, #220]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a30      	ldr	r2, [pc, #192]	; (8001114 <HAL_ADC_MspInit+0x124>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_ADC_MspInit+0x124>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = LU1_Pin|LU2_2_Pin;
 8001066:	2306      	movs	r3, #6
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4827      	ldr	r0, [pc, #156]	; (8001118 <HAL_ADC_MspInit+0x128>)
 800107a:	f002 fef3 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RU1_Pin|RU2_Pin|RI_Pin|LI_Pin;
 800107e:	2353      	movs	r3, #83	; 0x53
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4822      	ldr	r0, [pc, #136]	; (800111c <HAL_ADC_MspInit+0x12c>)
 8001092:	f002 fee7 	bl	8003e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_ADC_MspInit+0x134>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_ADC_MspInit+0x130>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010dc:	f002 fb32 	bl	8003744 <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010e6:	f001 f8f5 	bl	80022d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	2012      	movs	r0, #18
 80010fc:	f002 faf8 	bl	80036f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001100:	2012      	movs	r0, #18
 8001102:	f002 fb11 	bl	8003728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020800 	.word	0x40020800
 800111c:	40020000 	.word	0x40020000
 8001120:	200040c0 	.word	0x200040c0
 8001124:	40026410 	.word	0x40026410

08001128 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <MX_DMA_Init+0x3c>)
 8001138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_DMA_Init+0x3c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	2038      	movs	r0, #56	; 0x38
 8001150:	f002 face 	bl	80036f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001154:	2038      	movs	r0, #56	; 0x38
 8001156:	f002 fae7 	bl	8003728 <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <vApplicationGetIdleTaskMemory+0x2c>)
 8001178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <vApplicationGetIdleTaskMemory+0x30>)
 800117e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200000cc 	.word	0x200000cc
 8001198:	20000120 	.word	0x20000120

0800119c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b0a2      	sub	sp, #136	; 0x88
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	  HAL_TIM_Base_Start(&htim2);
 80011a2:	4849      	ldr	r0, [pc, #292]	; (80012c8 <MX_FREERTOS_Init+0x12c>)
 80011a4:	f003 fceb 	bl	8004b7e <HAL_TIM_Base_Start>
	  HAL_ADC_Start_DMA(&hadc1, adcVal, 6);
 80011a8:	2206      	movs	r2, #6
 80011aa:	4948      	ldr	r1, [pc, #288]	; (80012cc <MX_FREERTOS_Init+0x130>)
 80011ac:	4848      	ldr	r0, [pc, #288]	; (80012d0 <MX_FREERTOS_Init+0x134>)
 80011ae:	f001 fe4b 	bl	8002e48 <HAL_ADC_Start_DMA>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011b2:	2100      	movs	r1, #0
 80011b4:	4847      	ldr	r0, [pc, #284]	; (80012d4 <MX_FREERTOS_Init+0x138>)
 80011b6:	f003 fd5f 	bl	8004c78 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011ba:	2104      	movs	r1, #4
 80011bc:	4845      	ldr	r0, [pc, #276]	; (80012d4 <MX_FREERTOS_Init+0x138>)
 80011be:	f003 fd5b 	bl	8004c78 <HAL_TIM_PWM_Start>
	  HAL_UART_Receive_IT(&huart1, &znak, 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	4944      	ldr	r1, [pc, #272]	; (80012d8 <MX_FREERTOS_Init+0x13c>)
 80011c6:	4845      	ldr	r0, [pc, #276]	; (80012dc <MX_FREERTOS_Init+0x140>)
 80011c8:	f004 fc68 	bl	8005a9c <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bSem1 */
  osSemaphoreDef(bSem1);
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  bSem1Handle = osSemaphoreCreate(osSemaphore(bSem1), 1);
 80011d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 faf5 	bl	80067ce <osSemaphoreCreate>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <MX_FREERTOS_Init+0x144>)
 80011e8:	601a      	str	r2, [r3, #0]

  /* definition and creation of bSem2 */
  osSemaphoreDef(bSem2);
 80011ea:	2300      	movs	r3, #0
 80011ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80011ee:	2300      	movs	r3, #0
 80011f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  bSem2Handle = osSemaphoreCreate(osSemaphore(bSem2), 1);
 80011f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fae8 	bl	80067ce <osSemaphoreCreate>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <MX_FREERTOS_Init+0x148>)
 8001202:	601a      	str	r2, [r3, #0]

  /* definition and creation of bSem3 */
  osSemaphoreDef(bSem3);
 8001204:	2300      	movs	r3, #0
 8001206:	673b      	str	r3, [r7, #112]	; 0x70
 8001208:	2300      	movs	r3, #0
 800120a:	677b      	str	r3, [r7, #116]	; 0x74
  bSem3Handle = osSemaphoreCreate(osSemaphore(bSem3), 1);
 800120c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001210:	2101      	movs	r1, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fadb 	bl	80067ce <osSemaphoreCreate>
 8001218:	4602      	mov	r2, r0
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <MX_FREERTOS_Init+0x14c>)
 800121c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xSemaphoreTake(bSem1Handle, osWaitForever);
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <MX_FREERTOS_Init+0x144>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f04f 31ff 	mov.w	r1, #4294967295
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fec0 	bl	8006fac <xQueueSemaphoreTake>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <MX_FREERTOS_Init+0x150>)
 800122e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001232:	461d      	mov	r5, r3
 8001234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f005 fa61 	bl	800670e <osThreadCreate>
 800124c:	4602      	mov	r2, r0
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <MX_FREERTOS_Init+0x154>)
 8001250:	601a      	str	r2, [r3, #0]

  /* definition and creation of btRead */
  osThreadDef(btRead, StartBtRead, osPriorityRealtime, 0, 128);
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_FREERTOS_Init+0x158>)
 8001254:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001258:	461d      	mov	r5, r3
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  btReadHandle = osThreadCreate(osThread(btRead), NULL);
 8001266:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f005 fa4e 	bl	800670e <osThreadCreate>
 8001272:	4602      	mov	r2, r0
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_FREERTOS_Init+0x15c>)
 8001276:	601a      	str	r2, [r3, #0]

  /* definition and creation of motorControl */
  osThreadDef(motorControl, StartMotorControl, osPriorityBelowNormal, 0, 128);
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_FREERTOS_Init+0x160>)
 800127a:	f107 041c 	add.w	r4, r7, #28
 800127e:	461d      	mov	r5, r3
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorControlHandle = osThreadCreate(osThread(motorControl), NULL);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fa3b 	bl	800670e <osThreadCreate>
 8001298:	4602      	mov	r2, r0
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_FREERTOS_Init+0x164>)
 800129c:	601a      	str	r2, [r3, #0]

  /* definition and creation of adcAvgVal */
  osThreadDef(adcAvgVal, StartAdcAvgVal, osPriorityAboveNormal, 0, 128);
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_FREERTOS_Init+0x168>)
 80012a0:	463c      	mov	r4, r7
 80012a2:	461d      	mov	r5, r3
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcAvgValHandle = osThreadCreate(osThread(adcAvgVal), NULL);
 80012b0:	463b      	mov	r3, r7
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 fa2a 	bl	800670e <osThreadCreate>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_FREERTOS_Init+0x16c>)
 80012be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012c0:	bf00      	nop
 80012c2:	3788      	adds	r7, #136	; 0x88
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	2000426c 	.word	0x2000426c
 80012cc:	200041d4 	.word	0x200041d4
 80012d0:	20004078 	.word	0x20004078
 80012d4:	2000422c 	.word	0x2000422c
 80012d8:	200041d0 	.word	0x200041d0
 80012dc:	200042ac 	.word	0x200042ac
 80012e0:	20004158 	.word	0x20004158
 80012e4:	20004178 	.word	0x20004178
 80012e8:	20004174 	.word	0x20004174
 80012ec:	080095c4 	.word	0x080095c4
 80012f0:	20004144 	.word	0x20004144
 80012f4:	080095e8 	.word	0x080095e8
 80012f8:	20004184 	.word	0x20004184
 80012fc:	08009614 	.word	0x08009614
 8001300:	2000417c 	.word	0x2000417c
 8001304:	0800963c 	.word	0x0800963c
 8001308:	20004170 	.word	0x20004170

0800130c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001314:	2120      	movs	r1, #32
 8001316:	4804      	ldr	r0, [pc, #16]	; (8001328 <StartDefaultTask+0x1c>)
 8001318:	f002 ff57 	bl	80041ca <HAL_GPIO_TogglePin>
    osDelay(1000);
 800131c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001320:	f005 fa41 	bl	80067a6 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001324:	e7f6      	b.n	8001314 <StartDefaultTask+0x8>
 8001326:	bf00      	nop
 8001328:	40020000 	.word	0x40020000

0800132c <StartBtRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtRead */
void StartBtRead(void const * argument)
{
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtRead */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSem1Handle, osWaitForever);
 8001334:	4bb1      	ldr	r3, [pc, #708]	; (80015fc <StartBtRead+0x2d0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fa79 	bl	8006834 <osSemaphoreWait>
	  switch(znak){
 8001342:	4baf      	ldr	r3, [pc, #700]	; (8001600 <StartBtRead+0x2d4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	3b61      	subs	r3, #97	; 0x61
 8001348:	2b17      	cmp	r3, #23
 800134a:	f200 81a3 	bhi.w	8001694 <StartBtRead+0x368>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <StartBtRead+0x28>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001549 	.word	0x08001549
 8001358:	08001447 	.word	0x08001447
 800135c:	08001695 	.word	0x08001695
 8001360:	080013d7 	.word	0x080013d7
 8001364:	080013b5 	.word	0x080013b5
 8001368:	080013fd 	.word	0x080013fd
 800136c:	08001695 	.word	0x08001695
 8001370:	08001695 	.word	0x08001695
 8001374:	08001695 	.word	0x08001695
 8001378:	08001695 	.word	0x08001695
 800137c:	08001695 	.word	0x08001695
 8001380:	08001491 	.word	0x08001491
 8001384:	08001695 	.word	0x08001695
 8001388:	08001695 	.word	0x08001695
 800138c:	08001695 	.word	0x08001695
 8001390:	080015c9 	.word	0x080015c9
 8001394:	08001695 	.word	0x08001695
 8001398:	080014db 	.word	0x080014db
 800139c:	08001525 	.word	0x08001525
 80013a0:	08001695 	.word	0x08001695
 80013a4:	08001695 	.word	0x08001695
 80013a8:	08001695 	.word	0x08001695
 80013ac:	08001695 	.word	0x08001695
 80013b0:	0800168f 	.word	0x0800168f
	  case 'e':
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2120      	movs	r1, #32
 80013b8:	4892      	ldr	r0, [pc, #584]	; (8001604 <StartBtRead+0x2d8>)
 80013ba:	f002 feed 	bl	8004198 <HAL_GPIO_WritePin>
		  dl_tekst = sprintf(tekst, "Dioda on\n");
 80013be:	4a92      	ldr	r2, [pc, #584]	; (8001608 <StartBtRead+0x2dc>)
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <StartBtRead+0x2e0>)
 80013c2:	cb03      	ldmia	r3!, {r0, r1}
 80013c4:	6010      	str	r0, [r2, #0]
 80013c6:	6051      	str	r1, [r2, #4]
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	8113      	strh	r3, [r2, #8]
 80013cc:	2309      	movs	r3, #9
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <StartBtRead+0x2e4>)
 80013d2:	801a      	strh	r2, [r3, #0]
		  break;
 80013d4:	e169      	b.n	80016aa <StartBtRead+0x37e>
	  case 'd':
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2120      	movs	r1, #32
 80013da:	488a      	ldr	r0, [pc, #552]	; (8001604 <StartBtRead+0x2d8>)
 80013dc:	f002 fedc 	bl	8004198 <HAL_GPIO_WritePin>
		  dl_tekst = sprintf(tekst, "Dioda off\n");
 80013e0:	4a89      	ldr	r2, [pc, #548]	; (8001608 <StartBtRead+0x2dc>)
 80013e2:	4b8c      	ldr	r3, [pc, #560]	; (8001614 <StartBtRead+0x2e8>)
 80013e4:	cb03      	ldmia	r3!, {r0, r1}
 80013e6:	6010      	str	r0, [r2, #0]
 80013e8:	6051      	str	r1, [r2, #4]
 80013ea:	8819      	ldrh	r1, [r3, #0]
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	8111      	strh	r1, [r2, #8]
 80013f0:	7293      	strb	r3, [r2, #10]
 80013f2:	230a      	movs	r3, #10
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b86      	ldr	r3, [pc, #536]	; (8001610 <StartBtRead+0x2e4>)
 80013f8:	801a      	strh	r2, [r3, #0]
		  break;
 80013fa:	e156      	b.n	80016aa <StartBtRead+0x37e>
	  case 'f':
		  doPrzodu();
 80013fc:	f000 ff72 	bl	80022e4 <doPrzodu>
		  drDir = 'f';
 8001400:	4b85      	ldr	r3, [pc, #532]	; (8001618 <StartBtRead+0x2ec>)
 8001402:	2266      	movs	r2, #102	; 0x66
 8001404:	701a      	strb	r2, [r3, #0]
		  dl_tekst = sprintf(tekst, "Do przodu!\n");
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <StartBtRead+0x2dc>)
 8001408:	4b84      	ldr	r3, [pc, #528]	; (800161c <StartBtRead+0x2f0>)
 800140a:	4614      	mov	r4, r2
 800140c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800140e:	6020      	str	r0, [r4, #0]
 8001410:	6061      	str	r1, [r4, #4]
 8001412:	60a2      	str	r2, [r4, #8]
 8001414:	230b      	movs	r3, #11
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <StartBtRead+0x2e4>)
 800141a:	801a      	strh	r2, [r3, #0]
		  dpulse[0] = predkosc;
 800141c:	4b80      	ldr	r3, [pc, #512]	; (8001620 <StartBtRead+0x2f4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f87f 	bl	8000524 <__aeabi_i2d>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4a7e      	ldr	r2, [pc, #504]	; (8001624 <StartBtRead+0x2f8>)
 800142c:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 8001430:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <StartBtRead+0x2f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f875 	bl	8000524 <__aeabi_i2d>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4a79      	ldr	r2, [pc, #484]	; (8001624 <StartBtRead+0x2f8>)
 8001440:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  break;
 8001444:	e131      	b.n	80016aa <StartBtRead+0x37e>
	  case 'b':
		  doTylu();
 8001446:	f000 ff6b 	bl	8002320 <doTylu>
		  drDir = 'b';
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <StartBtRead+0x2ec>)
 800144c:	2262      	movs	r2, #98	; 0x62
 800144e:	701a      	strb	r2, [r3, #0]
		  dl_tekst = sprintf(tekst, "Do tylu!\n");
 8001450:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <StartBtRead+0x2dc>)
 8001452:	4b75      	ldr	r3, [pc, #468]	; (8001628 <StartBtRead+0x2fc>)
 8001454:	cb03      	ldmia	r3!, {r0, r1}
 8001456:	6010      	str	r0, [r2, #0]
 8001458:	6051      	str	r1, [r2, #4]
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	8113      	strh	r3, [r2, #8]
 800145e:	2309      	movs	r3, #9
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <StartBtRead+0x2e4>)
 8001464:	801a      	strh	r2, [r3, #0]
		  dpulse[0] = predkosc;
 8001466:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <StartBtRead+0x2f4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f85a 	bl	8000524 <__aeabi_i2d>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <StartBtRead+0x2f8>)
 8001476:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 800147a:	4b69      	ldr	r3, [pc, #420]	; (8001620 <StartBtRead+0x2f4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f850 	bl	8000524 <__aeabi_i2d>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4a66      	ldr	r2, [pc, #408]	; (8001624 <StartBtRead+0x2f8>)
 800148a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  break;
 800148e:	e10c      	b.n	80016aa <StartBtRead+0x37e>
	  case 'l':
		  wLewo();
 8001490:	f000 ff64 	bl	800235c <wLewo>
		  drDir = 'l';
 8001494:	4b60      	ldr	r3, [pc, #384]	; (8001618 <StartBtRead+0x2ec>)
 8001496:	226c      	movs	r2, #108	; 0x6c
 8001498:	701a      	strb	r2, [r3, #0]
		  dl_tekst = sprintf(tekst, "W lewo!\n");
 800149a:	4a5b      	ldr	r2, [pc, #364]	; (8001608 <StartBtRead+0x2dc>)
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <StartBtRead+0x300>)
 800149e:	cb03      	ldmia	r3!, {r0, r1}
 80014a0:	6010      	str	r0, [r2, #0]
 80014a2:	6051      	str	r1, [r2, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	7213      	strb	r3, [r2, #8]
 80014a8:	2308      	movs	r3, #8
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <StartBtRead+0x2e4>)
 80014ae:	801a      	strh	r2, [r3, #0]
		  dpulse[0] = predkosc;
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <StartBtRead+0x2f4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f835 	bl	8000524 <__aeabi_i2d>
 80014ba:	4603      	mov	r3, r0
 80014bc:	460c      	mov	r4, r1
 80014be:	4a59      	ldr	r2, [pc, #356]	; (8001624 <StartBtRead+0x2f8>)
 80014c0:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 80014c4:	4b56      	ldr	r3, [pc, #344]	; (8001620 <StartBtRead+0x2f4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f82b 	bl	8000524 <__aeabi_i2d>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	4a54      	ldr	r2, [pc, #336]	; (8001624 <StartBtRead+0x2f8>)
 80014d4:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  break;
 80014d8:	e0e7      	b.n	80016aa <StartBtRead+0x37e>
	  case 'r':
		  wPrawo();
 80014da:	f000 ff5d 	bl	8002398 <wPrawo>
		  drDir = 'r';
 80014de:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <StartBtRead+0x2ec>)
 80014e0:	2272      	movs	r2, #114	; 0x72
 80014e2:	701a      	strb	r2, [r3, #0]
		  dl_tekst = sprintf(tekst, "W prawo!\n");
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <StartBtRead+0x2dc>)
 80014e6:	4b52      	ldr	r3, [pc, #328]	; (8001630 <StartBtRead+0x304>)
 80014e8:	cb03      	ldmia	r3!, {r0, r1}
 80014ea:	6010      	str	r0, [r2, #0]
 80014ec:	6051      	str	r1, [r2, #4]
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	8113      	strh	r3, [r2, #8]
 80014f2:	2309      	movs	r3, #9
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <StartBtRead+0x2e4>)
 80014f8:	801a      	strh	r2, [r3, #0]
		  dpulse[0] = predkosc;
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <StartBtRead+0x2f4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f810 	bl	8000524 <__aeabi_i2d>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4a46      	ldr	r2, [pc, #280]	; (8001624 <StartBtRead+0x2f8>)
 800150a:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <StartBtRead+0x2f4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f806 	bl	8000524 <__aeabi_i2d>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4a41      	ldr	r2, [pc, #260]	; (8001624 <StartBtRead+0x2f8>)
 800151e:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  break;
 8001522:	e0c2      	b.n	80016aa <StartBtRead+0x37e>
	  case 's':
		  stoj();
 8001524:	f000 ff56 	bl	80023d4 <stoj>
		  drDir = 's';
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <StartBtRead+0x2ec>)
 800152a:	2273      	movs	r2, #115	; 0x73
 800152c:	701a      	strb	r2, [r3, #0]
		  dl_tekst = sprintf(tekst, "STOP!\n");
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <StartBtRead+0x2dc>)
 8001530:	4a40      	ldr	r2, [pc, #256]	; (8001634 <StartBtRead+0x308>)
 8001532:	6810      	ldr	r0, [r2, #0]
 8001534:	6018      	str	r0, [r3, #0]
 8001536:	8891      	ldrh	r1, [r2, #4]
 8001538:	7992      	ldrb	r2, [r2, #6]
 800153a:	8099      	strh	r1, [r3, #4]
 800153c:	719a      	strb	r2, [r3, #6]
 800153e:	2306      	movs	r3, #6
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <StartBtRead+0x2e4>)
 8001544:	801a      	strh	r2, [r3, #0]
		  break;
 8001546:	e0b0      	b.n	80016aa <StartBtRead+0x37e>
	  case 'a':
		  if(predkosc >= 1000){
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <StartBtRead+0x2f4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001550:	db15      	blt.n	800157e <StartBtRead+0x252>
			  predkosc = 1000;
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <StartBtRead+0x2f4>)
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	601a      	str	r2, [r3, #0]
			  dl_tekst = sprintf(tekst, "Predkosc maksymalna!\n");
 800155a:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <StartBtRead+0x2dc>)
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <StartBtRead+0x30c>)
 800155e:	4615      	mov	r5, r2
 8001560:	461c      	mov	r4, r3
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	6028      	str	r0, [r5, #0]
 8001566:	6069      	str	r1, [r5, #4]
 8001568:	60aa      	str	r2, [r5, #8]
 800156a:	60eb      	str	r3, [r5, #12]
 800156c:	6820      	ldr	r0, [r4, #0]
 800156e:	6128      	str	r0, [r5, #16]
 8001570:	88a3      	ldrh	r3, [r4, #4]
 8001572:	82ab      	strh	r3, [r5, #20]
 8001574:	2315      	movs	r3, #21
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <StartBtRead+0x2e4>)
 800157a:	801a      	strh	r2, [r3, #0]
			  break;
 800157c:	e095      	b.n	80016aa <StartBtRead+0x37e>
		  }
		  predkosc += 50;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <StartBtRead+0x2f4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3332      	adds	r3, #50	; 0x32
 8001584:	4a26      	ldr	r2, [pc, #152]	; (8001620 <StartBtRead+0x2f4>)
 8001586:	6013      	str	r3, [r2, #0]
		  dpulse[0] = predkosc;
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <StartBtRead+0x2f4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffc9 	bl	8000524 <__aeabi_i2d>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <StartBtRead+0x2f8>)
 8001598:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <StartBtRead+0x2f4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_i2d>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <StartBtRead+0x2f8>)
 80015ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  dl_tekst = sprintf(tekst, "Predkosc zwiekszona do %d %!\n", predkosc);
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <StartBtRead+0x2f4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4921      	ldr	r1, [pc, #132]	; (800163c <StartBtRead+0x310>)
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <StartBtRead+0x2dc>)
 80015ba:	f007 fbf5 	bl	8008da8 <siprintf>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <StartBtRead+0x2e4>)
 80015c4:	801a      	strh	r2, [r3, #0]
		  break;
 80015c6:	e070      	b.n	80016aa <StartBtRead+0x37e>
	  case 'p':
		  if(predkosc <= 0){
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <StartBtRead+0x2f4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dc39      	bgt.n	8001644 <StartBtRead+0x318>
			  predkosc = 0;
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <StartBtRead+0x2f4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
			  dl_tekst = sprintf(tekst, "Predkosc minimalna!\n");
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <StartBtRead+0x2dc>)
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <StartBtRead+0x314>)
 80015da:	4615      	mov	r5, r2
 80015dc:	461c      	mov	r4, r3
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	6028      	str	r0, [r5, #0]
 80015e2:	6069      	str	r1, [r5, #4]
 80015e4:	60aa      	str	r2, [r5, #8]
 80015e6:	60eb      	str	r3, [r5, #12]
 80015e8:	6820      	ldr	r0, [r4, #0]
 80015ea:	6128      	str	r0, [r5, #16]
 80015ec:	7923      	ldrb	r3, [r4, #4]
 80015ee:	752b      	strb	r3, [r5, #20]
 80015f0:	2314      	movs	r3, #20
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <StartBtRead+0x2e4>)
 80015f6:	801a      	strh	r2, [r3, #0]
			  break;
 80015f8:	e057      	b.n	80016aa <StartBtRead+0x37e>
 80015fa:	bf00      	nop
 80015fc:	20004158 	.word	0x20004158
 8001600:	200041d0 	.word	0x200041d0
 8001604:	40020000 	.word	0x40020000
 8001608:	20004124 	.word	0x20004124
 800160c:	08009658 	.word	0x08009658
 8001610:	20004120 	.word	0x20004120
 8001614:	08009664 	.word	0x08009664
 8001618:	20004198 	.word	0x20004198
 800161c:	08009670 	.word	0x08009670
 8001620:	20000020 	.word	0x20000020
 8001624:	20000028 	.word	0x20000028
 8001628:	0800967c 	.word	0x0800967c
 800162c:	08009688 	.word	0x08009688
 8001630:	08009694 	.word	0x08009694
 8001634:	080096a0 	.word	0x080096a0
 8001638:	080096a8 	.word	0x080096a8
 800163c:	080096c0 	.word	0x080096c0
 8001640:	080096e0 	.word	0x080096e0
		  }
		  predkosc -= 50;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <StartBtRead+0x390>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3b32      	subs	r3, #50	; 0x32
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <StartBtRead+0x390>)
 800164c:	6013      	str	r3, [r2, #0]
		  dpulse[0] = predkosc;
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <StartBtRead+0x390>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4603      	mov	r3, r0
 800165a:	460c      	mov	r4, r1
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <StartBtRead+0x394>)
 800165e:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <StartBtRead+0x390>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff5c 	bl	8000524 <__aeabi_i2d>
 800166c:	4603      	mov	r3, r0
 800166e:	460c      	mov	r4, r1
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <StartBtRead+0x394>)
 8001672:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  dl_tekst = sprintf(tekst, "Predkosc zmniejszona do %d %!\n", predkosc);
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <StartBtRead+0x390>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4911      	ldr	r1, [pc, #68]	; (80016c4 <StartBtRead+0x398>)
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <StartBtRead+0x39c>)
 8001680:	f007 fb92 	bl	8008da8 <siprintf>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <StartBtRead+0x3a0>)
 800168a:	801a      	strh	r2, [r3, #0]
		  break;
 800168c:	e00d      	b.n	80016aa <StartBtRead+0x37e>
	  case 'x':
		  pomiarBeta();
 800168e:	f000 fb93 	bl	8001db8 <pomiarBeta>
		  break;
 8001692:	e00a      	b.n	80016aa <StartBtRead+0x37e>
	  default:
		  dl_tekst = sprintf(tekst, "Bledny kod\n");
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <StartBtRead+0x39c>)
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <StartBtRead+0x3a4>)
 8001698:	4614      	mov	r4, r2
 800169a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800169c:	6020      	str	r0, [r4, #0]
 800169e:	6061      	str	r1, [r4, #4]
 80016a0:	60a2      	str	r2, [r4, #8]
 80016a2:	230b      	movs	r3, #11
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <StartBtRead+0x3a0>)
 80016a8:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_UART_Transmit_IT(&huart1, tekst, dl_tekst);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <StartBtRead+0x3a0>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4905      	ldr	r1, [pc, #20]	; (80016c8 <StartBtRead+0x39c>)
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <StartBtRead+0x3a8>)
 80016b4:	f004 f9ad 	bl	8005a12 <HAL_UART_Transmit_IT>
	  osSemaphoreWait(bSem1Handle, osWaitForever);
 80016b8:	e63c      	b.n	8001334 <StartBtRead+0x8>
 80016ba:	bf00      	nop
 80016bc:	20000020 	.word	0x20000020
 80016c0:	20000028 	.word	0x20000028
 80016c4:	080096f8 	.word	0x080096f8
 80016c8:	20004124 	.word	0x20004124
 80016cc:	20004120 	.word	0x20004120
 80016d0:	08009718 	.word	0x08009718
 80016d4:	200042ac 	.word	0x200042ac

080016d8 <StartMotorControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorControl */
void StartMotorControl(void const * argument)
{
 80016d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartMotorControl */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSem3Handle, osWaitForever);
 80016e2:	4bb5      	ldr	r3, [pc, #724]	; (80019b8 <StartMotorControl+0x2e0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 f8a2 	bl	8006834 <osSemaphoreWait>


	  napiecie[0] = fabs(adcAvgVal[0]-adcAvgVal[1])*0.004593; //0.00014138 = 3.3 / 4095 / 1000 * 5700
 80016f0:	4bb2      	ldr	r3, [pc, #712]	; (80019bc <StartMotorControl+0x2e4>)
 80016f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f6:	4bb1      	ldr	r3, [pc, #708]	; (80019bc <StartMotorControl+0x2e4>)
 80016f8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	f7fe fdc2 	bl	8000288 <__aeabi_dsub>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	4698      	mov	r8, r3
 800170a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800170e:	a3a4      	add	r3, pc, #656	; (adr r3, 80019a0 <StartMotorControl+0x2c8>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	4640      	mov	r0, r8
 8001716:	4649      	mov	r1, r9
 8001718:	f7fe ff6e 	bl	80005f8 <__aeabi_dmul>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	4aa7      	ldr	r2, [pc, #668]	; (80019c0 <StartMotorControl+0x2e8>)
 8001722:	e9c2 3400 	strd	r3, r4, [r2]
	  napiecie[1] = fabs(adcAvgVal[2]-adcAvgVal[3])*0.004593; //dziala z kondensatorami
 8001726:	4ba5      	ldr	r3, [pc, #660]	; (80019bc <StartMotorControl+0x2e4>)
 8001728:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800172c:	4ba3      	ldr	r3, [pc, #652]	; (80019bc <StartMotorControl+0x2e4>)
 800172e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	f7fe fda7 	bl	8000288 <__aeabi_dsub>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	469a      	mov	sl, r3
 8001740:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8001744:	a396      	add	r3, pc, #600	; (adr r3, 80019a0 <StartMotorControl+0x2c8>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	4650      	mov	r0, sl
 800174c:	4659      	mov	r1, fp
 800174e:	f7fe ff53 	bl	80005f8 <__aeabi_dmul>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4a9a      	ldr	r2, [pc, #616]	; (80019c0 <StartMotorControl+0x2e8>)
 8001758:	e9c2 3402 	strd	r3, r4, [r2, #8]

	  //napiecie[0] = pulse[0]/1000.*9.; //ze wzgledu na slaby odczyt pwm
	  //napiecie[1] = pulse[1]/1000.*9.; //ze wzgledu na slaby odczytw pwm

	  natezenie[0] = adcAvgVal[4]*0.0008059;
 800175c:	4b97      	ldr	r3, [pc, #604]	; (80019bc <StartMotorControl+0x2e4>)
 800175e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001762:	a391      	add	r3, pc, #580	; (adr r3, 80019a8 <StartMotorControl+0x2d0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe ff46 	bl	80005f8 <__aeabi_dmul>
 800176c:	4603      	mov	r3, r0
 800176e:	460c      	mov	r4, r1
 8001770:	4a94      	ldr	r2, [pc, #592]	; (80019c4 <StartMotorControl+0x2ec>)
 8001772:	e9c2 3400 	strd	r3, r4, [r2]
	  natezenie[1] = adcAvgVal[5]*0.0008059;
 8001776:	4b91      	ldr	r3, [pc, #580]	; (80019bc <StartMotorControl+0x2e4>)
 8001778:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800177c:	a38a      	add	r3, pc, #552	; (adr r3, 80019a8 <StartMotorControl+0x2d0>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7fe ff39 	bl	80005f8 <__aeabi_dmul>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
 800178a:	4a8e      	ldr	r2, [pc, #568]	; (80019c4 <StartMotorControl+0x2ec>)
 800178c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	  predkoscPomiar[0]=(napiecie[0]-natezenie[0]*oporWew[0])/beta[0];
 8001790:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <StartMotorControl+0x2e8>)
 8001792:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001796:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <StartMotorControl+0x2ec>)
 8001798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179c:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <StartMotorControl+0x2f0>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff29 	bl	80005f8 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe fd6b 	bl	8000288 <__aeabi_dsub>
 80017b2:	4603      	mov	r3, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	4618      	mov	r0, r3
 80017b8:	4621      	mov	r1, r4
 80017ba:	4b84      	ldr	r3, [pc, #528]	; (80019cc <StartMotorControl+0x2f4>)
 80017bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	f7ff f842 	bl	800084c <__aeabi_ddiv>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4a80      	ldr	r2, [pc, #512]	; (80019d0 <StartMotorControl+0x2f8>)
 80017ce:	e9c2 3400 	strd	r3, r4, [r2]
	  predkoscPomiar[1]=(napiecie[1]-natezenie[1]*oporWew[1])/beta[1];
 80017d2:	4b7b      	ldr	r3, [pc, #492]	; (80019c0 <StartMotorControl+0x2e8>)
 80017d4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80017d8:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <StartMotorControl+0x2ec>)
 80017da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017de:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <StartMotorControl+0x2f0>)
 80017e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017e4:	f7fe ff08 	bl	80005f8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fd4a 	bl	8000288 <__aeabi_dsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4618      	mov	r0, r3
 80017fa:	4621      	mov	r1, r4
 80017fc:	4b73      	ldr	r3, [pc, #460]	; (80019cc <StartMotorControl+0x2f4>)
 80017fe:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001802:	461a      	mov	r2, r3
 8001804:	4623      	mov	r3, r4
 8001806:	f7ff f821 	bl	800084c <__aeabi_ddiv>
 800180a:	4603      	mov	r3, r0
 800180c:	460c      	mov	r4, r1
 800180e:	4a70      	ldr	r2, [pc, #448]	; (80019d0 <StartMotorControl+0x2f8>)
 8001810:	e9c2 3402 	strd	r3, r4, [r2, #8]
	  if(predkoscPomiar[0] < 0) predkoscPomiar[0] = 0;
 8001814:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <StartMotorControl+0x2f8>)
 8001816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	f7ff f95b 	bl	8000adc <__aeabi_dcmplt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <StartMotorControl+0x162>
 800182c:	4a68      	ldr	r2, [pc, #416]	; (80019d0 <StartMotorControl+0x2f8>)
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	f04f 0400 	mov.w	r4, #0
 8001836:	e9c2 3400 	strd	r3, r4, [r2]
	  if(predkoscPomiar[1] < 0) predkoscPomiar[1] = 0;
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <StartMotorControl+0x2f8>)
 800183c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	f7ff f948 	bl	8000adc <__aeabi_dcmplt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <StartMotorControl+0x188>
 8001852:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <StartMotorControl+0x2f8>)
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  dpulse[0]+=((predkosc-predkoscPomiar[0])/predkosc*0.06);
 8001860:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <StartMotorControl+0x2fc>)
 8001862:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <StartMotorControl+0x300>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe5a 	bl	8000524 <__aeabi_i2d>
 8001870:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <StartMotorControl+0x2f8>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fd07 	bl	8000288 <__aeabi_dsub>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9c7 2300 	strd	r2, r3, [r7]
 8001882:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <StartMotorControl+0x300>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe4c 	bl	8000524 <__aeabi_i2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001894:	f7fe ffda 	bl	800084c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	a343      	add	r3, pc, #268	; (adr r3, 80019b0 <StartMotorControl+0x2d8>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7fe fceb 	bl	800028c <__adddf3>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <StartMotorControl+0x2fc>)
 80018bc:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1]+=((predkosc-predkoscPomiar[1])/predkosc*0.06);
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <StartMotorControl+0x2fc>)
 80018c2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <StartMotorControl+0x300>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_i2d>
 80018d0:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <StartMotorControl+0x2f8>)
 80018d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d6:	f7fe fcd7 	bl	8000288 <__aeabi_dsub>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2300 	strd	r2, r3, [r7]
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <StartMotorControl+0x300>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe1c 	bl	8000524 <__aeabi_i2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f4:	f7fe ffaa 	bl	800084c <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	a32b      	add	r3, pc, #172	; (adr r3, 80019b0 <StartMotorControl+0x2d8>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe77 	bl	80005f8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fcbb 	bl	800028c <__adddf3>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <StartMotorControl+0x2fc>)
 800191c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  //pulse[0] = (int) dpulse[0];
		  //pulse[1] = (int) dpulse[1];
		  if(dpulse[0]>1000) dpulse[0]=1000;
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <StartMotorControl+0x2fc>)
 8001922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <StartMotorControl+0x304>)
 800192c:	f7ff f8f4 	bl	8000b18 <__aeabi_dcmpgt>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <StartMotorControl+0x26a>
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <StartMotorControl+0x2fc>)
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	4c27      	ldr	r4, [pc, #156]	; (80019dc <StartMotorControl+0x304>)
 800193e:	e9c2 3400 	strd	r3, r4, [r2]
		  if(dpulse[1]>1000) dpulse[1]=1000;
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <StartMotorControl+0x2fc>)
 8001944:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <StartMotorControl+0x304>)
 800194e:	f7ff f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <StartMotorControl+0x28c>
 8001958:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <StartMotorControl+0x2fc>)
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	4c1f      	ldr	r4, [pc, #124]	; (80019dc <StartMotorControl+0x304>)
 8001960:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  if(dpulse[0]<0) dpulse[0]=0;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <StartMotorControl+0x2fc>)
 8001966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	f7ff f8b3 	bl	8000adc <__aeabi_dcmplt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <StartMotorControl+0x2b2>
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <StartMotorControl+0x2fc>)
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	e9c2 3400 	strd	r3, r4, [r2]
		  if(dpulse[1]<0) dpulse[1]=0;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <StartMotorControl+0x2fc>)
 800198c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f7ff f8a0 	bl	8000adc <__aeabi_dcmplt>
 800199c:	4603      	mov	r3, r0
 800199e:	e01f      	b.n	80019e0 <StartMotorControl+0x308>
 80019a0:	0ca600b0 	.word	0x0ca600b0
 80019a4:	3f72d01c 	.word	0x3f72d01c
 80019a8:	12698f10 	.word	0x12698f10
 80019ac:	3f4a6861 	.word	0x3f4a6861
 80019b0:	eb851eb8 	.word	0xeb851eb8
 80019b4:	3faeb851 	.word	0x3faeb851
 80019b8:	20004174 	.word	0x20004174
 80019bc:	200041a0 	.word	0x200041a0
 80019c0:	20004148 	.word	0x20004148
 80019c4:	20004160 	.word	0x20004160
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000010 	.word	0x20000010
 80019d0:	20004188 	.word	0x20004188
 80019d4:	20000028 	.word	0x20000028
 80019d8:	20000020 	.word	0x20000020
 80019dc:	408f4000 	.word	0x408f4000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <StartMotorControl+0x31a>
 80019e4:	4aa6      	ldr	r2, [pc, #664]	; (8001c80 <StartMotorControl+0x5a8>)
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f04f 0400 	mov.w	r4, #0
 80019ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  htim1.Instance->CCR1 = dpulse[0];
 80019f2:	4ba3      	ldr	r3, [pc, #652]	; (8001c80 <StartMotorControl+0x5a8>)
 80019f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019f8:	4aa2      	ldr	r2, [pc, #648]	; (8001c84 <StartMotorControl+0x5ac>)
 80019fa:	6815      	ldr	r5, [r2, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	4621      	mov	r1, r4
 8001a00:	f7ff f8bc 	bl	8000b7c <__aeabi_d2uiz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	636b      	str	r3, [r5, #52]	; 0x34
		  htim1.Instance->CCR2 = dpulse[1];
 8001a08:	4b9d      	ldr	r3, [pc, #628]	; (8001c80 <StartMotorControl+0x5a8>)
 8001a0a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001a0e:	4a9d      	ldr	r2, [pc, #628]	; (8001c84 <StartMotorControl+0x5ac>)
 8001a10:	6815      	ldr	r5, [r2, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	4621      	mov	r1, r4
 8001a16:	f7ff f8b1 	bl	8000b7c <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	63ab      	str	r3, [r5, #56]	; 0x38
		  osDelay(3); //bylo git przy 10
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f004 fec1 	bl	80067a6 <osDelay>


	  if(licznik == 500){
 8001a24:	4b98      	ldr	r3, [pc, #608]	; (8001c88 <StartMotorControl+0x5b0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a2c:	d149      	bne.n	8001ac2 <StartMotorControl+0x3ea>
		  int PR = (int)(1000*napiecie[0] * natezenie[0]);
 8001a2e:	4b97      	ldr	r3, [pc, #604]	; (8001c8c <StartMotorControl+0x5b4>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b95      	ldr	r3, [pc, #596]	; (8001c90 <StartMotorControl+0x5b8>)
 8001a3a:	f7fe fddd 	bl	80005f8 <__aeabi_dmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	4618      	mov	r0, r3
 8001a44:	4621      	mov	r1, r4
 8001a46:	4b93      	ldr	r3, [pc, #588]	; (8001c94 <StartMotorControl+0x5bc>)
 8001a48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f7fe fdd2 	bl	80005f8 <__aeabi_dmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	f7ff f866 	bl	8000b2c <__aeabi_d2iz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	617b      	str	r3, [r7, #20]
		  int PL = (int)(1000*napiecie[1] * natezenie[1]);
 8001a64:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <StartMotorControl+0x5b4>)
 8001a66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <StartMotorControl+0x5b8>)
 8001a70:	f7fe fdc2 	bl	80005f8 <__aeabi_dmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <StartMotorControl+0x5bc>)
 8001a7e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4623      	mov	r3, r4
 8001a86:	f7fe fdb7 	bl	80005f8 <__aeabi_dmul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	f7ff f84b 	bl	8000b2c <__aeabi_d2iz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]
		  dl_tekst = sprintf(tekst, "Pow R = %dmW Pow L = %dmW\n", PR, PL);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	497e      	ldr	r1, [pc, #504]	; (8001c98 <StartMotorControl+0x5c0>)
 8001aa0:	487e      	ldr	r0, [pc, #504]	; (8001c9c <StartMotorControl+0x5c4>)
 8001aa2:	f007 f981 	bl	8008da8 <siprintf>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <StartMotorControl+0x5c8>)
 8001aac:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart1, tekst, dl_tekst);
 8001aae:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <StartMotorControl+0x5c8>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4979      	ldr	r1, [pc, #484]	; (8001c9c <StartMotorControl+0x5c4>)
 8001ab6:	487b      	ldr	r0, [pc, #492]	; (8001ca4 <StartMotorControl+0x5cc>)
 8001ab8:	f003 ffab 	bl	8005a12 <HAL_UART_Transmit_IT>
		  licznik = 0;
 8001abc:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <StartMotorControl+0x5b0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
	  }
	  licznik+=1;
 8001ac2:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <StartMotorControl+0x5b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a6f      	ldr	r2, [pc, #444]	; (8001c88 <StartMotorControl+0x5b0>)
 8001aca:	6013      	str	r3, [r2, #0]
	  if((drDir == 'f' || drDir == 'b') && (predkoscPomiar[0] < 0.15 * predkosc || predkoscPomiar[1] < 0.15 * predkosc)){
 8001acc:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <StartMotorControl+0x5d0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b66      	cmp	r3, #102	; 0x66
 8001ad2:	d003      	beq.n	8001adc <StartMotorControl+0x404>
 8001ad4:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <StartMotorControl+0x5d0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b62      	cmp	r3, #98	; 0x62
 8001ada:	d131      	bne.n	8001b40 <StartMotorControl+0x468>
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <StartMotorControl+0x5d4>)
 8001ade:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <StartMotorControl+0x5d8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd1c 	bl	8000524 <__aeabi_i2d>
 8001aec:	a360      	add	r3, pc, #384	; (adr r3, 8001c70 <StartMotorControl+0x598>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fd81 	bl	80005f8 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe ffed 	bl	8000adc <__aeabi_dcmplt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d115      	bne.n	8001b34 <StartMotorControl+0x45c>
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <StartMotorControl+0x5d4>)
 8001b0a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b0e:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <StartMotorControl+0x5d8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd06 	bl	8000524 <__aeabi_i2d>
 8001b18:	a355      	add	r3, pc, #340	; (adr r3, 8001c70 <StartMotorControl+0x598>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd6b 	bl	80005f8 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe ffd7 	bl	8000adc <__aeabi_dcmplt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <StartMotorControl+0x468>
		  blokada += 1;
 8001b34:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <StartMotorControl+0x5dc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4a5e      	ldr	r2, [pc, #376]	; (8001cb4 <StartMotorControl+0x5dc>)
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e002      	b.n	8001b46 <StartMotorControl+0x46e>
	  }
	  else{
		  blokada = 0;
 8001b40:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <StartMotorControl+0x5dc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
	  }
	  if(blokada == 500){
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <StartMotorControl+0x5dc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b4e:	f040 80d2 	bne.w	8001cf6 <StartMotorControl+0x61e>
		  dl_tekst = sprintf(tekst, "Wykryto przeszkode!\n");
 8001b52:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <StartMotorControl+0x5c4>)
 8001b54:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <StartMotorControl+0x5e0>)
 8001b56:	4615      	mov	r5, r2
 8001b58:	461c      	mov	r4, r3
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	6028      	str	r0, [r5, #0]
 8001b5e:	6069      	str	r1, [r5, #4]
 8001b60:	60aa      	str	r2, [r5, #8]
 8001b62:	60eb      	str	r3, [r5, #12]
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	6128      	str	r0, [r5, #16]
 8001b68:	7923      	ldrb	r3, [r4, #4]
 8001b6a:	752b      	strb	r3, [r5, #20]
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <StartMotorControl+0x5c8>)
 8001b72:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart1, tekst, dl_tekst);
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <StartMotorControl+0x5c8>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4948      	ldr	r1, [pc, #288]	; (8001c9c <StartMotorControl+0x5c4>)
 8001b7c:	4849      	ldr	r0, [pc, #292]	; (8001ca4 <StartMotorControl+0x5cc>)
 8001b7e:	f003 ff48 	bl	8005a12 <HAL_UART_Transmit_IT>
		  dpulse[0] = 300;
 8001b82:	4a3f      	ldr	r2, [pc, #252]	; (8001c80 <StartMotorControl+0x5a8>)
 8001b84:	a43c      	add	r4, pc, #240	; (adr r4, 8001c78 <StartMotorControl+0x5a0>)
 8001b86:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b8a:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = 300;
 8001b8e:	4a3c      	ldr	r2, [pc, #240]	; (8001c80 <StartMotorControl+0x5a8>)
 8001b90:	a439      	add	r4, pc, #228	; (adr r4, 8001c78 <StartMotorControl+0x5a0>)
 8001b92:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b96:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  htim1.Instance->CCR1 = dpulse[0];
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <StartMotorControl+0x5a8>)
 8001b9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <StartMotorControl+0x5ac>)
 8001ba2:	6815      	ldr	r5, [r2, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f7fe ffe8 	bl	8000b7c <__aeabi_d2uiz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	636b      	str	r3, [r5, #52]	; 0x34
		  htim1.Instance->CCR2 = dpulse[1];
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <StartMotorControl+0x5a8>)
 8001bb2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001bb6:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <StartMotorControl+0x5ac>)
 8001bb8:	6815      	ldr	r5, [r2, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f7fe ffdd 	bl	8000b7c <__aeabi_d2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	63ab      	str	r3, [r5, #56]	; 0x38
		  if(drDir == 'f') doTylu();
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <StartMotorControl+0x5d0>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b66      	cmp	r3, #102	; 0x66
 8001bcc:	d101      	bne.n	8001bd2 <StartMotorControl+0x4fa>
 8001bce:	f000 fba7 	bl	8002320 <doTylu>
		  switch(drDir){
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <StartMotorControl+0x5d0>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	3b62      	subs	r3, #98	; 0x62
 8001bd8:	2b10      	cmp	r3, #16
 8001bda:	d831      	bhi.n	8001c40 <StartMotorControl+0x568>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <StartMotorControl+0x50c>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c2f 	.word	0x08001c2f
 8001be8:	08001c41 	.word	0x08001c41
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001c41 	.word	0x08001c41
 8001bf4:	08001c29 	.word	0x08001c29
 8001bf8:	08001c41 	.word	0x08001c41
 8001bfc:	08001c41 	.word	0x08001c41
 8001c00:	08001c41 	.word	0x08001c41
 8001c04:	08001c41 	.word	0x08001c41
 8001c08:	08001c41 	.word	0x08001c41
 8001c0c:	08001c35 	.word	0x08001c35
 8001c10:	08001c41 	.word	0x08001c41
 8001c14:	08001c41 	.word	0x08001c41
 8001c18:	08001c41 	.word	0x08001c41
 8001c1c:	08001c41 	.word	0x08001c41
 8001c20:	08001c41 	.word	0x08001c41
 8001c24:	08001c3b 	.word	0x08001c3b
		  case 'f':
			  doTylu();
 8001c28:	f000 fb7a 	bl	8002320 <doTylu>
			  break;
 8001c2c:	e008      	b.n	8001c40 <StartMotorControl+0x568>
		  case 'b':
			  doPrzodu();
 8001c2e:	f000 fb59 	bl	80022e4 <doPrzodu>
			  break;
 8001c32:	e005      	b.n	8001c40 <StartMotorControl+0x568>
		  case 'l':
			  wPrawo();
 8001c34:	f000 fbb0 	bl	8002398 <wPrawo>
			  break;
 8001c38:	e002      	b.n	8001c40 <StartMotorControl+0x568>
		  case 'r':
			  wLewo();
 8001c3a:	f000 fb8f 	bl	800235c <wLewo>
			  break;
 8001c3e:	bf00      	nop
		  }
		  HAL_Delay(600);
 8001c40:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c44:	f000 ff5a 	bl	8002afc <HAL_Delay>
		  stoj();
 8001c48:	f000 fbc4 	bl	80023d4 <stoj>
		  wLewo();
 8001c4c:	f000 fb86 	bl	800235c <wLewo>
		  HAL_Delay(600);
 8001c50:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c54:	f000 ff52 	bl	8002afc <HAL_Delay>
		  switch(drDir){
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <StartMotorControl+0x5d0>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b62      	cmp	r3, #98	; 0x62
 8001c5e:	d02d      	beq.n	8001cbc <StartMotorControl+0x5e4>
 8001c60:	2b66      	cmp	r3, #102	; 0x66
 8001c62:	d12e      	bne.n	8001cc2 <StartMotorControl+0x5ea>
		  case 'f':
			  doPrzodu();
 8001c64:	f000 fb3e 	bl	80022e4 <doPrzodu>
			  break;
 8001c68:	e02b      	b.n	8001cc2 <StartMotorControl+0x5ea>
 8001c6a:	bf00      	nop
 8001c6c:	f3af 8000 	nop.w
 8001c70:	33333333 	.word	0x33333333
 8001c74:	3fc33333 	.word	0x3fc33333
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	4072c000 	.word	0x4072c000
 8001c80:	20000028 	.word	0x20000028
 8001c84:	2000422c 	.word	0x2000422c
 8001c88:	20004180 	.word	0x20004180
 8001c8c:	20004148 	.word	0x20004148
 8001c90:	408f4000 	.word	0x408f4000
 8001c94:	20004160 	.word	0x20004160
 8001c98:	08009724 	.word	0x08009724
 8001c9c:	20004124 	.word	0x20004124
 8001ca0:	20004120 	.word	0x20004120
 8001ca4:	200042ac 	.word	0x200042ac
 8001ca8:	20004198 	.word	0x20004198
 8001cac:	20004188 	.word	0x20004188
 8001cb0:	20000020 	.word	0x20000020
 8001cb4:	2000415c 	.word	0x2000415c
 8001cb8:	08009740 	.word	0x08009740
		  case 'b':
			  doTylu();
 8001cbc:	f000 fb30 	bl	8002320 <doTylu>
			  break;
 8001cc0:	bf00      	nop
		  }
		  blokada = 0;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <StartMotorControl+0x630>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
		  dpulse[0] = predkosc;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <StartMotorControl+0x634>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc29 	bl	8000524 <__aeabi_i2d>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <StartMotorControl+0x638>)
 8001cd8:	e9c2 3400 	strd	r3, r4, [r2]
		  dpulse[1] = predkosc;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <StartMotorControl+0x634>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc1f 	bl	8000524 <__aeabi_i2d>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <StartMotorControl+0x638>)
 8001cec:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  HAL_Delay(200);
 8001cf0:	20c8      	movs	r0, #200	; 0xc8
 8001cf2:	f000 ff03 	bl	8002afc <HAL_Delay>

	  }

	  xSemaphoreGive(bSem3Handle);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <StartMotorControl+0x63c>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f004 ffd0 	bl	8006ca4 <xQueueGenericSend>
  {
 8001d04:	e4ed      	b.n	80016e2 <StartMotorControl+0xa>
 8001d06:	bf00      	nop
 8001d08:	2000415c 	.word	0x2000415c
 8001d0c:	20000020 	.word	0x20000020
 8001d10:	20000028 	.word	0x20000028
 8001d14:	20004174 	.word	0x20004174

08001d18 <StartAdcAvgVal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcAvgVal */
void StartAdcAvgVal(void const * argument)
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcAvgVal */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSem2Handle, osWaitForever);
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <StartAdcAvgVal+0x90>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 fd83 	bl	8006834 <osSemaphoreWait>
	  for(int i = 0; i < 6; i++){
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e02b      	b.n	8001d8c <StartAdcAvgVal+0x74>
		  adcAvgVal[i]=adcAvgVal[i]*0.999+adcVal[i]*0.001; //uśrednianie
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <StartAdcAvgVal+0x94>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d40:	a315      	add	r3, pc, #84	; (adr r3, 8001d98 <StartAdcAvgVal+0x80>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe fc57 	bl	80005f8 <__aeabi_dmul>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4625      	mov	r5, r4
 8001d50:	461c      	mov	r4, r3
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <StartAdcAvgVal+0x98>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbd2 	bl	8000504 <__aeabi_ui2d>
 8001d60:	a30f      	add	r3, pc, #60	; (adr r3, 8001da0 <StartAdcAvgVal+0x88>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fc47 	bl	80005f8 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fa8b 	bl	800028c <__adddf3>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <StartAdcAvgVal+0x94>)
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	00d2      	lsls	r2, r2, #3
 8001d80:	440a      	add	r2, r1
 8001d82:	e9c2 3400 	strd	r3, r4, [r2]
	  for(int i = 0; i < 6; i++){
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	ddd0      	ble.n	8001d34 <StartAdcAvgVal+0x1c>
	  osSemaphoreWait(bSem2Handle, osWaitForever);
 8001d92:	e7c5      	b.n	8001d20 <StartAdcAvgVal+0x8>
 8001d94:	f3af 8000 	nop.w
 8001d98:	d916872b 	.word	0xd916872b
 8001d9c:	3feff7ce 	.word	0x3feff7ce
 8001da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001da4:	3f50624d 	.word	0x3f50624d
 8001da8:	20004178 	.word	0x20004178
 8001dac:	200041a0 	.word	0x200041a0
 8001db0:	200041d4 	.word	0x200041d4
 8001db4:	00000000 	.word	0x00000000

08001db8 <pomiarBeta>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void pomiarBeta(){
 8001db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
	osSemaphoreWait(bSem3Handle, osWaitForever);
 8001dc0:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <pomiarBeta+0x230>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 fd33 	bl	8006834 <osSemaphoreWait>
	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_SET);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	4886      	ldr	r0, [pc, #536]	; (8001fec <pomiarBeta+0x234>)
 8001dd4:	f002 f9e0 	bl	8004198 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2110      	movs	r1, #16
 8001ddc:	4884      	ldr	r0, [pc, #528]	; (8001ff0 <pomiarBeta+0x238>)
 8001dde:	f002 f9db 	bl	8004198 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2101      	movs	r1, #1
 8001de6:	4883      	ldr	r0, [pc, #524]	; (8001ff4 <pomiarBeta+0x23c>)
 8001de8:	f002 f9d6 	bl	8004198 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2120      	movs	r1, #32
 8001df0:	487f      	ldr	r0, [pc, #508]	; (8001ff0 <pomiarBeta+0x238>)
 8001df2:	f002 f9d1 	bl	8004198 <HAL_GPIO_WritePin>

	 htim1.Instance->CCR1 = 1000;
 8001df6:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <pomiarBeta+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
	 htim1.Instance->CCR2 = 1000;
 8001e00:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <pomiarBeta+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38


	 osDelay(3000);
 8001e0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e0e:	f004 fcca 	bl	80067a6 <osDelay>

	 beta[0]=((fabs(adcAvgVal[0]-adcAvgVal[1])*0.004593)-adcAvgVal[4]*0.0008059*oporWew[0])/1000; //dziala z kondensatorami
 8001e12:	4b7a      	ldr	r3, [pc, #488]	; (8001ffc <pomiarBeta+0x244>)
 8001e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e18:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <pomiarBeta+0x244>)
 8001e1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e1e:	f7fe fa33 	bl	8000288 <__aeabi_dsub>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4690      	mov	r8, r2
 8001e28:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001e2c:	a368      	add	r3, pc, #416	; (adr r3, 8001fd0 <pomiarBeta+0x218>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4640      	mov	r0, r8
 8001e34:	4649      	mov	r1, r9
 8001e36:	f7fe fbdf 	bl	80005f8 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4690      	mov	r8, r2
 8001e40:	4699      	mov	r9, r3
 8001e42:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <pomiarBeta+0x244>)
 8001e44:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e48:	a363      	add	r3, pc, #396	; (adr r3, 8001fd8 <pomiarBeta+0x220>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fbd3 	bl	80005f8 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4b69      	ldr	r3, [pc, #420]	; (8002000 <pomiarBeta+0x248>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4640      	mov	r0, r8
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	f7fe fa0c 	bl	8000288 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <pomiarBeta+0x24c>)
 8001e7e:	f7fe fce5 	bl	800084c <__aeabi_ddiv>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4960      	ldr	r1, [pc, #384]	; (8002008 <pomiarBeta+0x250>)
 8001e88:	e9c1 2300 	strd	r2, r3, [r1]
	 beta[1]=((fabs(adcAvgVal[2]-adcAvgVal[3])*0.004593)-adcAvgVal[5]*0.0008059*oporWew[1])/1000; //dziala z kondensatorami
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <pomiarBeta+0x244>)
 8001e8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e92:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <pomiarBeta+0x244>)
 8001e94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e98:	f7fe f9f6 	bl	8000288 <__aeabi_dsub>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001ea6:	a34a      	add	r3, pc, #296	; (adr r3, 8001fd0 <pomiarBeta+0x218>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	4620      	mov	r0, r4
 8001eae:	4629      	mov	r1, r5
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	461d      	mov	r5, r3
 8001eba:	4626      	mov	r6, r4
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <pomiarBeta+0x244>)
 8001ebe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ec2:	a345      	add	r3, pc, #276	; (adr r3, 8001fd8 <pomiarBeta+0x220>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fb96 	bl	80005f8 <__aeabi_dmul>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <pomiarBeta+0x248>)
 8001ed6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4623      	mov	r3, r4
 8001ede:	f7fe fb8b 	bl	80005f8 <__aeabi_dmul>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4623      	mov	r3, r4
 8001eea:	4628      	mov	r0, r5
 8001eec:	4631      	mov	r1, r6
 8001eee:	f7fe f9cb 	bl	8000288 <__aeabi_dsub>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	4621      	mov	r1, r4
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <pomiarBeta+0x24c>)
 8001f00:	f7fe fca4 	bl	800084c <__aeabi_ddiv>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <pomiarBeta+0x250>)
 8001f0a:	e9c2 3402 	strd	r3, r4, [r2, #8]

	 //beta[0]=(9-adcAvgVal[4]*0.0008059*oporWew[0])/1000; //ze wzgledu na slaby udczyt pwm
	 //beta[1]=(9-adcAvgVal[5]*0.0008059*oporWew[1])/1000; //ze wzgledu na slaby odzcyt pwm

	 htim1.Instance->CCR1 = predkosc;
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <pomiarBeta+0x254>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <pomiarBeta+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
	 htim1.Instance->CCR2 = predkosc;
 8001f18:	4b3c      	ldr	r3, [pc, #240]	; (800200c <pomiarBeta+0x254>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <pomiarBeta+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38

	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	4831      	ldr	r0, [pc, #196]	; (8001fec <pomiarBeta+0x234>)
 8001f28:	f002 f936 	bl	8004198 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2110      	movs	r1, #16
 8001f30:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <pomiarBeta+0x238>)
 8001f32:	f002 f931 	bl	8004198 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2101      	movs	r1, #1
 8001f3a:	482e      	ldr	r0, [pc, #184]	; (8001ff4 <pomiarBeta+0x23c>)
 8001f3c:	f002 f92c 	bl	8004198 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2120      	movs	r1, #32
 8001f44:	482a      	ldr	r0, [pc, #168]	; (8001ff0 <pomiarBeta+0x238>)
 8001f46:	f002 f927 	bl	8004198 <HAL_GPIO_WritePin>
	 drDir = 's';
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <pomiarBeta+0x258>)
 8001f4c:	2273      	movs	r2, #115	; 0x73
 8001f4e:	701a      	strb	r2, [r3, #0]
	 int R = (int)10000*beta[0];
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <pomiarBeta+0x250>)
 8001f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f56:	a322      	add	r3, pc, #136	; (adr r3, 8001fe0 <pomiarBeta+0x228>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	f7fe fde0 	bl	8000b2c <__aeabi_d2iz>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	607b      	str	r3, [r7, #4]
	 int L = (int)10000*beta[1];
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <pomiarBeta+0x250>)
 8001f72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f76:	a31a      	add	r3, pc, #104	; (adr r3, 8001fe0 <pomiarBeta+0x228>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	4618      	mov	r0, r3
 8001f86:	4621      	mov	r1, r4
 8001f88:	f7fe fdd0 	bl	8000b2c <__aeabi_d2iz>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	603b      	str	r3, [r7, #0]
	 dl_tekst = sprintf(tekst, "B R = %d B L = %d\n", R, L);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	491f      	ldr	r1, [pc, #124]	; (8002014 <pomiarBeta+0x25c>)
 8001f96:	4820      	ldr	r0, [pc, #128]	; (8002018 <pomiarBeta+0x260>)
 8001f98:	f006 ff06 	bl	8008da8 <siprintf>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <pomiarBeta+0x264>)
 8001fa2:	801a      	strh	r2, [r3, #0]
	 HAL_UART_Transmit_IT(&huart1, tekst, dl_tekst);
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <pomiarBeta+0x264>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	491b      	ldr	r1, [pc, #108]	; (8002018 <pomiarBeta+0x260>)
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <pomiarBeta+0x268>)
 8001fae:	f003 fd30 	bl	8005a12 <HAL_UART_Transmit_IT>

	 xSemaphoreGive(bSem3Handle);
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <pomiarBeta+0x230>)
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f004 fe72 	bl	8006ca4 <xQueueGenericSend>

}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	0ca600b0 	.word	0x0ca600b0
 8001fd4:	3f72d01c 	.word	0x3f72d01c
 8001fd8:	12698f10 	.word	0x12698f10
 8001fdc:	3f4a6861 	.word	0x3f4a6861
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40c38800 	.word	0x40c38800
 8001fe8:	20004174 	.word	0x20004174
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	2000422c 	.word	0x2000422c
 8001ffc:	200041a0 	.word	0x200041a0
 8002000:	20000000 	.word	0x20000000
 8002004:	408f4000 	.word	0x408f4000
 8002008:	20000010 	.word	0x20000010
 800200c:	20000020 	.word	0x20000020
 8002010:	20004198 	.word	0x20004198
 8002014:	08009758 	.word	0x08009758
 8002018:	20004124 	.word	0x20004124
 800201c:	20004120 	.word	0x20004120
 8002020:	200042ac 	.word	0x200042ac

08002024 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <MX_GPIO_Init+0x100>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a38      	ldr	r2, [pc, #224]	; (8002124 <MX_GPIO_Init+0x100>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <MX_GPIO_Init+0x100>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <MX_GPIO_Init+0x100>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <MX_GPIO_Init+0x100>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <MX_GPIO_Init+0x100>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <MX_GPIO_Init+0x100>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <MX_GPIO_Init+0x100>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MX_GPIO_Init+0x100>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RF_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	21a0      	movs	r1, #160	; 0xa0
 8002092:	4825      	ldr	r0, [pc, #148]	; (8002128 <MX_GPIO_Init+0x104>)
 8002094:	f002 f880 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LF_Pin|LB_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2130      	movs	r1, #48	; 0x30
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <MX_GPIO_Init+0x108>)
 800209e:	f002 f87b 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2101      	movs	r1, #1
 80020a6:	4822      	ldr	r0, [pc, #136]	; (8002130 <MX_GPIO_Init+0x10c>)
 80020a8:	f002 f876 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB_Pin;
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	4619      	mov	r1, r3
 80020c0:	481a      	ldr	r0, [pc, #104]	; (800212c <MX_GPIO_Init+0x108>)
 80020c2:	f001 fecf 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RF_Pin;
 80020c6:	23a0      	movs	r3, #160	; 0xa0
 80020c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4619      	mov	r1, r3
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <MX_GPIO_Init+0x104>)
 80020de:	f001 fec1 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LF_Pin|LB_Pin;
 80020e2:	2330      	movs	r3, #48	; 0x30
 80020e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_GPIO_Init+0x108>)
 80020fa:	f001 feb3 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RB_Pin;
 80020fe:	2301      	movs	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RB_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	4619      	mov	r1, r3
 8002114:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_GPIO_Init+0x10c>)
 8002116:	f001 fea5 	bl	8003e64 <HAL_GPIO_Init>

}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020800 	.word	0x40020800
 8002130:	40020400 	.word	0x40020400

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002138:	f000 fc9e 	bl	8002a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800213c:	f000 f81c 	bl	8002178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002140:	f7ff ff70 	bl	8002024 <MX_GPIO_Init>
  MX_DMA_Init();
 8002144:	f7fe fff0 	bl	8001128 <MX_DMA_Init>
  MX_ADC1_Init();
 8002148:	f7fe feb8 	bl	8000ebc <MX_ADC1_Init>
  MX_TIM2_Init();
 800214c:	f000 fb2e 	bl	80027ac <MX_TIM2_Init>
  MX_TIM1_Init();
 8002150:	f000 fa72 	bl	8002638 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002154:	f000 fbec 	bl	8002930 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  while(HAL_GPIO_ReadPin(PB_GPIO_Port, PB_Pin));
 8002158:	bf00      	nop
 800215a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <main+0x40>)
 8002160:	f002 f802 	bl	8004168 <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f7      	bne.n	800215a <main+0x26>
  /* USER CODE END 2 */
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800216a:	f7ff f817 	bl	800119c <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 800216e:	f004 fac7 	bl	8006700 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002172:	e7fe      	b.n	8002172 <main+0x3e>
 8002174:	40020800 	.word	0x40020800

08002178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	2230      	movs	r2, #48	; 0x30
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f006 fe05 	bl	8008d96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <SystemClock_Config+0xd0>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <SystemClock_Config+0xd0>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <SystemClock_Config+0xd0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <SystemClock_Config+0xd4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021c4:	4a21      	ldr	r2, [pc, #132]	; (800224c <SystemClock_Config+0xd4>)
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <SystemClock_Config+0xd4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021dc:	2301      	movs	r3, #1
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e0:	2310      	movs	r3, #16
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e4:	2302      	movs	r3, #2
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021ec:	2310      	movs	r3, #16
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021f6:	2304      	movs	r3, #4
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021fa:	2307      	movs	r3, #7
 80021fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fe:	f107 0320 	add.w	r3, r7, #32
 8002202:	4618      	mov	r0, r3
 8002204:	f001 fffc 	bl	8004200 <HAL_RCC_OscConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800220e:	f000 f861 	bl	80022d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002212:	230f      	movs	r3, #15
 8002214:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002216:	2302      	movs	r3, #2
 8002218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2102      	movs	r1, #2
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fa56 	bl	80046e0 <HAL_RCC_ClockConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800223a:	f000 f84b 	bl	80022d4 <Error_Handler>
  }
}
 800223e:	bf00      	nop
 8002240:	3750      	adds	r7, #80	; 0x50
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000

08002250 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	/*

	*/

	  if(huart->Instance == USART1){
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_UART_RxCpltCallback+0x30>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d105      	bne.n	800226e <HAL_UART_RxCpltCallback+0x1e>
		  xSemaphoreGiveFromISR(bSem1Handle, NULL);
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_UART_RxCpltCallback+0x34>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f004 fe15 	bl	8006e98 <xQueueGiveFromISR>
	 	}
		HAL_UART_Receive_IT(&huart1, &znak, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	4905      	ldr	r1, [pc, #20]	; (8002288 <HAL_UART_RxCpltCallback+0x38>)
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_UART_RxCpltCallback+0x3c>)
 8002274:	f003 fc12 	bl	8005a9c <HAL_UART_Receive_IT>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40011000 	.word	0x40011000
 8002284:	20004158 	.word	0x20004158
 8002288:	200041d0 	.word	0x200041d0
 800228c:	200042ac 	.word	0x200042ac

08002290 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //test czy dziala
	xSemaphoreGiveFromISR(bSem2Handle, NULL);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fdfa 	bl	8006e98 <xQueueGiveFromISR>

}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20004178 	.word	0x20004178

080022b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022c2:	f000 fbfb 	bl	8002abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40000400 	.word	0x40000400

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <doPrzodu>:
extern uint8_t tekst[30];
extern uint16_t dl_tekst;

void wyswietlMoc(void){
}
void doPrzodu(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
    	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <doPrzodu+0x30>)
 80022ee:	f001 ff53 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2110      	movs	r1, #16
 80022f6:	4808      	ldr	r0, [pc, #32]	; (8002318 <doPrzodu+0x34>)
 80022f8:	f001 ff4e 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2101      	movs	r1, #1
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <doPrzodu+0x38>)
 8002302:	f001 ff49 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <doPrzodu+0x34>)
 800230c:	f001 ff44 	bl	8004198 <HAL_GPIO_WritePin>

     }
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40020000 	.word	0x40020000
 8002318:	40020800 	.word	0x40020800
 800231c:	40020400 	.word	0x40020400

08002320 <doTylu>:
void doTylu(){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <doTylu+0x30>)
 800232a:	f001 ff35 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2110      	movs	r1, #16
 8002332:	4808      	ldr	r0, [pc, #32]	; (8002354 <doTylu+0x34>)
 8002334:	f001 ff30 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	2101      	movs	r1, #1
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <doTylu+0x38>)
 800233e:	f001 ff2b 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	2120      	movs	r1, #32
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <doTylu+0x34>)
 8002348:	f001 ff26 	bl	8004198 <HAL_GPIO_WritePin>

     }
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020000 	.word	0x40020000
 8002354:	40020800 	.word	0x40020800
 8002358:	40020400 	.word	0x40020400

0800235c <wLewo>:

void wLewo(){
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
    	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_SET);
 8002360:	2201      	movs	r2, #1
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <wLewo+0x30>)
 8002366:	f001 ff17 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2110      	movs	r1, #16
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <wLewo+0x34>)
 8002370:	f001 ff12 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	2101      	movs	r1, #1
 8002378:	4806      	ldr	r0, [pc, #24]	; (8002394 <wLewo+0x38>)
 800237a:	f001 ff0d 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	2120      	movs	r1, #32
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <wLewo+0x34>)
 8002384:	f001 ff08 	bl	8004198 <HAL_GPIO_WritePin>

     }
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020000 	.word	0x40020000
 8002390:	40020800 	.word	0x40020800
 8002394:	40020400 	.word	0x40020400

08002398 <wPrawo>:

void wPrawo(){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_RESET);
 800239c:	2200      	movs	r2, #0
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <wPrawo+0x30>)
 80023a2:	f001 fef9 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2110      	movs	r1, #16
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <wPrawo+0x34>)
 80023ac:	f001 fef4 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2101      	movs	r1, #1
 80023b4:	4806      	ldr	r0, [pc, #24]	; (80023d0 <wPrawo+0x38>)
 80023b6:	f001 feef 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2120      	movs	r1, #32
 80023be:	4803      	ldr	r0, [pc, #12]	; (80023cc <wPrawo+0x34>)
 80023c0:	f001 feea 	bl	8004198 <HAL_GPIO_WritePin>

     }
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020400 	.word	0x40020400

080023d4 <stoj>:

void stoj(){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
    	 HAL_GPIO_WritePin(RF_GPIO_Port, RF_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <stoj+0x30>)
 80023de:	f001 fedb 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LF_GPIO_Port, LF_Pin, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2110      	movs	r1, #16
 80023e6:	4808      	ldr	r0, [pc, #32]	; (8002408 <stoj+0x34>)
 80023e8:	f001 fed6 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2101      	movs	r1, #1
 80023f0:	4806      	ldr	r0, [pc, #24]	; (800240c <stoj+0x38>)
 80023f2:	f001 fed1 	bl	8004198 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2120      	movs	r1, #32
 80023fa:	4803      	ldr	r0, [pc, #12]	; (8002408 <stoj+0x34>)
 80023fc:	f001 fecc 	bl	8004198 <HAL_GPIO_WritePin>

     }
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40020000 	.word	0x40020000
 8002408:	40020800 	.word	0x40020800
 800240c:	40020400 	.word	0x40020400

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_MspInit+0x54>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_MspInit+0x54>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_MspInit+0x54>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_MspInit+0x54>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_MspInit+0x54>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_MspInit+0x54>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	210f      	movs	r1, #15
 8002452:	f06f 0001 	mvn.w	r0, #1
 8002456:	f001 f94b 	bl	80036f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8002478:	2200      	movs	r2, #0
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	201d      	movs	r0, #29
 800247e:	f001 f937 	bl	80036f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8002482:	201d      	movs	r0, #29
 8002484:	f001 f950 	bl	8003728 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_InitTick+0xa4>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_InitTick+0xa4>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_InitTick+0xa4>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024a4:	f107 0210 	add.w	r2, r7, #16
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fb08 	bl	8004ac4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024b4:	f002 fade 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80024b8:	4603      	mov	r3, r0
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <HAL_InitTick+0xa8>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	3b01      	subs	r3, #1
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_InitTick+0xac>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_InitTick+0xb0>)
 80024d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_InitTick+0xac>)
 80024d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_InitTick+0xac>)
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_InitTick+0xac>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_InitTick+0xac>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80024ec:	4809      	ldr	r0, [pc, #36]	; (8002514 <HAL_InitTick+0xac>)
 80024ee:	f002 fb1b 	bl	8004b28 <HAL_TIM_Base_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <HAL_InitTick+0xac>)
 80024fa:	f002 fb64 	bl	8004bc6 <HAL_TIM_Base_Start_IT>
 80024fe:	4603      	mov	r3, r0
 8002500:	e000      	b.n	8002504 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3730      	adds	r7, #48	; 0x30
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	431bde83 	.word	0x431bde83
 8002514:	200041ec 	.word	0x200041ec
 8002518:	40000400 	.word	0x40000400

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <MemManage_Handler+0x4>

08002536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <UsageFault_Handler+0x4>

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <ADC_IRQHandler+0x10>)
 8002556:	f000 fb36 	bl	8002bc6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20004078 	.word	0x20004078

08002564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM2_IRQHandler+0x10>)
 800256a:	f002 fbb7 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000426c 	.word	0x2000426c

08002578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM3_IRQHandler+0x10>)
 800257e:	f002 fbad 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200041ec 	.word	0x200041ec

0800258c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <USART1_IRQHandler+0x10>)
 8002592:	f003 fad9 	bl	8005b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200042ac 	.word	0x200042ac

080025a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA2_Stream0_IRQHandler+0x10>)
 80025a6:	f001 f9f5 	bl	8003994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200040c0 	.word	0x200040c0

080025b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <_sbrk+0x50>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x16>
		heap_end = &end;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <_sbrk+0x50>)
 80025c6:	4a10      	ldr	r2, [pc, #64]	; (8002608 <_sbrk+0x54>)
 80025c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <_sbrk+0x50>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <_sbrk+0x50>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	466a      	mov	r2, sp
 80025da:	4293      	cmp	r3, r2
 80025dc:	d907      	bls.n	80025ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025de:	f006 fba5 	bl	8008d2c <__errno>
 80025e2:	4602      	mov	r2, r0
 80025e4:	230c      	movs	r3, #12
 80025e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	e006      	b.n	80025fc <_sbrk+0x48>
	}

	heap_end += incr;
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <_sbrk+0x50>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a03      	ldr	r2, [pc, #12]	; (8002604 <_sbrk+0x50>)
 80025f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000320 	.word	0x20000320
 8002608:	200042f8 	.word	0x200042f8

0800260c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <SystemInit+0x28>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <SystemInit+0x28>)
 8002618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800261c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <SystemInit+0x28>)
 8002622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002626:	609a      	str	r2, [r3, #8]
#endif
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b096      	sub	sp, #88	; 0x58
 800263c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2220      	movs	r2, #32
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f006 fb90 	bl	8008d96 <memset>

  htim1.Instance = TIM1;
 8002676:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002678:	4a4b      	ldr	r2, [pc, #300]	; (80027a8 <MX_TIM1_Init+0x170>)
 800267a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 800267c:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <MX_TIM1_Init+0x16c>)
 800267e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8002682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800268a:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <MX_TIM1_Init+0x16c>)
 800268c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <MX_TIM1_Init+0x16c>)
 800269a:	2200      	movs	r2, #0
 800269c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <MX_TIM1_Init+0x16c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026a4:	483f      	ldr	r0, [pc, #252]	; (80027a4 <MX_TIM1_Init+0x16c>)
 80026a6:	f002 fa3f 	bl	8004b28 <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80026b0:	f7ff fe10 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026be:	4619      	mov	r1, r3
 80026c0:	4838      	ldr	r0, [pc, #224]	; (80027a4 <MX_TIM1_Init+0x16c>)
 80026c2:	f002 fcd9 	bl	8005078 <HAL_TIM_ConfigClockSource>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80026cc:	f7ff fe02 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026d0:	4834      	ldr	r0, [pc, #208]	; (80027a4 <MX_TIM1_Init+0x16c>)
 80026d2:	f002 fa9c 	bl	8004c0e <HAL_TIM_PWM_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80026dc:	f7ff fdfa 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026ec:	4619      	mov	r1, r3
 80026ee:	482d      	ldr	r0, [pc, #180]	; (80027a4 <MX_TIM1_Init+0x16c>)
 80026f0:	f003 f86e 	bl	80057d0 <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80026fa:	f7ff fdeb 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fe:	2360      	movs	r3, #96	; 0x60
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002706:	2300      	movs	r3, #0
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800270a:	2300      	movs	r3, #0
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800271a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271e:	2200      	movs	r2, #0
 8002720:	4619      	mov	r1, r3
 8002722:	4820      	ldr	r0, [pc, #128]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002724:	f002 fbe2 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800272e:	f7ff fdd1 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2204      	movs	r2, #4
 8002738:	4619      	mov	r1, r3
 800273a:	481a      	ldr	r0, [pc, #104]	; (80027a4 <MX_TIM1_Init+0x16c>)
 800273c:	f002 fbd6 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002746:	f7ff fdc5 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274e:	2208      	movs	r2, #8
 8002750:	4619      	mov	r1, r3
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002754:	f002 fbca 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800275e:	f7ff fdb9 	bl	80022d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002786:	f003 f891 	bl	80058ac <HAL_TIMEx_ConfigBreakDeadTime>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002790:	f7ff fda0 	bl	80022d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002794:	4803      	ldr	r0, [pc, #12]	; (80027a4 <MX_TIM1_Init+0x16c>)
 8002796:	f000 f891 	bl	80028bc <HAL_TIM_MspPostInit>

}
 800279a:	bf00      	nop
 800279c:	3758      	adds	r7, #88	; 0x58
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000422c 	.word	0x2000422c
 80027a8:	40010000 	.word	0x40010000

080027ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c0:	463b      	mov	r3, r7
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_TIM2_Init+0x94>)
 80027ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5599;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <MX_TIM2_Init+0x94>)
 80027d2:	f241 52df 	movw	r2, #5599	; 0x15df
 80027d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <MX_TIM2_Init+0x94>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <MX_TIM2_Init+0x94>)
 80027e0:	2204      	movs	r2, #4
 80027e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_TIM2_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <MX_TIM2_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027f0:	4813      	ldr	r0, [pc, #76]	; (8002840 <MX_TIM2_Init+0x94>)
 80027f2:	f002 f999 	bl	8004b28 <HAL_TIM_Base_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027fc:	f7ff fd6a 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	4619      	mov	r1, r3
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <MX_TIM2_Init+0x94>)
 800280e:	f002 fc33 	bl	8005078 <HAL_TIM_ConfigClockSource>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002818:	f7ff fd5c 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800281c:	2320      	movs	r3, #32
 800281e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002824:	463b      	mov	r3, r7
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_TIM2_Init+0x94>)
 800282a:	f002 ffd1 	bl	80057d0 <HAL_TIMEx_MasterConfigSynchronization>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002834:	f7ff fd4e 	bl	80022d4 <Error_Handler>
  }

}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000426c 	.word	0x2000426c

08002844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_TIM_Base_MspInit+0x70>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_TIM_Base_MspInit+0x74>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_TIM_Base_MspInit+0x74>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_TIM_Base_MspInit+0x74>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002872:	e01a      	b.n	80028aa <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d115      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_TIM_Base_MspInit+0x74>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <HAL_TIM_Base_MspInit+0x74>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_TIM_Base_MspInit+0x74>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2105      	movs	r1, #5
 800289e:	201c      	movs	r0, #28
 80028a0:	f000 ff26 	bl	80036f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 ff3f 	bl	8003728 <HAL_NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a12      	ldr	r2, [pc, #72]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11e      	bne.n	800291c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_TIM_MspPostInit+0x6c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_TIM_MspPostInit+0x6c>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_TIM_MspPostInit+0x6c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWMR_Pin|PWML_Pin;
 80028fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290c:	2301      	movs	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4619      	mov	r1, r3
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_TIM_MspPostInit+0x70>)
 8002918:	f001 faa4 	bl	8003e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40010000 	.word	0x40010000
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000

08002930 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_USART1_UART_Init+0x4c>)
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <MX_USART1_UART_Init+0x50>)
 8002938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_USART1_UART_Init+0x4c>)
 800293c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_USART1_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_USART1_UART_Init+0x4c>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_USART1_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_USART1_UART_Init+0x4c>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_USART1_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_USART1_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_USART1_UART_Init+0x4c>)
 8002968:	f003 f806 	bl	8005978 <HAL_UART_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002972:	f7ff fcaf 	bl	80022d4 <Error_Handler>
  }

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200042ac 	.word	0x200042ac
 8002980:	40011000 	.word	0x40011000

08002984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_UART_MspInit+0x94>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d133      	bne.n	8002a0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029b0:	f043 0310 	orr.w	r3, r3, #16
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029de:	23c0      	movs	r3, #192	; 0xc0
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029ee:	2307      	movs	r3, #7
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <HAL_UART_MspInit+0x9c>)
 80029fa:	f001 fa33 	bl	8003e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2105      	movs	r1, #5
 8002a02:	2025      	movs	r0, #37	; 0x25
 8002a04:	f000 fe74 	bl	80036f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a08:	2025      	movs	r0, #37	; 0x25
 8002a0a:	f000 fe8d 	bl	8003728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020400 	.word	0x40020400

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a2a:	e003      	b.n	8002a34 <LoopCopyDataInit>

08002a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a32:	3104      	adds	r1, #4

08002a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a3c:	d3f6      	bcc.n	8002a2c <CopyDataInit>
  ldr  r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a40:	e002      	b.n	8002a48 <LoopFillZerobss>

08002a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a44:	f842 3b04 	str.w	r3, [r2], #4

08002a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a4c:	d3f9      	bcc.n	8002a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a4e:	f7ff fddd 	bl	800260c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f006 f971 	bl	8008d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7ff fb6d 	bl	8002134 <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a5c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002a60:	080097d8 	.word	0x080097d8
  ldr  r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a68:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8002a6c:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002a70:	200042f4 	.word	0x200042f4

08002a74 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <DMA1_Stream0_IRQHandler>
	...

08002a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_Init+0x40>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_Init+0x40>)
 8002a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_Init+0x40>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 fe1a 	bl	80036da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fcde 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fcb0 	bl	8002410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000040 	.word	0x20000040
 8002ae0:	200042ec 	.word	0x200042ec

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200042ec 	.word	0x200042ec

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_Delay+0x40>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000040 	.word	0x20000040

08002b40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e033      	b.n	8002bbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe fa46 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b86:	f023 0302 	bic.w	r3, r3, #2
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb6c 	bl	8003270 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
 8002bae:	e001      	b.n	8002bb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d049      	beq.n	8002c9c <HAL_ADC_IRQHandler+0xd6>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d046      	beq.n	8002c9c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d12b      	bne.n	8002c8c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d127      	bne.n	8002c8c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d119      	bne.n	8002c8c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0220 	bic.w	r2, r2, #32
 8002c66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff faff 	bl	8002290 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0212 	mvn.w	r2, #18
 8002c9a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d057      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x1b8>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d054      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d139      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d12b      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d124      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11d      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d119      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d48:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fbfc 	bl	800356c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 020c 	mvn.w	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x21a>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d014      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10d      	bne.n	8002de0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f917 	bl	8003004 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f06f 0201 	mvn.w	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x27a>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0220 	mvn.w	r2, #32
 8002e2e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8f1 	bl	8003018 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0220 	mvn.w	r2, #32
 8002e3e:	601a      	str	r2, [r3, #0]
  }
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_Start_DMA+0x1e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0b1      	b.n	8002fca <HAL_ADC_Start_DMA+0x182>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d018      	beq.n	8002eae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8c:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <HAL_ADC_Start_DMA+0x18c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <HAL_ADC_Start_DMA+0x190>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9a      	lsrs	r2, r3, #18
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f9      	bne.n	8002ea2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 8085 	bne.w	8002fc8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f023 0206 	bic.w	r2, r3, #6
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
 8002f0a:	e002      	b.n	8002f12 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_ADC_Start_DMA+0x194>)
 8002f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <HAL_ADC_Start_DMA+0x198>)
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <HAL_ADC_Start_DMA+0x19c>)
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_ADC_Start_DMA+0x1a0>)
 8002f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	334c      	adds	r3, #76	; 0x4c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f000 fc96 	bl	80038a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10f      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	e013      	b.n	8002fc8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a11      	ldr	r2, [pc, #68]	; (8002fec <HAL_ADC_Start_DMA+0x1a4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_ADC_Start_DMA+0x180>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000038 	.word	0x20000038
 8002fd8:	431bde83 	.word	0x431bde83
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	08003469 	.word	0x08003469
 8002fe4:	08003523 	.word	0x08003523
 8002fe8:	0800353f 	.word	0x0800353f
 8002fec:	40012000 	.word	0x40012000

08002ff0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1c>
 8003044:	2302      	movs	r3, #2
 8003046:	e105      	b.n	8003254 <HAL_ADC_ConfigChannel+0x228>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b09      	cmp	r3, #9
 8003056:	d925      	bls.n	80030a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68d9      	ldr	r1, [r3, #12]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	3b1e      	subs	r3, #30
 800306e:	2207      	movs	r2, #7
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43da      	mvns	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	400a      	ands	r2, r1
 800307c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	4618      	mov	r0, r3
 8003090:	4603      	mov	r3, r0
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4403      	add	r3, r0
 8003096:	3b1e      	subs	r3, #30
 8003098:	409a      	lsls	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e022      	b.n	80030ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	2207      	movs	r2, #7
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6919      	ldr	r1, [r3, #16]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4403      	add	r3, r0
 80030e0:	409a      	lsls	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d824      	bhi.n	800313c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	3b05      	subs	r3, #5
 8003104:	221f      	movs	r2, #31
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	400a      	ands	r2, r1
 8003112:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	3b05      	subs	r3, #5
 800312e:	fa00 f203 	lsl.w	r2, r0, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	635a      	str	r2, [r3, #52]	; 0x34
 800313a:	e04c      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d824      	bhi.n	800318e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	3b23      	subs	r3, #35	; 0x23
 8003156:	221f      	movs	r2, #31
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43da      	mvns	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	400a      	ands	r2, r1
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	3b23      	subs	r3, #35	; 0x23
 8003180:	fa00 f203 	lsl.w	r2, r0, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
 800318c:	e023      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	3b41      	subs	r3, #65	; 0x41
 80031a0:	221f      	movs	r2, #31
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	400a      	ands	r2, r1
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	3b41      	subs	r3, #65	; 0x41
 80031ca:	fa00 f203 	lsl.w	r2, r0, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_ADC_ConfigChannel+0x234>)
 80031d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <HAL_ADC_ConfigChannel+0x238>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d109      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x1cc>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_ADC_ConfigChannel+0x238>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d123      	bne.n	800324a <HAL_ADC_ConfigChannel+0x21e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b10      	cmp	r3, #16
 8003208:	d003      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x1e6>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b11      	cmp	r3, #17
 8003210:	d11b      	bne.n	800324a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d111      	bne.n	800324a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_ADC_ConfigChannel+0x23c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <HAL_ADC_ConfigChannel+0x240>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	0c9a      	lsrs	r2, r3, #18
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800323c:	e002      	b.n	8003244 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3b01      	subs	r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f9      	bne.n	800323e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40012300 	.word	0x40012300
 8003264:	40012000 	.word	0x40012000
 8003268:	20000038 	.word	0x20000038
 800326c:	431bde83 	.word	0x431bde83

08003270 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003278:	4b79      	ldr	r3, [pc, #484]	; (8003460 <ADC_Init+0x1f0>)
 800327a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	431a      	orrs	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	021a      	lsls	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	4a58      	ldr	r2, [pc, #352]	; (8003464 <ADC_Init+0x1f4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	e00f      	b.n	800336e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800335c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800336c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0202 	bic.w	r2, r2, #2
 800337c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7e1b      	ldrb	r3, [r3, #24]
 8003388:	005a      	lsls	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	3b01      	subs	r3, #1
 80033c8:	035a      	lsls	r2, r3, #13
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e007      	b.n	80033e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	3b01      	subs	r3, #1
 8003400:	051a      	lsls	r2, r3, #20
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003426:	025a      	lsls	r2, r3, #9
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	029a      	lsls	r2, r3, #10
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40012300 	.word	0x40012300
 8003464:	0f000001 	.word	0x0f000001

08003468 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d13c      	bne.n	80034fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d12b      	bne.n	80034f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d127      	bne.n	80034f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d119      	bne.n	80034f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0220 	bic.w	r2, r2, #32
 80034ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7fe fecb 	bl	8002290 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fa:	e00e      	b.n	800351a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff fd85 	bl	8003018 <HAL_ADC_ErrorCallback>
}
 800350e:	e004      	b.n	800351a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fd5d 	bl	8002ff0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff fd5a 	bl	8003018 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff4c 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003702:	f7ff ff61 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 8003706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	6978      	ldr	r0, [r7, #20]
 800370e:	f7ff ffb1 	bl	8003674 <NVIC_EncodePriority>
 8003712:	4602      	mov	r2, r0
 8003714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff80 	bl	8003620 <__NVIC_SetPriority>
}
 8003720:	bf00      	nop
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff54 	bl	80035e4 <__NVIC_EnableIRQ>
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7ff f9c8 	bl	8002ae4 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e099      	b.n	8003894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003780:	e00f      	b.n	80037a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003782:	f7ff f9af 	bl	8002ae4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b05      	cmp	r3, #5
 800378e:	d908      	bls.n	80037a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e078      	b.n	8003894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e8      	bne.n	8003782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4b38      	ldr	r3, [pc, #224]	; (800389c <HAL_DMA_Init+0x158>)
 80037bc:	4013      	ands	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	4313      	orrs	r3, r2
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b04      	cmp	r3, #4
 8003834:	d117      	bne.n	8003866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa91 	bl	8003d70 <DMA_CheckFifoParam>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003862:	2301      	movs	r3, #1
 8003864:	e016      	b.n	8003894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa48 	bl	8003d04 <DMA_CalcBaseAndBitshift>
 8003874:	4603      	mov	r3, r0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	f010803f 	.word	0xf010803f

080038a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Start_IT+0x26>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e040      	b.n	8003948 <HAL_DMA_Start_IT+0xa8>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d12f      	bne.n	800393a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f9da 	bl	8003ca8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	223f      	movs	r2, #63	; 0x3f
 80038fa:	409a      	lsls	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0216 	orr.w	r2, r2, #22
 800390e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0208 	orr.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003942:	2302      	movs	r3, #2
 8003944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d004      	beq.n	800396e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00c      	b.n	8003988 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2205      	movs	r2, #5
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039a0:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_DMA_IRQHandler+0x258>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a92      	ldr	r2, [pc, #584]	; (8003bf0 <HAL_DMA_IRQHandler+0x25c>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	2208      	movs	r2, #8
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01a      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0204 	bic.w	r2, r2, #4
 80039e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	2208      	movs	r2, #8
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d012      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2201      	movs	r2, #1
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2204      	movs	r2, #4
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2210      	movs	r2, #16
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d043      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2210      	movs	r2, #16
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d024      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e01f      	b.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01b      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
 8003ad4:	e016      	b.n	8003b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0208 	bic.w	r2, r2, #8
 8003af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	2220      	movs	r2, #32
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 808e 	beq.w	8003c32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8086 	beq.w	8003c32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d136      	bne.n	8003bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0216 	bic.w	r2, r2, #22
 8003b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x1da>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0208 	bic.w	r2, r2, #8
 8003b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	223f      	movs	r2, #63	; 0x3f
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d07d      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
        }
        return;
 8003baa:	e078      	b.n	8003c9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01c      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d030      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	e02b      	b.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d027      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
 8003bea:	e022      	b.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
 8003bec:	20000038 	.word	0x20000038
 8003bf0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0210 	bic.w	r2, r2, #16
 8003c10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d032      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2205      	movs	r2, #5
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d307      	bcc.n	8003c7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f2      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x2ca>
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
 8003c9c:	e000      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c9e:	bf00      	nop
    }
  }
}
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop

08003ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d108      	bne.n	8003ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ce6:	e007      	b.n	8003cf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3b10      	subs	r3, #16
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <DMA_CalcBaseAndBitshift+0x64>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <DMA_CalcBaseAndBitshift+0x68>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d909      	bls.n	8003d46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	1d1a      	adds	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	659a      	str	r2, [r3, #88]	; 0x58
 8003d44:	e007      	b.n	8003d56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	aaaaaaab 	.word	0xaaaaaaab
 8003d6c:	0800978c 	.word	0x0800978c

08003d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11f      	bne.n	8003dca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d855      	bhi.n	8003e3c <DMA_CheckFifoParam+0xcc>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <DMA_CheckFifoParam+0x28>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003dbb 	.word	0x08003dbb
 8003da0:	08003da9 	.word	0x08003da9
 8003da4:	08003e3d 	.word	0x08003e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d045      	beq.n	8003e40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db8:	e042      	b.n	8003e40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc2:	d13f      	bne.n	8003e44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc8:	e03c      	b.n	8003e44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	d121      	bne.n	8003e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d836      	bhi.n	8003e48 <DMA_CheckFifoParam+0xd8>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <DMA_CheckFifoParam+0x70>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003df7 	.word	0x08003df7
 8003de8:	08003df1 	.word	0x08003df1
 8003dec:	08003e09 	.word	0x08003e09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	e02f      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d024      	beq.n	8003e4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e06:	e021      	b.n	8003e4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e10:	d11e      	bne.n	8003e50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e16:	e01b      	b.n	8003e50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <DMA_CheckFifoParam+0xb4>
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d003      	beq.n	8003e2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e22:	e018      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e015      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3a:	e00b      	b.n	8003e54 <DMA_CheckFifoParam+0xe4>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e00a      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e40:	bf00      	nop
 8003e42:	e008      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e44:	bf00      	nop
 8003e46:	e006      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;   
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e54:	bf00      	nop
    }
  } 
  
  return status; 
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e159      	b.n	8004134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e80:	2201      	movs	r2, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	f040 8148 	bne.w	800412e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d00b      	beq.n	8003ebe <HAL_GPIO_Init+0x5a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb2:	2b11      	cmp	r3, #17
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b12      	cmp	r3, #18
 8003ebc:	d130      	bne.n	8003f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 0201 	and.w	r2, r3, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0xfc>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b12      	cmp	r3, #18
 8003f5e:	d123      	bne.n	8003fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3208      	adds	r2, #8
 8003f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	220f      	movs	r2, #15
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a2 	beq.w	800412e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b56      	ldr	r3, [pc, #344]	; (8004148 <HAL_GPIO_Init+0x2e4>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a55      	ldr	r2, [pc, #340]	; (8004148 <HAL_GPIO_Init+0x2e4>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffa:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_GPIO_Init+0x2e4>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004006:	4a51      	ldr	r2, [pc, #324]	; (800414c <HAL_GPIO_Init+0x2e8>)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	220f      	movs	r2, #15
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a48      	ldr	r2, [pc, #288]	; (8004150 <HAL_GPIO_Init+0x2ec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d019      	beq.n	8004066 <HAL_GPIO_Init+0x202>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_GPIO_Init+0x2f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_GPIO_Init+0x1fe>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a46      	ldr	r2, [pc, #280]	; (8004158 <HAL_GPIO_Init+0x2f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00d      	beq.n	800405e <HAL_GPIO_Init+0x1fa>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a45      	ldr	r2, [pc, #276]	; (800415c <HAL_GPIO_Init+0x2f8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <HAL_GPIO_Init+0x1f6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a44      	ldr	r2, [pc, #272]	; (8004160 <HAL_GPIO_Init+0x2fc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_GPIO_Init+0x1f2>
 8004052:	2304      	movs	r3, #4
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x204>
 8004056:	2307      	movs	r3, #7
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x204>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x204>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x204>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x204>
 8004066:	2300      	movs	r3, #0
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f002 0203 	and.w	r2, r2, #3
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004078:	4934      	ldr	r1, [pc, #208]	; (800414c <HAL_GPIO_Init+0x2e8>)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004086:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_GPIO_Init+0x300>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040aa:	4a2e      	ldr	r2, [pc, #184]	; (8004164 <HAL_GPIO_Init+0x300>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <HAL_GPIO_Init+0x300>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_GPIO_Init+0x300>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_GPIO_Init+0x300>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_GPIO_Init+0x300>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_GPIO_Init+0x300>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004128:	4a0e      	ldr	r2, [pc, #56]	; (8004164 <HAL_GPIO_Init+0x300>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	f67f aea2 	bls.w	8003e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3724      	adds	r7, #36	; 0x24
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40023800 	.word	0x40023800
 800414c:	40013800 	.word	0x40013800
 8004150:	40020000 	.word	0x40020000
 8004154:	40020400 	.word	0x40020400
 8004158:	40020800 	.word	0x40020800
 800415c:	40020c00 	.word	0x40020c00
 8004160:	40021000 	.word	0x40021000
 8004164:	40013c00 	.word	0x40013c00

08004168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
 8004184:	e001      	b.n	800418a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041b4:	e003      	b.n	80041be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	041a      	lsls	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	619a      	str	r2, [r3, #24]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	401a      	ands	r2, r3
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d104      	bne.n	80041ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041e4:	887b      	ldrh	r3, [r7, #2]
 80041e6:	041a      	lsls	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	619a      	str	r2, [r3, #24]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e25b      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d075      	beq.n	800430a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421e:	4ba3      	ldr	r3, [pc, #652]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b04      	cmp	r3, #4
 8004228:	d00c      	beq.n	8004244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422a:	4ba0      	ldr	r3, [pc, #640]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004232:	2b08      	cmp	r3, #8
 8004234:	d112      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b9d      	ldr	r3, [pc, #628]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004242:	d10b      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05b      	beq.n	8004308 <HAL_RCC_OscConfig+0x108>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d157      	bne.n	8004308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e236      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d106      	bne.n	8004274 <HAL_RCC_OscConfig+0x74>
 8004266:	4b91      	ldr	r3, [pc, #580]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a90      	ldr	r2, [pc, #576]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e01d      	b.n	80042b0 <HAL_RCC_OscConfig+0xb0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x98>
 800427e:	4b8b      	ldr	r3, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a8a      	ldr	r2, [pc, #552]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a87      	ldr	r2, [pc, #540]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0xb0>
 8004298:	4b84      	ldr	r3, [pc, #528]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a83      	ldr	r2, [pc, #524]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b81      	ldr	r3, [pc, #516]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a80      	ldr	r2, [pc, #512]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fe fc14 	bl	8002ae4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fe fc10 	bl	8002ae4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1fb      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b76      	ldr	r3, [pc, #472]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0xc0>
 80042de:	e014      	b.n	800430a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe fc00 	bl	8002ae4 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fe fbfc 	bl	8002ae4 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1e7      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fa:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0xe8>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d063      	beq.n	80043de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004322:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432a:	2b08      	cmp	r3, #8
 800432c:	d11c      	bne.n	8004368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b5f      	ldr	r3, [pc, #380]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	4b5c      	ldr	r3, [pc, #368]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_RCC_OscConfig+0x152>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e1bb      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b56      	ldr	r3, [pc, #344]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4952      	ldr	r1, [pc, #328]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	e03a      	b.n	80043de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCC_OscConfig+0x2b0>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fe fbb5 	bl	8002ae4 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437e:	f7fe fbb1 	bl	8002ae4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e19c      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004390:	4b46      	ldr	r3, [pc, #280]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4940      	ldr	r1, [pc, #256]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
 80043b0:	e015      	b.n	80043de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_RCC_OscConfig+0x2b0>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe fb94 	bl	8002ae4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fe fb90 	bl	8002ae4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e17b      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d030      	beq.n	800444c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCC_OscConfig+0x2b4>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fe fb74 	bl	8002ae4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004400:	f7fe fb70 	bl	8002ae4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e15b      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004412:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x200>
 800441e:	e015      	b.n	800444c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004420:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCC_OscConfig+0x2b4>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004426:	f7fe fb5d 	bl	8002ae4 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442e:	f7fe fb59 	bl	8002ae4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e144      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80a0 	beq.w	800459a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445a:	2300      	movs	r3, #0
 800445c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	4a0e      	ldr	r2, [pc, #56]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004478:	6413      	str	r3, [r2, #64]	; 0x40
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <HAL_RCC_OscConfig+0x2ac>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_OscConfig+0x2b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d121      	bne.n	80044da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCC_OscConfig+0x2b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_RCC_OscConfig+0x2b8>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a2:	f7fe fb1f 	bl	8002ae4 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	e011      	b.n	80044ce <HAL_RCC_OscConfig+0x2ce>
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	42470000 	.word	0x42470000
 80044b4:	42470e80 	.word	0x42470e80
 80044b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044bc:	f7fe fb12 	bl	8002ae4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0fd      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b81      	ldr	r3, [pc, #516]	; (80046d4 <HAL_RCC_OscConfig+0x4d4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d106      	bne.n	80044f0 <HAL_RCC_OscConfig+0x2f0>
 80044e2:	4b7d      	ldr	r3, [pc, #500]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a7c      	ldr	r2, [pc, #496]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	e01c      	b.n	800452a <HAL_RCC_OscConfig+0x32a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	d10c      	bne.n	8004512 <HAL_RCC_OscConfig+0x312>
 80044f8:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a76      	ldr	r2, [pc, #472]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	4b74      	ldr	r3, [pc, #464]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4a73      	ldr	r2, [pc, #460]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6713      	str	r3, [r2, #112]	; 0x70
 8004510:	e00b      	b.n	800452a <HAL_RCC_OscConfig+0x32a>
 8004512:	4b71      	ldr	r3, [pc, #452]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a70      	ldr	r2, [pc, #448]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	4b6e      	ldr	r3, [pc, #440]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a6d      	ldr	r2, [pc, #436]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d015      	beq.n	800455e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004532:	f7fe fad7 	bl	8002ae4 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fe fad3 	bl	8002ae4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0bc      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ee      	beq.n	800453a <HAL_RCC_OscConfig+0x33a>
 800455c:	e014      	b.n	8004588 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fe fac1 	bl	8002ae4 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fe fabd 	bl	8002ae4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	; 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0a6      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457c:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ee      	bne.n	8004566 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d105      	bne.n	800459a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4b52      	ldr	r3, [pc, #328]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a51      	ldr	r2, [pc, #324]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8092 	beq.w	80046c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a4:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d05c      	beq.n	800466a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d141      	bne.n	800463c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b8:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_RCC_OscConfig+0x4dc>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fe fa91 	bl	8002ae4 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fe fa8d 	bl	8002ae4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e078      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d8:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	019b      	lsls	r3, r3, #6
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	3b01      	subs	r3, #1
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	4933      	ldr	r1, [pc, #204]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460e:	4b33      	ldr	r3, [pc, #204]	; (80046dc <HAL_RCC_OscConfig+0x4dc>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fe fa66 	bl	8002ae4 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461c:	f7fe fa62 	bl	8002ae4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e04d      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x41c>
 800463a:	e045      	b.n	80046c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCC_OscConfig+0x4dc>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fe fa4f 	bl	8002ae4 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fe fa4b 	bl	8002ae4 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e036      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x44a>
 8004668:	e02e      	b.n	80046c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e029      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_RCC_OscConfig+0x4d8>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	429a      	cmp	r2, r3
 8004688:	d11c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d115      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800469e:	4013      	ands	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10d      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d106      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40007000 	.word	0x40007000
 80046d8:	40023800 	.word	0x40023800
 80046dc:	42470060 	.word	0x42470060

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0cc      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f4:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d90c      	bls.n	800471c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0b8      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a58      	ldr	r2, [pc, #352]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a52      	ldr	r2, [pc, #328]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004758:	4b50      	ldr	r3, [pc, #320]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	494d      	ldr	r1, [pc, #308]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d044      	beq.n	8004800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d119      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d003      	beq.n	800479e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	4b3f      	ldr	r3, [pc, #252]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e06f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	4b3b      	ldr	r3, [pc, #236]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e067      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4934      	ldr	r1, [pc, #208]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d0:	f7fe f988 	bl	8002ae4 <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f7fe f984 	bl	8002ae4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	4b2b      	ldr	r3, [pc, #172]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 020c 	and.w	r2, r3, #12
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d1eb      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d20c      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e032      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4916      	ldr	r1, [pc, #88]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	490e      	ldr	r1, [pc, #56]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004866:	f000 f821 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 800486a:	4601      	mov	r1, r0
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
 800487a:	fa21 f303 	lsr.w	r3, r1, r3
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fdee 	bl	8002468 <HAL_InitTick>

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00
 800489c:	40023800 	.word	0x40023800
 80048a0:	08009774 	.word	0x08009774
 80048a4:	20000038 	.word	0x20000038
 80048a8:	2000003c 	.word	0x2000003c

080048ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	2300      	movs	r3, #0
 80048bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d007      	beq.n	80048de <HAL_RCC_GetSysClockFreq+0x32>
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d008      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x38>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f040 80b4 	bne.w	8004a40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b5e      	ldr	r3, [pc, #376]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048da:	60bb      	str	r3, [r7, #8]
       break;
 80048dc:	e0b3      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048de:	4b5e      	ldr	r3, [pc, #376]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048e0:	60bb      	str	r3, [r7, #8]
      break;
 80048e2:	e0b0      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e4:	4b5a      	ldr	r3, [pc, #360]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ee:	4b58      	ldr	r3, [pc, #352]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d04a      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	f04f 0400 	mov.w	r4, #0
 8004904:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	ea03 0501 	and.w	r5, r3, r1
 8004910:	ea04 0602 	and.w	r6, r4, r2
 8004914:	4629      	mov	r1, r5
 8004916:	4632      	mov	r2, r6
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	f04f 0400 	mov.w	r4, #0
 8004920:	0154      	lsls	r4, r2, #5
 8004922:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004926:	014b      	lsls	r3, r1, #5
 8004928:	4619      	mov	r1, r3
 800492a:	4622      	mov	r2, r4
 800492c:	1b49      	subs	r1, r1, r5
 800492e:	eb62 0206 	sbc.w	r2, r2, r6
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	0194      	lsls	r4, r2, #6
 800493c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004940:	018b      	lsls	r3, r1, #6
 8004942:	1a5b      	subs	r3, r3, r1
 8004944:	eb64 0402 	sbc.w	r4, r4, r2
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	00e2      	lsls	r2, r4, #3
 8004952:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004956:	00d9      	lsls	r1, r3, #3
 8004958:	460b      	mov	r3, r1
 800495a:	4614      	mov	r4, r2
 800495c:	195b      	adds	r3, r3, r5
 800495e:	eb44 0406 	adc.w	r4, r4, r6
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	0262      	lsls	r2, r4, #9
 800496c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004970:	0259      	lsls	r1, r3, #9
 8004972:	460b      	mov	r3, r1
 8004974:	4614      	mov	r4, r2
 8004976:	4618      	mov	r0, r3
 8004978:	4621      	mov	r1, r4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f04f 0400 	mov.w	r4, #0
 8004980:	461a      	mov	r2, r3
 8004982:	4623      	mov	r3, r4
 8004984:	f7fc f91a 	bl	8000bbc <__aeabi_uldivmod>
 8004988:	4603      	mov	r3, r0
 800498a:	460c      	mov	r4, r1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e049      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	f04f 0400 	mov.w	r4, #0
 800499a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	ea03 0501 	and.w	r5, r3, r1
 80049a6:	ea04 0602 	and.w	r6, r4, r2
 80049aa:	4629      	mov	r1, r5
 80049ac:	4632      	mov	r2, r6
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	f04f 0400 	mov.w	r4, #0
 80049b6:	0154      	lsls	r4, r2, #5
 80049b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049bc:	014b      	lsls	r3, r1, #5
 80049be:	4619      	mov	r1, r3
 80049c0:	4622      	mov	r2, r4
 80049c2:	1b49      	subs	r1, r1, r5
 80049c4:	eb62 0206 	sbc.w	r2, r2, r6
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	0194      	lsls	r4, r2, #6
 80049d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049d6:	018b      	lsls	r3, r1, #6
 80049d8:	1a5b      	subs	r3, r3, r1
 80049da:	eb64 0402 	sbc.w	r4, r4, r2
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	00e2      	lsls	r2, r4, #3
 80049e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049ec:	00d9      	lsls	r1, r3, #3
 80049ee:	460b      	mov	r3, r1
 80049f0:	4614      	mov	r4, r2
 80049f2:	195b      	adds	r3, r3, r5
 80049f4:	eb44 0406 	adc.w	r4, r4, r6
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	02a2      	lsls	r2, r4, #10
 8004a02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a06:	0299      	lsls	r1, r3, #10
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	4621      	mov	r1, r4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f04f 0400 	mov.w	r4, #0
 8004a16:	461a      	mov	r2, r3
 8004a18:	4623      	mov	r3, r4
 8004a1a:	f7fc f8cf 	bl	8000bbc <__aeabi_uldivmod>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	460c      	mov	r4, r1
 8004a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	60bb      	str	r3, [r7, #8]
      break;
 8004a3e:	e002      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a42:	60bb      	str	r3, [r7, #8]
      break;
 8004a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a46:	68bb      	ldr	r3, [r7, #8]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	007a1200 	.word	0x007a1200

08004a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000038 	.word	0x20000038

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a78:	f7ff fff0 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004a7c:	4601      	mov	r1, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0a9b      	lsrs	r3, r3, #10
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4a03      	ldr	r2, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8a:	5cd3      	ldrb	r3, [r2, r3]
 8004a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08009784 	.word	0x08009784

08004a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa0:	f7ff ffdc 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004aa4:	4601      	mov	r1, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0b5b      	lsrs	r3, r3, #13
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab2:	5cd3      	ldrb	r3, [r2, r3]
 8004ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	08009784 	.word	0x08009784

08004ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	220f      	movs	r2, #15
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	08db      	lsrs	r3, r3, #3
 8004afe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_RCC_GetClockConfig+0x60>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 020f 	and.w	r2, r3, #15
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40023c00 	.word	0x40023c00

08004b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e01d      	b.n	8004b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fd fe78 	bl	8002844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f000 fb66 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e01d      	b.n	8004c5c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f815 	bl	8004c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 faf3 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2201      	movs	r2, #1
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fd7a 	bl	8005784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <HAL_TIM_PWM_Start+0x60>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d107      	bne.n	8004caa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d007      	beq.n	8004ccc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000

08004cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d122      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d11b      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0202 	mvn.w	r2, #2
 8004d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa6b 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa5d 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fa6e 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d122      	bne.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d11b      	bne.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0204 	mvn.w	r2, #4
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa41 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa33 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa44 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d122      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d11b      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0208 	mvn.w	r2, #8
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa17 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa09 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa1a 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0210 	mvn.w	r2, #16
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f9ed 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9df 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f9f0 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0201 	mvn.w	r2, #1
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd fa28 	bl	80022b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fd6c 	bl	8005964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9b5 	bl	8005222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0220 	mvn.w	r2, #32
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fd36 	bl	8005950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0b4      	b.n	8005070 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	f200 809f 	bhi.w	800505c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f59 	.word	0x08004f59
 8004f28:	0800505d 	.word	0x0800505d
 8004f2c:	0800505d 	.word	0x0800505d
 8004f30:	0800505d 	.word	0x0800505d
 8004f34:	08004f99 	.word	0x08004f99
 8004f38:	0800505d 	.word	0x0800505d
 8004f3c:	0800505d 	.word	0x0800505d
 8004f40:	0800505d 	.word	0x0800505d
 8004f44:	08004fdb 	.word	0x08004fdb
 8004f48:	0800505d 	.word	0x0800505d
 8004f4c:	0800505d 	.word	0x0800505d
 8004f50:	0800505d 	.word	0x0800505d
 8004f54:	0800501b 	.word	0x0800501b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f9ea 	bl	8005338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	619a      	str	r2, [r3, #24]
      break;
 8004f96:	e062      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fa30 	bl	8005404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6999      	ldr	r1, [r3, #24]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	619a      	str	r2, [r3, #24]
      break;
 8004fd8:	e041      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fa7b 	bl	80054dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0208 	orr.w	r2, r2, #8
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0204 	bic.w	r2, r2, #4
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	61da      	str	r2, [r3, #28]
      break;
 8005018:	e021      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fac5 	bl	80055b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69d9      	ldr	r1, [r3, #28]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	021a      	lsls	r2, r3, #8
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	61da      	str	r2, [r3, #28]
      break;
 800505a:	e000      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800505c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_TIM_ConfigClockSource+0x18>
 800508c:	2302      	movs	r3, #2
 800508e:	e0a6      	b.n	80051de <HAL_TIM_ConfigClockSource+0x166>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d067      	beq.n	8005198 <HAL_TIM_ConfigClockSource+0x120>
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d80b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x6c>
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d073      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0x140>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d802      	bhi.n	80050da <HAL_TIM_ConfigClockSource+0x62>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d06f      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050d8:	e078      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d06c      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0x140>
 80050de:	2b30      	cmp	r3, #48	; 0x30
 80050e0:	d06a      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050e2:	e073      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d00d      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0x8c>
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d804      	bhi.n	80050f6 <HAL_TIM_ConfigClockSource+0x7e>
 80050ec:	2b50      	cmp	r3, #80	; 0x50
 80050ee:	d033      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0xe0>
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d041      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050f4:	e06a      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fa:	d066      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x152>
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d017      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005102:	e063      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f000 fb16 	bl	8005744 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	609a      	str	r2, [r3, #8]
      break;
 8005130:	e04c      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f000 faff 	bl	8005744 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005154:	609a      	str	r2, [r3, #8]
      break;
 8005156:	e039      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	461a      	mov	r2, r3
 8005166:	f000 fa73 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2150      	movs	r1, #80	; 0x50
 8005170:	4618      	mov	r0, r3
 8005172:	f000 facc 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 8005176:	e029      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	461a      	mov	r2, r3
 8005186:	f000 fa92 	bl	80056ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2160      	movs	r1, #96	; 0x60
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fabc 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 8005196:	e019      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	461a      	mov	r2, r3
 80051a6:	f000 fa53 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2140      	movs	r1, #64	; 0x40
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 faac 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 80051b6:	e009      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f000 faa3 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 80051c8:	e000      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a34      	ldr	r2, [pc, #208]	; (800531c <TIM_Base_SetConfig+0xe4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005256:	d00b      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a31      	ldr	r2, [pc, #196]	; (8005320 <TIM_Base_SetConfig+0xe8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a30      	ldr	r2, [pc, #192]	; (8005324 <TIM_Base_SetConfig+0xec>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a2f      	ldr	r2, [pc, #188]	; (8005328 <TIM_Base_SetConfig+0xf0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a25      	ldr	r2, [pc, #148]	; (800531c <TIM_Base_SetConfig+0xe4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01b      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d017      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a22      	ldr	r2, [pc, #136]	; (8005320 <TIM_Base_SetConfig+0xe8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a21      	ldr	r2, [pc, #132]	; (8005324 <TIM_Base_SetConfig+0xec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a20      	ldr	r2, [pc, #128]	; (8005328 <TIM_Base_SetConfig+0xf0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <TIM_Base_SetConfig+0xf4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <TIM_Base_SetConfig+0xf8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <TIM_Base_SetConfig+0xfc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <TIM_Base_SetConfig+0xe4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d103      	bne.n	8005308 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	615a      	str	r2, [r3, #20]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0201 	bic.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_OC1_SetConfig+0xc8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10c      	bne.n	80053ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0308 	bic.w	r3, r3, #8
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <TIM_OC1_SetConfig+0xc8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d111      	bne.n	80053da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40010000 	.word	0x40010000

08005404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0210 	bic.w	r2, r3, #16
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0320 	bic.w	r3, r3, #32
 800544e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <TIM_OC2_SetConfig+0xd4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <TIM_OC2_SetConfig+0xd4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d113      	bne.n	80054b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000

080054dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <TIM_OC3_SetConfig+0xd0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10d      	bne.n	8005556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a14      	ldr	r2, [pc, #80]	; (80055ac <TIM_OC3_SetConfig+0xd0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d113      	bne.n	8005586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40010000 	.word	0x40010000

080055b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	031b      	lsls	r3, r3, #12
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <TIM_OC4_SetConfig+0x9c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000

08005650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 030a 	bic.w	r3, r3, #10
 800568c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b087      	sub	sp, #28
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0210 	bic.w	r2, r3, #16
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	031b      	lsls	r3, r3, #12
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	f043 0307 	orr.w	r3, r3, #7
 8005730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2201      	movs	r2, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	431a      	orrs	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e050      	b.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d018      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d013      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d10c      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4313      	orrs	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40014000 	.word	0x40014000

080058ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e03d      	b.n	8005944 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e03f      	b.n	8005a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fc fff0 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2224      	movs	r2, #36	; 0x24
 80059a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 faf9 	bl	8005fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d130      	bne.n	8005a8e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_UART_Transmit_IT+0x26>
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e029      	b.n	8005a90 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_UART_Transmit_IT+0x38>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e022      	b.n	8005a90 <HAL_UART_Transmit_IT+0x7e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d140      	bne.n	8005b38 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_UART_Receive_IT+0x26>
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e039      	b.n	8005b3a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_UART_Receive_IT+0x38>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e032      	b.n	8005b3a <HAL_UART_Receive_IT+0x9e>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	88fa      	ldrh	r2, [r7, #6]
 8005ae6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2222      	movs	r2, #34	; 0x22
 8005af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b12:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0220 	orr.w	r2, r2, #32
 8005b32:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_UART_IRQHandler+0x52>
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f98c 	bl	8005eb0 <UART_Receive_IT>
      return;
 8005b98:	e0d1      	b.n	8005d3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80b0 	beq.w	8005d02 <HAL_UART_IRQHandler+0x1ba>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x70>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80a5 	beq.w	8005d02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x90>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	f043 0201 	orr.w	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xb0>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	f043 0202 	orr.w	r2, r3, #2
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_UART_IRQHandler+0xd0>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	f043 0204 	orr.w	r2, r3, #4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00f      	beq.n	8005c42 <HAL_UART_IRQHandler+0xfa>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_UART_IRQHandler+0xee>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f043 0208 	orr.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d078      	beq.n	8005d3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_UART_IRQHandler+0x11c>
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f926 	bl	8005eb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b40      	cmp	r3, #64	; 0x40
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_UART_IRQHandler+0x144>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d031      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f86f 	bl	8005d70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d123      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d013      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_UART_IRQHandler+0x1fc>)
 8005cbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fd fe43 	bl	8003950 <HAL_DMA_Abort_IT>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d016      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cde:	e00e      	b.n	8005cfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f83b 	bl	8005d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce6:	e00a      	b.n	8005cfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f837 	bl	8005d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cee:	e006      	b.n	8005cfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f833 	bl	8005d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005cfc:	e01e      	b.n	8005d3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	bf00      	nop
    return;
 8005d00:	e01c      	b.n	8005d3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1d6>
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f85c 	bl	8005dd4 <UART_Transmit_IT>
    return;
 8005d1c:	e00f      	b.n	8005d3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1f6>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8a4 	bl	8005e80 <UART_EndTransmit_IT>
    return;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d3c:	bf00      	nop
  }
}
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	08005dad 	.word	0x08005dad

08005d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d86:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff ffc8 	bl	8005d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b21      	cmp	r3, #33	; 0x21
 8005de6:	d144      	bne.n	8005e72 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df0:	d11a      	bne.n	8005e28 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e06:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	1c9a      	adds	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]
 8005e1a:	e00e      	b.n	8005e3a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]
 8005e26:	e008      	b.n	8005e3a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6211      	str	r1, [r2, #32]
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4619      	mov	r1, r3
 8005e48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff51 	bl	8005d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b22      	cmp	r3, #34	; 0x22
 8005ec2:	d171      	bne.n	8005fa8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ecc:	d123      	bne.n	8005f16 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10e      	bne.n	8005efa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	1c9a      	adds	r2, r3, #2
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ef8:	e029      	b.n	8005f4e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
 8005f14:	e01b      	b.n	8005f4e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6858      	ldr	r0, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6291      	str	r1, [r2, #40]	; 0x28
 8005f2e:	b2c2      	uxtb	r2, r0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e00c      	b.n	8005f4e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	1c58      	adds	r0, r3, #1
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	6288      	str	r0, [r1, #40]	; 0x28
 8005f46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d120      	bne.n	8005fa4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0220 	bic.w	r2, r2, #32
 8005f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0201 	bic.w	r2, r2, #1
 8005f90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fc f958 	bl	8002250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e002      	b.n	8005faa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ff6:	f023 030c 	bic.w	r3, r3, #12
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	68f9      	ldr	r1, [r7, #12]
 8006000:	430b      	orrs	r3, r1
 8006002:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006022:	f040 818b 	bne.w	800633c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4ac1      	ldr	r2, [pc, #772]	; (8006330 <UART_SetConfig+0x37c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d005      	beq.n	800603c <UART_SetConfig+0x88>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4abf      	ldr	r2, [pc, #764]	; (8006334 <UART_SetConfig+0x380>)
 8006036:	4293      	cmp	r3, r2
 8006038:	f040 80bd 	bne.w	80061b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7fe fd2e 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8006040:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	461d      	mov	r5, r3
 8006046:	f04f 0600 	mov.w	r6, #0
 800604a:	46a8      	mov	r8, r5
 800604c:	46b1      	mov	r9, r6
 800604e:	eb18 0308 	adds.w	r3, r8, r8
 8006052:	eb49 0409 	adc.w	r4, r9, r9
 8006056:	4698      	mov	r8, r3
 8006058:	46a1      	mov	r9, r4
 800605a:	eb18 0805 	adds.w	r8, r8, r5
 800605e:	eb49 0906 	adc.w	r9, r9, r6
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800606e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006072:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006076:	4688      	mov	r8, r1
 8006078:	4691      	mov	r9, r2
 800607a:	eb18 0005 	adds.w	r0, r8, r5
 800607e:	eb49 0106 	adc.w	r1, r9, r6
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	461d      	mov	r5, r3
 8006088:	f04f 0600 	mov.w	r6, #0
 800608c:	196b      	adds	r3, r5, r5
 800608e:	eb46 0406 	adc.w	r4, r6, r6
 8006092:	461a      	mov	r2, r3
 8006094:	4623      	mov	r3, r4
 8006096:	f7fa fd91 	bl	8000bbc <__aeabi_uldivmod>
 800609a:	4603      	mov	r3, r0
 800609c:	460c      	mov	r4, r1
 800609e:	461a      	mov	r2, r3
 80060a0:	4ba5      	ldr	r3, [pc, #660]	; (8006338 <UART_SetConfig+0x384>)
 80060a2:	fba3 2302 	umull	r2, r3, r3, r2
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	461d      	mov	r5, r3
 80060b0:	f04f 0600 	mov.w	r6, #0
 80060b4:	46a9      	mov	r9, r5
 80060b6:	46b2      	mov	sl, r6
 80060b8:	eb19 0309 	adds.w	r3, r9, r9
 80060bc:	eb4a 040a 	adc.w	r4, sl, sl
 80060c0:	4699      	mov	r9, r3
 80060c2:	46a2      	mov	sl, r4
 80060c4:	eb19 0905 	adds.w	r9, r9, r5
 80060c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80060cc:	f04f 0100 	mov.w	r1, #0
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060e0:	4689      	mov	r9, r1
 80060e2:	4692      	mov	sl, r2
 80060e4:	eb19 0005 	adds.w	r0, r9, r5
 80060e8:	eb4a 0106 	adc.w	r1, sl, r6
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	461d      	mov	r5, r3
 80060f2:	f04f 0600 	mov.w	r6, #0
 80060f6:	196b      	adds	r3, r5, r5
 80060f8:	eb46 0406 	adc.w	r4, r6, r6
 80060fc:	461a      	mov	r2, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	f7fa fd5c 	bl	8000bbc <__aeabi_uldivmod>
 8006104:	4603      	mov	r3, r0
 8006106:	460c      	mov	r4, r1
 8006108:	461a      	mov	r2, r3
 800610a:	4b8b      	ldr	r3, [pc, #556]	; (8006338 <UART_SetConfig+0x384>)
 800610c:	fba3 1302 	umull	r1, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	2164      	movs	r1, #100	; 0x64
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	3332      	adds	r3, #50	; 0x32
 800611e:	4a86      	ldr	r2, [pc, #536]	; (8006338 <UART_SetConfig+0x384>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800612c:	4498      	add	r8, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	461d      	mov	r5, r3
 8006132:	f04f 0600 	mov.w	r6, #0
 8006136:	46a9      	mov	r9, r5
 8006138:	46b2      	mov	sl, r6
 800613a:	eb19 0309 	adds.w	r3, r9, r9
 800613e:	eb4a 040a 	adc.w	r4, sl, sl
 8006142:	4699      	mov	r9, r3
 8006144:	46a2      	mov	sl, r4
 8006146:	eb19 0905 	adds.w	r9, r9, r5
 800614a:	eb4a 0a06 	adc.w	sl, sl, r6
 800614e:	f04f 0100 	mov.w	r1, #0
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800615e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006162:	4689      	mov	r9, r1
 8006164:	4692      	mov	sl, r2
 8006166:	eb19 0005 	adds.w	r0, r9, r5
 800616a:	eb4a 0106 	adc.w	r1, sl, r6
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	461d      	mov	r5, r3
 8006174:	f04f 0600 	mov.w	r6, #0
 8006178:	196b      	adds	r3, r5, r5
 800617a:	eb46 0406 	adc.w	r4, r6, r6
 800617e:	461a      	mov	r2, r3
 8006180:	4623      	mov	r3, r4
 8006182:	f7fa fd1b 	bl	8000bbc <__aeabi_uldivmod>
 8006186:	4603      	mov	r3, r0
 8006188:	460c      	mov	r4, r1
 800618a:	461a      	mov	r2, r3
 800618c:	4b6a      	ldr	r3, [pc, #424]	; (8006338 <UART_SetConfig+0x384>)
 800618e:	fba3 1302 	umull	r1, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2164      	movs	r1, #100	; 0x64
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a65      	ldr	r2, [pc, #404]	; (8006338 <UART_SetConfig+0x384>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 0207 	and.w	r2, r3, #7
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4442      	add	r2, r8
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	e26f      	b.n	8006696 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061b6:	f7fe fc5d 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80061ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	461d      	mov	r5, r3
 80061c0:	f04f 0600 	mov.w	r6, #0
 80061c4:	46a8      	mov	r8, r5
 80061c6:	46b1      	mov	r9, r6
 80061c8:	eb18 0308 	adds.w	r3, r8, r8
 80061cc:	eb49 0409 	adc.w	r4, r9, r9
 80061d0:	4698      	mov	r8, r3
 80061d2:	46a1      	mov	r9, r4
 80061d4:	eb18 0805 	adds.w	r8, r8, r5
 80061d8:	eb49 0906 	adc.w	r9, r9, r6
 80061dc:	f04f 0100 	mov.w	r1, #0
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061f0:	4688      	mov	r8, r1
 80061f2:	4691      	mov	r9, r2
 80061f4:	eb18 0005 	adds.w	r0, r8, r5
 80061f8:	eb49 0106 	adc.w	r1, r9, r6
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	461d      	mov	r5, r3
 8006202:	f04f 0600 	mov.w	r6, #0
 8006206:	196b      	adds	r3, r5, r5
 8006208:	eb46 0406 	adc.w	r4, r6, r6
 800620c:	461a      	mov	r2, r3
 800620e:	4623      	mov	r3, r4
 8006210:	f7fa fcd4 	bl	8000bbc <__aeabi_uldivmod>
 8006214:	4603      	mov	r3, r0
 8006216:	460c      	mov	r4, r1
 8006218:	461a      	mov	r2, r3
 800621a:	4b47      	ldr	r3, [pc, #284]	; (8006338 <UART_SetConfig+0x384>)
 800621c:	fba3 2302 	umull	r2, r3, r3, r2
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	461d      	mov	r5, r3
 800622a:	f04f 0600 	mov.w	r6, #0
 800622e:	46a9      	mov	r9, r5
 8006230:	46b2      	mov	sl, r6
 8006232:	eb19 0309 	adds.w	r3, r9, r9
 8006236:	eb4a 040a 	adc.w	r4, sl, sl
 800623a:	4699      	mov	r9, r3
 800623c:	46a2      	mov	sl, r4
 800623e:	eb19 0905 	adds.w	r9, r9, r5
 8006242:	eb4a 0a06 	adc.w	sl, sl, r6
 8006246:	f04f 0100 	mov.w	r1, #0
 800624a:	f04f 0200 	mov.w	r2, #0
 800624e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800625a:	4689      	mov	r9, r1
 800625c:	4692      	mov	sl, r2
 800625e:	eb19 0005 	adds.w	r0, r9, r5
 8006262:	eb4a 0106 	adc.w	r1, sl, r6
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	461d      	mov	r5, r3
 800626c:	f04f 0600 	mov.w	r6, #0
 8006270:	196b      	adds	r3, r5, r5
 8006272:	eb46 0406 	adc.w	r4, r6, r6
 8006276:	461a      	mov	r2, r3
 8006278:	4623      	mov	r3, r4
 800627a:	f7fa fc9f 	bl	8000bbc <__aeabi_uldivmod>
 800627e:	4603      	mov	r3, r0
 8006280:	460c      	mov	r4, r1
 8006282:	461a      	mov	r2, r3
 8006284:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <UART_SetConfig+0x384>)
 8006286:	fba3 1302 	umull	r1, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	2164      	movs	r1, #100	; 0x64
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	3332      	adds	r3, #50	; 0x32
 8006298:	4a27      	ldr	r2, [pc, #156]	; (8006338 <UART_SetConfig+0x384>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a6:	4498      	add	r8, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	461d      	mov	r5, r3
 80062ac:	f04f 0600 	mov.w	r6, #0
 80062b0:	46a9      	mov	r9, r5
 80062b2:	46b2      	mov	sl, r6
 80062b4:	eb19 0309 	adds.w	r3, r9, r9
 80062b8:	eb4a 040a 	adc.w	r4, sl, sl
 80062bc:	4699      	mov	r9, r3
 80062be:	46a2      	mov	sl, r4
 80062c0:	eb19 0905 	adds.w	r9, r9, r5
 80062c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062dc:	4689      	mov	r9, r1
 80062de:	4692      	mov	sl, r2
 80062e0:	eb19 0005 	adds.w	r0, r9, r5
 80062e4:	eb4a 0106 	adc.w	r1, sl, r6
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	461d      	mov	r5, r3
 80062ee:	f04f 0600 	mov.w	r6, #0
 80062f2:	196b      	adds	r3, r5, r5
 80062f4:	eb46 0406 	adc.w	r4, r6, r6
 80062f8:	461a      	mov	r2, r3
 80062fa:	4623      	mov	r3, r4
 80062fc:	f7fa fc5e 	bl	8000bbc <__aeabi_uldivmod>
 8006300:	4603      	mov	r3, r0
 8006302:	460c      	mov	r4, r1
 8006304:	461a      	mov	r2, r3
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <UART_SetConfig+0x384>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	; 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	; 0x32
 800631a:	4a07      	ldr	r2, [pc, #28]	; (8006338 <UART_SetConfig+0x384>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4442      	add	r2, r8
 800632c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800632e:	e1b2      	b.n	8006696 <UART_SetConfig+0x6e2>
 8006330:	40011000 	.word	0x40011000
 8006334:	40011400 	.word	0x40011400
 8006338:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4ad7      	ldr	r2, [pc, #860]	; (80066a0 <UART_SetConfig+0x6ec>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d005      	beq.n	8006352 <UART_SetConfig+0x39e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4ad6      	ldr	r2, [pc, #856]	; (80066a4 <UART_SetConfig+0x6f0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	f040 80d1 	bne.w	80064f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006352:	f7fe fba3 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8006356:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	469a      	mov	sl, r3
 800635c:	f04f 0b00 	mov.w	fp, #0
 8006360:	46d0      	mov	r8, sl
 8006362:	46d9      	mov	r9, fp
 8006364:	eb18 0308 	adds.w	r3, r8, r8
 8006368:	eb49 0409 	adc.w	r4, r9, r9
 800636c:	4698      	mov	r8, r3
 800636e:	46a1      	mov	r9, r4
 8006370:	eb18 080a 	adds.w	r8, r8, sl
 8006374:	eb49 090b 	adc.w	r9, r9, fp
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006384:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006388:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800638c:	4688      	mov	r8, r1
 800638e:	4691      	mov	r9, r2
 8006390:	eb1a 0508 	adds.w	r5, sl, r8
 8006394:	eb4b 0609 	adc.w	r6, fp, r9
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4619      	mov	r1, r3
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f04f 0400 	mov.w	r4, #0
 80063aa:	0094      	lsls	r4, r2, #2
 80063ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	461a      	mov	r2, r3
 80063b4:	4623      	mov	r3, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	4631      	mov	r1, r6
 80063ba:	f7fa fbff 	bl	8000bbc <__aeabi_uldivmod>
 80063be:	4603      	mov	r3, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	461a      	mov	r2, r3
 80063c4:	4bb8      	ldr	r3, [pc, #736]	; (80066a8 <UART_SetConfig+0x6f4>)
 80063c6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	469b      	mov	fp, r3
 80063d4:	f04f 0c00 	mov.w	ip, #0
 80063d8:	46d9      	mov	r9, fp
 80063da:	46e2      	mov	sl, ip
 80063dc:	eb19 0309 	adds.w	r3, r9, r9
 80063e0:	eb4a 040a 	adc.w	r4, sl, sl
 80063e4:	4699      	mov	r9, r3
 80063e6:	46a2      	mov	sl, r4
 80063e8:	eb19 090b 	adds.w	r9, r9, fp
 80063ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006404:	4689      	mov	r9, r1
 8006406:	4692      	mov	sl, r2
 8006408:	eb1b 0509 	adds.w	r5, fp, r9
 800640c:	eb4c 060a 	adc.w	r6, ip, sl
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4619      	mov	r1, r3
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	f04f 0400 	mov.w	r4, #0
 8006422:	0094      	lsls	r4, r2, #2
 8006424:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006428:	008b      	lsls	r3, r1, #2
 800642a:	461a      	mov	r2, r3
 800642c:	4623      	mov	r3, r4
 800642e:	4628      	mov	r0, r5
 8006430:	4631      	mov	r1, r6
 8006432:	f7fa fbc3 	bl	8000bbc <__aeabi_uldivmod>
 8006436:	4603      	mov	r3, r0
 8006438:	460c      	mov	r4, r1
 800643a:	461a      	mov	r2, r3
 800643c:	4b9a      	ldr	r3, [pc, #616]	; (80066a8 <UART_SetConfig+0x6f4>)
 800643e:	fba3 1302 	umull	r1, r3, r3, r2
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	2164      	movs	r1, #100	; 0x64
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	3332      	adds	r3, #50	; 0x32
 8006450:	4a95      	ldr	r2, [pc, #596]	; (80066a8 <UART_SetConfig+0x6f4>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800645c:	4498      	add	r8, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	469b      	mov	fp, r3
 8006462:	f04f 0c00 	mov.w	ip, #0
 8006466:	46d9      	mov	r9, fp
 8006468:	46e2      	mov	sl, ip
 800646a:	eb19 0309 	adds.w	r3, r9, r9
 800646e:	eb4a 040a 	adc.w	r4, sl, sl
 8006472:	4699      	mov	r9, r3
 8006474:	46a2      	mov	sl, r4
 8006476:	eb19 090b 	adds.w	r9, r9, fp
 800647a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800647e:	f04f 0100 	mov.w	r1, #0
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800648a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800648e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006492:	4689      	mov	r9, r1
 8006494:	4692      	mov	sl, r2
 8006496:	eb1b 0509 	adds.w	r5, fp, r9
 800649a:	eb4c 060a 	adc.w	r6, ip, sl
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4619      	mov	r1, r3
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	f04f 0400 	mov.w	r4, #0
 80064b0:	0094      	lsls	r4, r2, #2
 80064b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064b6:	008b      	lsls	r3, r1, #2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4623      	mov	r3, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	4631      	mov	r1, r6
 80064c0:	f7fa fb7c 	bl	8000bbc <__aeabi_uldivmod>
 80064c4:	4603      	mov	r3, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b77      	ldr	r3, [pc, #476]	; (80066a8 <UART_SetConfig+0x6f4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	; 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	3332      	adds	r3, #50	; 0x32
 80064de:	4a72      	ldr	r2, [pc, #456]	; (80066a8 <UART_SetConfig+0x6f4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4442      	add	r2, r8
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	e0d0      	b.n	8006696 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe fabe 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80064f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	469a      	mov	sl, r3
 80064fe:	f04f 0b00 	mov.w	fp, #0
 8006502:	46d0      	mov	r8, sl
 8006504:	46d9      	mov	r9, fp
 8006506:	eb18 0308 	adds.w	r3, r8, r8
 800650a:	eb49 0409 	adc.w	r4, r9, r9
 800650e:	4698      	mov	r8, r3
 8006510:	46a1      	mov	r9, r4
 8006512:	eb18 080a 	adds.w	r8, r8, sl
 8006516:	eb49 090b 	adc.w	r9, r9, fp
 800651a:	f04f 0100 	mov.w	r1, #0
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006526:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800652a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800652e:	4688      	mov	r8, r1
 8006530:	4691      	mov	r9, r2
 8006532:	eb1a 0508 	adds.w	r5, sl, r8
 8006536:	eb4b 0609 	adc.w	r6, fp, r9
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4619      	mov	r1, r3
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	f04f 0400 	mov.w	r4, #0
 800654c:	0094      	lsls	r4, r2, #2
 800654e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006552:	008b      	lsls	r3, r1, #2
 8006554:	461a      	mov	r2, r3
 8006556:	4623      	mov	r3, r4
 8006558:	4628      	mov	r0, r5
 800655a:	4631      	mov	r1, r6
 800655c:	f7fa fb2e 	bl	8000bbc <__aeabi_uldivmod>
 8006560:	4603      	mov	r3, r0
 8006562:	460c      	mov	r4, r1
 8006564:	461a      	mov	r2, r3
 8006566:	4b50      	ldr	r3, [pc, #320]	; (80066a8 <UART_SetConfig+0x6f4>)
 8006568:	fba3 2302 	umull	r2, r3, r3, r2
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	469b      	mov	fp, r3
 8006576:	f04f 0c00 	mov.w	ip, #0
 800657a:	46d9      	mov	r9, fp
 800657c:	46e2      	mov	sl, ip
 800657e:	eb19 0309 	adds.w	r3, r9, r9
 8006582:	eb4a 040a 	adc.w	r4, sl, sl
 8006586:	4699      	mov	r9, r3
 8006588:	46a2      	mov	sl, r4
 800658a:	eb19 090b 	adds.w	r9, r9, fp
 800658e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800659e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065a6:	4689      	mov	r9, r1
 80065a8:	4692      	mov	sl, r2
 80065aa:	eb1b 0509 	adds.w	r5, fp, r9
 80065ae:	eb4c 060a 	adc.w	r6, ip, sl
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4619      	mov	r1, r3
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	f04f 0400 	mov.w	r4, #0
 80065c4:	0094      	lsls	r4, r2, #2
 80065c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065ca:	008b      	lsls	r3, r1, #2
 80065cc:	461a      	mov	r2, r3
 80065ce:	4623      	mov	r3, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	4631      	mov	r1, r6
 80065d4:	f7fa faf2 	bl	8000bbc <__aeabi_uldivmod>
 80065d8:	4603      	mov	r3, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	461a      	mov	r2, r3
 80065de:	4b32      	ldr	r3, [pc, #200]	; (80066a8 <UART_SetConfig+0x6f4>)
 80065e0:	fba3 1302 	umull	r1, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	2164      	movs	r1, #100	; 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	3332      	adds	r3, #50	; 0x32
 80065f2:	4a2d      	ldr	r2, [pc, #180]	; (80066a8 <UART_SetConfig+0x6f4>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065fe:	4498      	add	r8, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	469b      	mov	fp, r3
 8006604:	f04f 0c00 	mov.w	ip, #0
 8006608:	46d9      	mov	r9, fp
 800660a:	46e2      	mov	sl, ip
 800660c:	eb19 0309 	adds.w	r3, r9, r9
 8006610:	eb4a 040a 	adc.w	r4, sl, sl
 8006614:	4699      	mov	r9, r3
 8006616:	46a2      	mov	sl, r4
 8006618:	eb19 090b 	adds.w	r9, r9, fp
 800661c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800662c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006634:	4689      	mov	r9, r1
 8006636:	4692      	mov	sl, r2
 8006638:	eb1b 0509 	adds.w	r5, fp, r9
 800663c:	eb4c 060a 	adc.w	r6, ip, sl
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4619      	mov	r1, r3
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	f04f 0400 	mov.w	r4, #0
 8006652:	0094      	lsls	r4, r2, #2
 8006654:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006658:	008b      	lsls	r3, r1, #2
 800665a:	461a      	mov	r2, r3
 800665c:	4623      	mov	r3, r4
 800665e:	4628      	mov	r0, r5
 8006660:	4631      	mov	r1, r6
 8006662:	f7fa faab 	bl	8000bbc <__aeabi_uldivmod>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	461a      	mov	r2, r3
 800666c:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <UART_SetConfig+0x6f4>)
 800666e:	fba3 1302 	umull	r1, r3, r3, r2
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2164      	movs	r1, #100	; 0x64
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	3332      	adds	r3, #50	; 0x32
 8006680:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <UART_SetConfig+0x6f4>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	f003 020f 	and.w	r2, r3, #15
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4442      	add	r2, r8
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	e7ff      	b.n	8006696 <UART_SetConfig+0x6e2>
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	40011000 	.word	0x40011000
 80066a4:	40011400 	.word	0x40011400
 80066a8:	51eb851f 	.word	0x51eb851f

080066ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80066ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066be:	2b84      	cmp	r3, #132	; 0x84
 80066c0:	d005      	beq.n	80066ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80066c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	3303      	adds	r3, #3
 80066cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e2:	f3ef 8305 	mrs	r3, IPSR
 80066e6:	607b      	str	r3, [r7, #4]
  return(result);
 80066e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006704:	f001 f8ba 	bl	800787c <vTaskStartScheduler>
  
  return osOK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	bd80      	pop	{r7, pc}

0800670e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800670e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006710:	b089      	sub	sp, #36	; 0x24
 8006712:	af04      	add	r7, sp, #16
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d020      	beq.n	8006762 <osThreadCreate+0x54>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01c      	beq.n	8006762 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685c      	ldr	r4, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681d      	ldr	r5, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691e      	ldr	r6, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ffb6 	bl	80066ac <makeFreeRtosPriority>
 8006740:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800674a:	9202      	str	r2, [sp, #8]
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	9100      	str	r1, [sp, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	4632      	mov	r2, r6
 8006754:	4629      	mov	r1, r5
 8006756:	4620      	mov	r0, r4
 8006758:	f000 fed5 	bl	8007506 <xTaskCreateStatic>
 800675c:	4603      	mov	r3, r0
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e01c      	b.n	800679c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685c      	ldr	r4, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800676e:	b29e      	uxth	r6, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff ff98 	bl	80066ac <makeFreeRtosPriority>
 800677c:	4602      	mov	r2, r0
 800677e:	f107 030c 	add.w	r3, r7, #12
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	9200      	str	r2, [sp, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	4632      	mov	r2, r6
 800678a:	4629      	mov	r1, r5
 800678c:	4620      	mov	r0, r4
 800678e:	f000 ff13 	bl	80075b8 <xTaskCreate>
 8006792:	4603      	mov	r3, r0
 8006794:	2b01      	cmp	r3, #1
 8006796:	d001      	beq.n	800679c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	e000      	b.n	800679e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800679c:	68fb      	ldr	r3, [r7, #12]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <osDelay+0x16>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	e000      	b.n	80067be <osDelay+0x18>
 80067bc:	2301      	movs	r3, #1
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f828 	bl	8007814 <vTaskDelay>
  
  return osOK;
 80067c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af02      	add	r7, sp, #8
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d10b      	bne.n	80067fe <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	2303      	movs	r3, #3
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4613      	mov	r3, r2
 80067f0:	2200      	movs	r2, #0
 80067f2:	2100      	movs	r1, #0
 80067f4:	2001      	movs	r0, #1
 80067f6:	f000 f987 	bl	8006b08 <xQueueGenericCreateStatic>
 80067fa:	4603      	mov	r3, r0
 80067fc:	e016      	b.n	800682c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	e014      	b.n	800682c <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d110      	bne.n	800682a <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006808:	2203      	movs	r2, #3
 800680a:	2100      	movs	r1, #0
 800680c:	2001      	movs	r0, #1
 800680e:	f000 f9ed 	bl	8006bec <xQueueGenericCreate>
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <osSemaphoreCreate+0x58>
 800681a:	2300      	movs	r3, #0
 800681c:	2200      	movs	r2, #0
 800681e:	2100      	movs	r1, #0
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fa3f 	bl	8006ca4 <xQueueGenericSend>
      return sema;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	e000      	b.n	800682c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800682a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	e03a      	b.n	80068c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d103      	bne.n	8006860 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006858:	f04f 33ff 	mov.w	r3, #4294967295
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e009      	b.n	8006874 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d006      	beq.n	8006874 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <osSemaphoreWait+0x40>
      ticks = 1;
 8006870:	2301      	movs	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006874:	f7ff ff32 	bl	80066dc <inHandlerMode>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d017      	beq.n	80068ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	461a      	mov	r2, r3
 8006884:	2100      	movs	r1, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fc98 	bl	80071bc <xQueueReceiveFromISR>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006892:	23ff      	movs	r3, #255	; 0xff
 8006894:	e015      	b.n	80068c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d011      	beq.n	80068c0 <osSemaphoreWait+0x8c>
 800689c:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <osSemaphoreWait+0x98>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	e008      	b.n	80068c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb7b 	bl	8006fac <xQueueSemaphoreTake>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d001      	beq.n	80068c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80068bc:	23ff      	movs	r3, #255	; 0xff
 80068be:	e000      	b.n	80068c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f103 0208 	add.w	r2, r3, #8
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f04f 32ff 	mov.w	r2, #4294967295
 80068e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f103 0208 	add.w	r2, r3, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f103 0208 	add.w	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d103      	bne.n	8006992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e00c      	b.n	80069ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3308      	adds	r3, #8
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e002      	b.n	80069a0 <vListInsert+0x2e>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d2f6      	bcs.n	800699a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6892      	ldr	r2, [r2, #8]
 80069fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6852      	ldr	r2, [r2, #4]
 8006a04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d103      	bne.n	8006a18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006a60:	f001 fe74 	bl	800874c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	3b01      	subs	r3, #1
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	22ff      	movs	r2, #255	; 0xff
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d114      	bne.n	8006ae0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01a      	beq.n	8006af4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3310      	adds	r3, #16
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 f91c 	bl	8007d00 <xTaskRemoveFromEventList>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d012      	beq.n	8006af4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ace:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <xQueueGenericReset+0xcc>)
 8006ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	e009      	b.n	8006af4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3310      	adds	r3, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fef3 	bl	80068d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3324      	adds	r3, #36	; 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff feee 	bl	80068d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006af4:	f001 fe58 	bl	80087a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006af8:	2301      	movs	r3, #1
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	; 0x38
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d109      	bne.n	8006b30 <xQueueGenericCreateStatic+0x28>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b2e:	e7fe      	b.n	8006b2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <xQueueGenericCreateStatic+0x42>
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <xQueueGenericCreateStatic+0x4e>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <xQueueGenericCreateStatic+0x52>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <xQueueGenericCreateStatic+0x54>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d109      	bne.n	8006b74 <xQueueGenericCreateStatic+0x6c>
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	e7fe      	b.n	8006b72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <xQueueGenericCreateStatic+0x78>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <xQueueGenericCreateStatic+0x7c>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <xQueueGenericCreateStatic+0x7e>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <xQueueGenericCreateStatic+0x96>
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	e7fe      	b.n	8006b9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b9e:	2348      	movs	r3, #72	; 0x48
 8006ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b48      	cmp	r3, #72	; 0x48
 8006ba6:	d009      	beq.n	8006bbc <xQueueGenericCreateStatic+0xb4>
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00d      	beq.n	8006be2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f842 	bl	8006c66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3730      	adds	r7, #48	; 0x30
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <xQueueGenericCreate+0x28>
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	e7fe      	b.n	8006c12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	e004      	b.n	8006c2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	3348      	adds	r3, #72	; 0x48
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fea6 	bl	8008980 <pvPortMalloc>
 8006c34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00f      	beq.n	8006c5c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	3348      	adds	r3, #72	; 0x48
 8006c40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c4a:	79fa      	ldrb	r2, [r7, #7]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	4613      	mov	r3, r2
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f805 	bl	8006c66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
	}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	e002      	b.n	8006c88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c94:	2101      	movs	r1, #1
 8006c96:	69b8      	ldr	r0, [r7, #24]
 8006c98:	f7ff fece 	bl	8006a38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <xQueueGenericSend+0x30>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd2:	e7fe      	b.n	8006cd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <xQueueGenericSend+0x3e>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <xQueueGenericSend+0x42>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <xQueueGenericSend+0x44>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <xQueueGenericSend+0x5c>
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfe:	e7fe      	b.n	8006cfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d103      	bne.n	8006d0e <xQueueGenericSend+0x6a>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <xQueueGenericSend+0x6e>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xQueueGenericSend+0x70>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d109      	bne.n	8006d2c <xQueueGenericSend+0x88>
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	e7fe      	b.n	8006d2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d2c:	f001 f9a4 	bl	8008078 <xTaskGetSchedulerState>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <xQueueGenericSend+0x98>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <xQueueGenericSend+0x9c>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e000      	b.n	8006d42 <xQueueGenericSend+0x9e>
 8006d40:	2300      	movs	r3, #0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <xQueueGenericSend+0xb6>
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d5a:	f001 fcf7 	bl	800874c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d302      	bcc.n	8006d70 <xQueueGenericSend+0xcc>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d129      	bne.n	8006dc4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d76:	f000 fab6 	bl	80072e6 <prvCopyDataToQueue>
 8006d7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 ffb9 	bl	8007d00 <xTaskRemoveFromEventList>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d013      	beq.n	8006dbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d94:	4b3f      	ldr	r3, [pc, #252]	; (8006e94 <xQueueGenericSend+0x1f0>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	e00a      	b.n	8006dbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dac:	4b39      	ldr	r3, [pc, #228]	; (8006e94 <xQueueGenericSend+0x1f0>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dbc:	f001 fcf4 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e063      	b.n	8006e8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dca:	f001 fced 	bl	80087a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e05c      	b.n	8006e8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fff1 	bl	8007dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006de6:	f001 fcdf 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dea:	f000 fda5 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dee:	f001 fcad 	bl	800874c <vPortEnterCritical>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006df8:	b25b      	sxtb	r3, r3
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d103      	bne.n	8006e08 <xQueueGenericSend+0x164>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0e:	b25b      	sxtb	r3, r3
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d103      	bne.n	8006e1e <xQueueGenericSend+0x17a>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1e:	f001 fcc3 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e22:	1d3a      	adds	r2, r7, #4
 8006e24:	f107 0314 	add.w	r3, r7, #20
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ffe0 	bl	8007df0 <xTaskCheckForTimeOut>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d124      	bne.n	8006e80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e38:	f000 fb4d 	bl	80074d6 <prvIsQueueFull>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d018      	beq.n	8006e74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	3310      	adds	r3, #16
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 ff34 	bl	8007cb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e52:	f000 fad8 	bl	8007406 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e56:	f000 fd7d 	bl	8007954 <xTaskResumeAll>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f47f af7c 	bne.w	8006d5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006e62:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <xQueueGenericSend+0x1f0>)
 8006e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	e772      	b.n	8006d5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e76:	f000 fac6 	bl	8007406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e7a:	f000 fd6b 	bl	8007954 <xTaskResumeAll>
 8006e7e:	e76c      	b.n	8006d5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e82:	f000 fac0 	bl	8007406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e86:	f000 fd65 	bl	8007954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e8a:	2300      	movs	r3, #0
		}
	}
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3738      	adds	r7, #56	; 0x38
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08e      	sub	sp, #56	; 0x38
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <xQueueGiveFromISR+0x28>
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	e7fe      	b.n	8006ebe <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <xQueueGiveFromISR+0x44>
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	e7fe      	b.n	8006eda <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <xQueueGiveFromISR+0x54>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <xQueueGiveFromISR+0x58>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <xQueueGiveFromISR+0x5a>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <xQueueGiveFromISR+0x72>
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	e7fe      	b.n	8006f08 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f0a:	f001 fcfb 	bl	8008904 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	617a      	str	r2, [r7, #20]
 8006f24:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d22b      	bcs.n	8006f92 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d112      	bne.n	8006f7c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d016      	beq.n	8006f8c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fecc 	bl	8007d00 <xTaskRemoveFromEventList>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00e      	beq.n	8006f8c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e007      	b.n	8006f8c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f80:	3301      	adds	r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	b25a      	sxtb	r2, r3
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f90:	e001      	b.n	8006f96 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3738      	adds	r7, #56	; 0x38
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08e      	sub	sp, #56	; 0x38
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <xQueueSemaphoreTake+0x30>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	623b      	str	r3, [r7, #32]
 8006fda:	e7fe      	b.n	8006fda <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <xQueueSemaphoreTake+0x4c>
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	e7fe      	b.n	8006ff6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ff8:	f001 f83e 	bl	8008078 <xTaskGetSchedulerState>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <xQueueSemaphoreTake+0x5c>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <xQueueSemaphoreTake+0x60>
 8007008:	2301      	movs	r3, #1
 800700a:	e000      	b.n	800700e <xQueueSemaphoreTake+0x62>
 800700c:	2300      	movs	r3, #0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <xQueueSemaphoreTake+0x7a>
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	e7fe      	b.n	8007024 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007026:	f001 fb91 	bl	800874c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d024      	beq.n	8007080 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007046:	f001 f9dd 	bl	8008404 <pvTaskIncrementMutexHeldCount>
 800704a:	4602      	mov	r2, r0
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00f      	beq.n	8007078 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	3310      	adds	r3, #16
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fe4f 	bl	8007d00 <xTaskRemoveFromEventList>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007068:	4b53      	ldr	r3, [pc, #332]	; (80071b8 <xQueueSemaphoreTake+0x20c>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007078:	f001 fb96 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 800707c:	2301      	movs	r3, #1
 800707e:	e096      	b.n	80071ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d110      	bne.n	80070a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <xQueueSemaphoreTake+0xf4>
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e7fe      	b.n	800709e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80070a0:	f001 fb82 	bl	80087a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e082      	b.n	80071ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070ae:	f107 030c 	add.w	r3, r7, #12
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fe86 	bl	8007dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070bc:	f001 fb74 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070c0:	f000 fc3a 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070c4:	f001 fb42 	bl	800874c <vPortEnterCritical>
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d103      	bne.n	80070de <xQueueSemaphoreTake+0x132>
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d103      	bne.n	80070f4 <xQueueSemaphoreTake+0x148>
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070f4:	f001 fb58 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070f8:	463a      	mov	r2, r7
 80070fa:	f107 030c 	add.w	r3, r7, #12
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fe75 	bl	8007df0 <xTaskCheckForTimeOut>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d132      	bne.n	8007172 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800710c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800710e:	f000 f9cc 	bl	80074aa <prvIsQueueEmpty>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d026      	beq.n	8007166 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007120:	f001 fb14 	bl	800874c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 ffc3 	bl	80080b4 <xTaskPriorityInherit>
 800712e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007130:	f001 fb3a 	bl	80087a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	3324      	adds	r3, #36	; 0x24
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	4611      	mov	r1, r2
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fdbb 	bl	8007cb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007144:	f000 f95f 	bl	8007406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007148:	f000 fc04 	bl	8007954 <xTaskResumeAll>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	f47f af69 	bne.w	8007026 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007154:	4b18      	ldr	r3, [pc, #96]	; (80071b8 <xQueueSemaphoreTake+0x20c>)
 8007156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	e75f      	b.n	8007026 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007168:	f000 f94d 	bl	8007406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800716c:	f000 fbf2 	bl	8007954 <xTaskResumeAll>
 8007170:	e759      	b.n	8007026 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007174:	f000 f947 	bl	8007406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007178:	f000 fbec 	bl	8007954 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800717c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800717e:	f000 f994 	bl	80074aa <prvIsQueueEmpty>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	f43f af4e 	beq.w	8007026 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007190:	f001 fadc 	bl	800874c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007196:	f000 f88e 	bl	80072b6 <prvGetDisinheritPriorityAfterTimeout>
 800719a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 f890 	bl	80082c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80071a8:	f001 fafe 	bl	80087a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3738      	adds	r7, #56	; 0x38
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08e      	sub	sp, #56	; 0x38
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <xQueueReceiveFromISR+0x2a>
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	623b      	str	r3, [r7, #32]
 80071e4:	e7fe      	b.n	80071e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <xQueueReceiveFromISR+0x38>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <xQueueReceiveFromISR+0x3c>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <xQueueReceiveFromISR+0x3e>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <xQueueReceiveFromISR+0x56>
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e7fe      	b.n	8007210 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007212:	f001 fb77 	bl	8008904 <vPortValidateInterruptPriority>
	__asm volatile
 8007216:	f3ef 8211 	mrs	r2, BASEPRI
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	61ba      	str	r2, [r7, #24]
 800722c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800722e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	2b00      	cmp	r3, #0
 800723c:	d02f      	beq.n	800729e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800724c:	f000 f8b5 	bl	80073ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	1e5a      	subs	r2, r3, #1
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007258:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d112      	bne.n	8007288 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d016      	beq.n	8007298 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fd46 	bl	8007d00 <xTaskRemoveFromEventList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	e007      	b.n	8007298 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800728c:	3301      	adds	r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	b25a      	sxtb	r2, r3
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007298:	2301      	movs	r3, #1
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
 800729c:	e001      	b.n	80072a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800729e:	2300      	movs	r3, #0
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3738      	adds	r7, #56	; 0x38
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f1c3 0307 	rsb	r3, r3, #7
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e001      	b.n	80072d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072d8:	68fb      	ldr	r3, [r7, #12]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10d      	bne.n	8007320 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d14d      	bne.n	80073a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 ff55 	bl	80081c0 <xTaskPriorityDisinherit>
 8007316:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e043      	b.n	80073a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d119      	bne.n	800735a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6898      	ldr	r0, [r3, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	461a      	mov	r2, r3
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	f001 fd25 	bl	8008d80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	441a      	add	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	429a      	cmp	r2, r3
 800734e:	d32b      	bcc.n	80073a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
 8007358:	e026      	b.n	80073a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68d8      	ldr	r0, [r3, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	461a      	mov	r2, r3
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	f001 fd0b 	bl	8008d80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	425b      	negs	r3, r3
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d207      	bcs.n	8007396 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	425b      	negs	r3, r3
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d105      	bne.n	80073a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d018      	beq.n	80073fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d303      	bcc.n	80073ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68d9      	ldr	r1, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	461a      	mov	r2, r3
 80073f8:	6838      	ldr	r0, [r7, #0]
 80073fa:	f001 fcc1 	bl	8008d80 <memcpy>
	}
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800740e:	f001 f99d 	bl	800874c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007418:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800741a:	e011      	b.n	8007440 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d012      	beq.n	800744a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3324      	adds	r3, #36	; 0x24
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fc69 	bl	8007d00 <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007434:	f000 fd3c 	bl	8007eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	3b01      	subs	r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dce9      	bgt.n	800741c <prvUnlockQueue+0x16>
 8007448:	e000      	b.n	800744c <prvUnlockQueue+0x46>
					break;
 800744a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	22ff      	movs	r2, #255	; 0xff
 8007450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007454:	f001 f9a8 	bl	80087a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007458:	f001 f978 	bl	800874c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007462:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007464:	e011      	b.n	800748a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d012      	beq.n	8007494 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3310      	adds	r3, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fc44 	bl	8007d00 <xTaskRemoveFromEventList>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800747e:	f000 fd17 	bl	8007eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	3b01      	subs	r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dce9      	bgt.n	8007466 <prvUnlockQueue+0x60>
 8007492:	e000      	b.n	8007496 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007494:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	22ff      	movs	r2, #255	; 0xff
 800749a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800749e:	f001 f983 	bl	80087a8 <vPortExitCritical>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074b2:	f001 f94b 	bl	800874c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074be:	2301      	movs	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e001      	b.n	80074c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074c8:	f001 f96e 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074de:	f001 f935 	bl	800874c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d102      	bne.n	80074f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e001      	b.n	80074f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074f8:	f001 f956 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 80074fc:	68fb      	ldr	r3, [r7, #12]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007506:	b580      	push	{r7, lr}
 8007508:	b08e      	sub	sp, #56	; 0x38
 800750a:	af04      	add	r7, sp, #16
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <xTaskCreateStatic+0x28>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	623b      	str	r3, [r7, #32]
 800752c:	e7fe      	b.n	800752c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <xTaskCreateStatic+0x42>
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	e7fe      	b.n	8007546 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007548:	2354      	movs	r3, #84	; 0x54
 800754a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b54      	cmp	r3, #84	; 0x54
 8007550:	d009      	beq.n	8007566 <xTaskCreateStatic+0x60>
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e7fe      	b.n	8007564 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <xTaskCreateStatic+0xa4>
 800756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01b      	beq.n	80075aa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800757a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2202      	movs	r2, #2
 8007580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007584:	2300      	movs	r3, #0
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	9302      	str	r3, [sp, #8]
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f850 	bl	8007642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075a4:	f000 f8cc 	bl	8007740 <prvAddNewTaskToReadyList>
 80075a8:	e001      	b.n	80075ae <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075ae:	697b      	ldr	r3, [r7, #20]
	}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3728      	adds	r7, #40	; 0x28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08c      	sub	sp, #48	; 0x30
 80075bc:	af04      	add	r7, sp, #16
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f9d7 	bl	8008980 <pvPortMalloc>
 80075d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80075da:	2054      	movs	r0, #84	; 0x54
 80075dc:	f001 f9d0 	bl	8008980 <pvPortMalloc>
 80075e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
 80075ee:	e005      	b.n	80075fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075f0:	6978      	ldr	r0, [r7, #20]
 80075f2:	f001 fa87 	bl	8008b04 <vPortFree>
 80075f6:	e001      	b.n	80075fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d017      	beq.n	8007632 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800760a:	88fa      	ldrh	r2, [r7, #6]
 800760c:	2300      	movs	r3, #0
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	9302      	str	r3, [sp, #8]
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f80e 	bl	8007642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007626:	69f8      	ldr	r0, [r7, #28]
 8007628:	f000 f88a 	bl	8007740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800762c:	2301      	movs	r3, #1
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	e002      	b.n	8007638 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007632:	f04f 33ff 	mov.w	r3, #4294967295
 8007636:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007638:	69bb      	ldr	r3, [r7, #24]
	}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b088      	sub	sp, #32
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800765a:	3b01      	subs	r3, #1
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f023 0307 	bic.w	r3, r3, #7
 8007668:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <prvInitialiseNewTask+0x46>
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e7fe      	b.n	8007686 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	e012      	b.n	80076b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	4413      	add	r3, r2
 8007694:	7819      	ldrb	r1, [r3, #0]
 8007696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	3334      	adds	r3, #52	; 0x34
 800769e:	460a      	mov	r2, r1
 80076a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	3301      	adds	r3, #1
 80076b2:	61fb      	str	r3, [r7, #28]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d9e9      	bls.n	800768e <prvInitialiseNewTask+0x4c>
 80076ba:	e000      	b.n	80076be <prvInitialiseNewTask+0x7c>
		{
			break;
 80076bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	2b06      	cmp	r3, #6
 80076ca:	d901      	bls.n	80076d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076cc:	2306      	movs	r3, #6
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	2200      	movs	r2, #0
 80076e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	3304      	adds	r3, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff f912 	bl	8006910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	3318      	adds	r3, #24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff f90d 	bl	8006910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	f1c3 0207 	rsb	r2, r3, #7
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	2200      	movs	r2, #0
 8007710:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	69b8      	ldr	r0, [r7, #24]
 8007720:	f000 feea 	bl	80084f8 <pxPortInitialiseStack>
 8007724:	4602      	mov	r2, r0
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007736:	bf00      	nop
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007748:	f001 f800 	bl	800874c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800774c:	4b2a      	ldr	r3, [pc, #168]	; (80077f8 <prvAddNewTaskToReadyList+0xb8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	4a29      	ldr	r2, [pc, #164]	; (80077f8 <prvAddNewTaskToReadyList+0xb8>)
 8007754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007756:	4b29      	ldr	r3, [pc, #164]	; (80077fc <prvAddNewTaskToReadyList+0xbc>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d109      	bne.n	8007772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800775e:	4a27      	ldr	r2, [pc, #156]	; (80077fc <prvAddNewTaskToReadyList+0xbc>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007764:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <prvAddNewTaskToReadyList+0xb8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d110      	bne.n	800778e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800776c:	f000 fbc4 	bl	8007ef8 <prvInitialiseTaskLists>
 8007770:	e00d      	b.n	800778e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007772:	4b23      	ldr	r3, [pc, #140]	; (8007800 <prvAddNewTaskToReadyList+0xc0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800777a:	4b20      	ldr	r3, [pc, #128]	; (80077fc <prvAddNewTaskToReadyList+0xbc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	429a      	cmp	r2, r3
 8007786:	d802      	bhi.n	800778e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <prvAddNewTaskToReadyList+0xbc>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800778e:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <prvAddNewTaskToReadyList+0xc4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <prvAddNewTaskToReadyList+0xc4>)
 8007796:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	2201      	movs	r2, #1
 800779e:	409a      	lsls	r2, r3
 80077a0:	4b19      	ldr	r3, [pc, #100]	; (8007808 <prvAddNewTaskToReadyList+0xc8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <prvAddNewTaskToReadyList+0xc8>)
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <prvAddNewTaskToReadyList+0xcc>)
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3304      	adds	r3, #4
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f7ff f8b2 	bl	800692a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077c6:	f000 ffef 	bl	80087a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <prvAddNewTaskToReadyList+0xc0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvAddNewTaskToReadyList+0xbc>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d207      	bcs.n	80077f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <prvAddNewTaskToReadyList+0xd0>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000424 	.word	0x20000424
 80077fc:	20000324 	.word	0x20000324
 8007800:	20000430 	.word	0x20000430
 8007804:	20000440 	.word	0x20000440
 8007808:	2000042c 	.word	0x2000042c
 800780c:	20000328 	.word	0x20000328
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800781c:	2300      	movs	r3, #0
 800781e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d016      	beq.n	8007854 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007826:	4b13      	ldr	r3, [pc, #76]	; (8007874 <vTaskDelay+0x60>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <vTaskDelay+0x2e>
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	e7fe      	b.n	8007840 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007842:	f000 f879 	bl	8007938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007846:	2100      	movs	r1, #0
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fdef 	bl	800842c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800784e:	f000 f881 	bl	8007954 <xTaskResumeAll>
 8007852:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d107      	bne.n	800786a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800785a:	4b07      	ldr	r3, [pc, #28]	; (8007878 <vTaskDelay+0x64>)
 800785c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	2000044c 	.word	0x2000044c
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800788a:	463a      	mov	r2, r7
 800788c:	1d39      	adds	r1, r7, #4
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	4618      	mov	r0, r3
 8007894:	f7f9 fc68 	bl	8001168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	9202      	str	r2, [sp, #8]
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	2300      	movs	r3, #0
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	2300      	movs	r3, #0
 80078a8:	460a      	mov	r2, r1
 80078aa:	491d      	ldr	r1, [pc, #116]	; (8007920 <vTaskStartScheduler+0xa4>)
 80078ac:	481d      	ldr	r0, [pc, #116]	; (8007924 <vTaskStartScheduler+0xa8>)
 80078ae:	f7ff fe2a 	bl	8007506 <xTaskCreateStatic>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4b1c      	ldr	r3, [pc, #112]	; (8007928 <vTaskStartScheduler+0xac>)
 80078b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078b8:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <vTaskStartScheduler+0xac>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078c0:	2301      	movs	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e001      	b.n	80078ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d115      	bne.n	80078fc <vTaskStartScheduler+0x80>
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <vTaskStartScheduler+0xb0>)
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <vTaskStartScheduler+0xb4>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80078f0:	4b10      	ldr	r3, [pc, #64]	; (8007934 <vTaskStartScheduler+0xb8>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078f6:	f000 fe8b 	bl	8008610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078fa:	e00d      	b.n	8007918 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007902:	d109      	bne.n	8007918 <vTaskStartScheduler+0x9c>
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e7fe      	b.n	8007916 <vTaskStartScheduler+0x9a>
}
 8007918:	bf00      	nop
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	0800976c 	.word	0x0800976c
 8007924:	08007ec9 	.word	0x08007ec9
 8007928:	20000448 	.word	0x20000448
 800792c:	20000444 	.word	0x20000444
 8007930:	20000430 	.word	0x20000430
 8007934:	20000428 	.word	0x20000428

08007938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <vTaskSuspendAll+0x18>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <vTaskSuspendAll+0x18>)
 8007944:	6013      	str	r3, [r2, #0]
}
 8007946:	bf00      	nop
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	2000044c 	.word	0x2000044c

08007954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007962:	4b41      	ldr	r3, [pc, #260]	; (8007a68 <xTaskResumeAll+0x114>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <xTaskResumeAll+0x2a>
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	e7fe      	b.n	800797c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800797e:	f000 fee5 	bl	800874c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007982:	4b39      	ldr	r3, [pc, #228]	; (8007a68 <xTaskResumeAll+0x114>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3b01      	subs	r3, #1
 8007988:	4a37      	ldr	r2, [pc, #220]	; (8007a68 <xTaskResumeAll+0x114>)
 800798a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798c:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <xTaskResumeAll+0x114>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d161      	bne.n	8007a58 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007994:	4b35      	ldr	r3, [pc, #212]	; (8007a6c <xTaskResumeAll+0x118>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05d      	beq.n	8007a58 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799c:	e02e      	b.n	80079fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800799e:	4b34      	ldr	r3, [pc, #208]	; (8007a70 <xTaskResumeAll+0x11c>)
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3318      	adds	r3, #24
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff f81a 	bl	80069e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff f815 	bl	80069e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	2201      	movs	r2, #1
 80079c0:	409a      	lsls	r2, r3
 80079c2:	4b2c      	ldr	r3, [pc, #176]	; (8007a74 <xTaskResumeAll+0x120>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	4a2a      	ldr	r2, [pc, #168]	; (8007a74 <xTaskResumeAll+0x120>)
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a27      	ldr	r2, [pc, #156]	; (8007a78 <xTaskResumeAll+0x124>)
 80079da:	441a      	add	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe ffa1 	bl	800692a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4b23      	ldr	r3, [pc, #140]	; (8007a7c <xTaskResumeAll+0x128>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d302      	bcc.n	80079fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80079f6:	4b22      	ldr	r3, [pc, #136]	; (8007a80 <xTaskResumeAll+0x12c>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079fc:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <xTaskResumeAll+0x11c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1cc      	bne.n	800799e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a0a:	f000 fb0f 	bl	800802c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a1a:	f000 f837 	bl	8007a8c <xTaskIncrementTick>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007a24:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <xTaskResumeAll+0x12c>)
 8007a26:	2201      	movs	r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f1      	bne.n	8007a1a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <xTaskResumeAll+0x12c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a58:	f000 fea6 	bl	80087a8 <vPortExitCritical>

	return xAlreadyYielded;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000044c 	.word	0x2000044c
 8007a6c:	20000424 	.word	0x20000424
 8007a70:	200003e4 	.word	0x200003e4
 8007a74:	2000042c 	.word	0x2000042c
 8007a78:	20000328 	.word	0x20000328
 8007a7c:	20000324 	.word	0x20000324
 8007a80:	20000438 	.word	0x20000438
 8007a84:	20000434 	.word	0x20000434
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a96:	4b50      	ldr	r3, [pc, #320]	; (8007bd8 <xTaskIncrementTick+0x14c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 808c 	bne.w	8007bb8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007aa0:	4b4e      	ldr	r3, [pc, #312]	; (8007bdc <xTaskIncrementTick+0x150>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007aa8:	4a4c      	ldr	r2, [pc, #304]	; (8007bdc <xTaskIncrementTick+0x150>)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d11f      	bne.n	8007af4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ab4:	4b4a      	ldr	r3, [pc, #296]	; (8007be0 <xTaskIncrementTick+0x154>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <xTaskIncrementTick+0x46>
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	e7fe      	b.n	8007ad0 <xTaskIncrementTick+0x44>
 8007ad2:	4b43      	ldr	r3, [pc, #268]	; (8007be0 <xTaskIncrementTick+0x154>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <xTaskIncrementTick+0x158>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a40      	ldr	r2, [pc, #256]	; (8007be0 <xTaskIncrementTick+0x154>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	4a40      	ldr	r2, [pc, #256]	; (8007be4 <xTaskIncrementTick+0x158>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	4b40      	ldr	r3, [pc, #256]	; (8007be8 <xTaskIncrementTick+0x15c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	4a3e      	ldr	r2, [pc, #248]	; (8007be8 <xTaskIncrementTick+0x15c>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	f000 fa9c 	bl	800802c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007af4:	4b3d      	ldr	r3, [pc, #244]	; (8007bec <xTaskIncrementTick+0x160>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d34d      	bcc.n	8007b9a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007afe:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <xTaskIncrementTick+0x154>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <xTaskIncrementTick+0x80>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e000      	b.n	8007b0e <xTaskIncrementTick+0x82>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b12:	4b36      	ldr	r3, [pc, #216]	; (8007bec <xTaskIncrementTick+0x160>)
 8007b14:	f04f 32ff 	mov.w	r2, #4294967295
 8007b18:	601a      	str	r2, [r3, #0]
					break;
 8007b1a:	e03e      	b.n	8007b9a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b1c:	4b30      	ldr	r3, [pc, #192]	; (8007be0 <xTaskIncrementTick+0x154>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d203      	bcs.n	8007b3c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b34:	4a2d      	ldr	r2, [pc, #180]	; (8007bec <xTaskIncrementTick+0x160>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6013      	str	r3, [r2, #0]
						break;
 8007b3a:	e02e      	b.n	8007b9a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe ff4f 	bl	80069e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	3318      	adds	r3, #24
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe ff46 	bl	80069e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	409a      	lsls	r2, r3
 8007b60:	4b23      	ldr	r3, [pc, #140]	; (8007bf0 <xTaskIncrementTick+0x164>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <xTaskIncrementTick+0x164>)
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <xTaskIncrementTick+0x168>)
 8007b78:	441a      	add	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f7fe fed2 	bl	800692a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <xTaskIncrementTick+0x16c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d3b4      	bcc.n	8007afe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007b94:	2301      	movs	r3, #1
 8007b96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b98:	e7b1      	b.n	8007afe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b9a:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <xTaskIncrementTick+0x16c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	4914      	ldr	r1, [pc, #80]	; (8007bf4 <xTaskIncrementTick+0x168>)
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d907      	bls.n	8007bc2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	617b      	str	r3, [r7, #20]
 8007bb6:	e004      	b.n	8007bc2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007bb8:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <xTaskIncrementTick+0x170>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4a0f      	ldr	r2, [pc, #60]	; (8007bfc <xTaskIncrementTick+0x170>)
 8007bc0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <xTaskIncrementTick+0x174>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007bce:	697b      	ldr	r3, [r7, #20]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	2000044c 	.word	0x2000044c
 8007bdc:	20000428 	.word	0x20000428
 8007be0:	200003dc 	.word	0x200003dc
 8007be4:	200003e0 	.word	0x200003e0
 8007be8:	2000043c 	.word	0x2000043c
 8007bec:	20000444 	.word	0x20000444
 8007bf0:	2000042c 	.word	0x2000042c
 8007bf4:	20000328 	.word	0x20000328
 8007bf8:	20000324 	.word	0x20000324
 8007bfc:	20000434 	.word	0x20000434
 8007c00:	20000438 	.word	0x20000438

08007c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c0a:	4b26      	ldr	r3, [pc, #152]	; (8007ca4 <vTaskSwitchContext+0xa0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c12:	4b25      	ldr	r3, [pc, #148]	; (8007ca8 <vTaskSwitchContext+0xa4>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c18:	e03e      	b.n	8007c98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007c1a:	4b23      	ldr	r3, [pc, #140]	; (8007ca8 <vTaskSwitchContext+0xa4>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c20:	4b22      	ldr	r3, [pc, #136]	; (8007cac <vTaskSwitchContext+0xa8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	fab3 f383 	clz	r3, r3
 8007c2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	f1c3 031f 	rsb	r3, r3, #31
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	491e      	ldr	r1, [pc, #120]	; (8007cb0 <vTaskSwitchContext+0xac>)
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e7fe      	b.n	8007c5c <vTaskSwitchContext+0x58>
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <vTaskSwitchContext+0xac>)
 8007c6a:	4413      	add	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	605a      	str	r2, [r3, #4]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d104      	bne.n	8007c8e <vTaskSwitchContext+0x8a>
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <vTaskSwitchContext+0xb0>)
 8007c96:	6013      	str	r3, [r2, #0]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	2000044c 	.word	0x2000044c
 8007ca8:	20000438 	.word	0x20000438
 8007cac:	2000042c 	.word	0x2000042c
 8007cb0:	20000328 	.word	0x20000328
 8007cb4:	20000324 	.word	0x20000324

08007cb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d109      	bne.n	8007cdc <vTaskPlaceOnEventList+0x24>
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e7fe      	b.n	8007cda <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <vTaskPlaceOnEventList+0x44>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3318      	adds	r3, #24
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7fe fe44 	bl	8006972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cea:	2101      	movs	r1, #1
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f000 fb9d 	bl	800842c <prvAddCurrentTaskToDelayedList>
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000324 	.word	0x20000324

08007d00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <xTaskRemoveFromEventList+0x2a>
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	e7fe      	b.n	8007d28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fe58 	bl	80069e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d34:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <xTaskRemoveFromEventList+0xac>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d11c      	bne.n	8007d76 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fe4f 	bl	80069e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	409a      	lsls	r2, r3
 8007d4e:	4b18      	ldr	r3, [pc, #96]	; (8007db0 <xTaskRemoveFromEventList+0xb0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <xTaskRemoveFromEventList+0xb0>)
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <xTaskRemoveFromEventList+0xb4>)
 8007d66:	441a      	add	r2, r3
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fe fddb 	bl	800692a <vListInsertEnd>
 8007d74:	e005      	b.n	8007d82 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3318      	adds	r3, #24
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	480e      	ldr	r0, [pc, #56]	; (8007db8 <xTaskRemoveFromEventList+0xb8>)
 8007d7e:	f7fe fdd4 	bl	800692a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <xTaskRemoveFromEventList+0xbc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d905      	bls.n	8007d9c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d94:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <xTaskRemoveFromEventList+0xc0>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	e001      	b.n	8007da0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007da0:	697b      	ldr	r3, [r7, #20]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	2000044c 	.word	0x2000044c
 8007db0:	2000042c 	.word	0x2000042c
 8007db4:	20000328 	.word	0x20000328
 8007db8:	200003e4 	.word	0x200003e4
 8007dbc:	20000324 	.word	0x20000324
 8007dc0:	20000438 	.word	0x20000438

08007dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dcc:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <vTaskInternalSetTimeOutState+0x24>)
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <vTaskInternalSetTimeOutState+0x28>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	605a      	str	r2, [r3, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	2000043c 	.word	0x2000043c
 8007dec:	20000428 	.word	0x20000428

08007df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d109      	bne.n	8007e14 <xTaskCheckForTimeOut+0x24>
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	e7fe      	b.n	8007e12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <xTaskCheckForTimeOut+0x3e>
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e7fe      	b.n	8007e2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007e2e:	f000 fc8d 	bl	800874c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e32:	4b1d      	ldr	r3, [pc, #116]	; (8007ea8 <xTaskCheckForTimeOut+0xb8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d102      	bne.n	8007e52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	e023      	b.n	8007e9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b15      	ldr	r3, [pc, #84]	; (8007eac <xTaskCheckForTimeOut+0xbc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d007      	beq.n	8007e6e <xTaskCheckForTimeOut+0x7e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	61fb      	str	r3, [r7, #28]
 8007e6c:	e015      	b.n	8007e9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d20b      	bcs.n	8007e90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff9d 	bl	8007dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61fb      	str	r3, [r7, #28]
 8007e8e:	e004      	b.n	8007e9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e9a:	f000 fc85 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3720      	adds	r7, #32
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20000428 	.word	0x20000428
 8007eac:	2000043c 	.word	0x2000043c

08007eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007eb4:	4b03      	ldr	r3, [pc, #12]	; (8007ec4 <vTaskMissedYield+0x14>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	20000438 	.word	0x20000438

08007ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ed0:	f000 f852 	bl	8007f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <prvIdleTask+0x28>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d9f9      	bls.n	8007ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <prvIdleTask+0x2c>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007eec:	e7f0      	b.n	8007ed0 <prvIdleTask+0x8>
 8007eee:	bf00      	nop
 8007ef0:	20000328 	.word	0x20000328
 8007ef4:	e000ed04 	.word	0xe000ed04

08007ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	e00c      	b.n	8007f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4a12      	ldr	r2, [pc, #72]	; (8007f58 <prvInitialiseTaskLists+0x60>)
 8007f10:	4413      	add	r3, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe fcdc 	bl	80068d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b06      	cmp	r3, #6
 8007f22:	d9ef      	bls.n	8007f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f24:	480d      	ldr	r0, [pc, #52]	; (8007f5c <prvInitialiseTaskLists+0x64>)
 8007f26:	f7fe fcd3 	bl	80068d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f2a:	480d      	ldr	r0, [pc, #52]	; (8007f60 <prvInitialiseTaskLists+0x68>)
 8007f2c:	f7fe fcd0 	bl	80068d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f30:	480c      	ldr	r0, [pc, #48]	; (8007f64 <prvInitialiseTaskLists+0x6c>)
 8007f32:	f7fe fccd 	bl	80068d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f36:	480c      	ldr	r0, [pc, #48]	; (8007f68 <prvInitialiseTaskLists+0x70>)
 8007f38:	f7fe fcca 	bl	80068d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f3c:	480b      	ldr	r0, [pc, #44]	; (8007f6c <prvInitialiseTaskLists+0x74>)
 8007f3e:	f7fe fcc7 	bl	80068d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <prvInitialiseTaskLists+0x78>)
 8007f44:	4a05      	ldr	r2, [pc, #20]	; (8007f5c <prvInitialiseTaskLists+0x64>)
 8007f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <prvInitialiseTaskLists+0x7c>)
 8007f4a:	4a05      	ldr	r2, [pc, #20]	; (8007f60 <prvInitialiseTaskLists+0x68>)
 8007f4c:	601a      	str	r2, [r3, #0]
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000328 	.word	0x20000328
 8007f5c:	200003b4 	.word	0x200003b4
 8007f60:	200003c8 	.word	0x200003c8
 8007f64:	200003e4 	.word	0x200003e4
 8007f68:	200003f8 	.word	0x200003f8
 8007f6c:	20000410 	.word	0x20000410
 8007f70:	200003dc 	.word	0x200003dc
 8007f74:	200003e0 	.word	0x200003e0

08007f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f7e:	e019      	b.n	8007fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f80:	f000 fbe4 	bl	800874c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f84:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <prvCheckTasksWaitingTermination+0x4c>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe fd27 	bl	80069e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvCheckTasksWaitingTermination+0x50>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <prvCheckTasksWaitingTermination+0x50>)
 8007f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <prvCheckTasksWaitingTermination+0x54>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	4a09      	ldr	r2, [pc, #36]	; (8007fcc <prvCheckTasksWaitingTermination+0x54>)
 8007fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007faa:	f000 fbfd 	bl	80087a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f80e 	bl	8007fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <prvCheckTasksWaitingTermination+0x54>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e1      	bne.n	8007f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	200003f8 	.word	0x200003f8
 8007fc8:	20000424 	.word	0x20000424
 8007fcc:	2000040c 	.word	0x2000040c

08007fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d108      	bne.n	8007ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fd8c 	bl	8008b04 <vPortFree>
				vPortFree( pxTCB );
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fd89 	bl	8008b04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ff2:	e017      	b.n	8008024 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d103      	bne.n	8008006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fd80 	bl	8008b04 <vPortFree>
	}
 8008004:	e00e      	b.n	8008024 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800800c:	2b02      	cmp	r3, #2
 800800e:	d009      	beq.n	8008024 <prvDeleteTCB+0x54>
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e7fe      	b.n	8008022 <prvDeleteTCB+0x52>
	}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <prvResetNextTaskUnblockTime+0x44>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <prvResetNextTaskUnblockTime+0x14>
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <prvResetNextTaskUnblockTime+0x16>
 8008040:	2300      	movs	r3, #0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <prvResetNextTaskUnblockTime+0x48>)
 8008048:	f04f 32ff 	mov.w	r2, #4294967295
 800804c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800804e:	e008      	b.n	8008062 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <prvResetNextTaskUnblockTime+0x44>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	4a05      	ldr	r2, [pc, #20]	; (8008074 <prvResetNextTaskUnblockTime+0x48>)
 8008060:	6013      	str	r3, [r2, #0]
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	200003dc 	.word	0x200003dc
 8008074:	20000444 	.word	0x20000444

08008078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <xTaskGetSchedulerState+0x34>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008086:	2301      	movs	r3, #1
 8008088:	607b      	str	r3, [r7, #4]
 800808a:	e008      	b.n	800809e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800808c:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <xTaskGetSchedulerState+0x38>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d102      	bne.n	800809a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008094:	2302      	movs	r3, #2
 8008096:	607b      	str	r3, [r7, #4]
 8008098:	e001      	b.n	800809e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800809e:	687b      	ldr	r3, [r7, #4]
	}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000430 	.word	0x20000430
 80080b0:	2000044c 	.word	0x2000044c

080080b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d06e      	beq.n	80081a8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <xTaskPriorityInherit+0x100>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d25e      	bcs.n	8008196 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	db06      	blt.n	80080ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e0:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <xTaskPriorityInherit+0x100>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	f1c3 0207 	rsb	r2, r3, #7
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6959      	ldr	r1, [r3, #20]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a2e      	ldr	r2, [pc, #184]	; (80081b8 <xTaskPriorityInherit+0x104>)
 8008100:	4413      	add	r3, r2
 8008102:	4299      	cmp	r1, r3
 8008104:	d101      	bne.n	800810a <xTaskPriorityInherit+0x56>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <xTaskPriorityInherit+0x58>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d03a      	beq.n	8008186 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fc65 	bl	80069e4 <uxListRemove>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d115      	bne.n	800814c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008124:	4924      	ldr	r1, [pc, #144]	; (80081b8 <xTaskPriorityInherit+0x104>)
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <xTaskPriorityInherit+0x98>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	2201      	movs	r2, #1
 800813c:	fa02 f303 	lsl.w	r3, r2, r3
 8008140:	43da      	mvns	r2, r3
 8008142:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <xTaskPriorityInherit+0x108>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4013      	ands	r3, r2
 8008148:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <xTaskPriorityInherit+0x108>)
 800814a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <xTaskPriorityInherit+0x100>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	2201      	movs	r2, #1
 800815c:	409a      	lsls	r2, r3
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <xTaskPriorityInherit+0x108>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4313      	orrs	r3, r2
 8008164:	4a15      	ldr	r2, [pc, #84]	; (80081bc <xTaskPriorityInherit+0x108>)
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	4613      	mov	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <xTaskPriorityInherit+0x104>)
 8008176:	441a      	add	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3304      	adds	r3, #4
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	f7fe fbd3 	bl	800692a <vListInsertEnd>
 8008184:	e004      	b.n	8008190 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <xTaskPriorityInherit+0x100>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e008      	b.n	80081a8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <xTaskPriorityInherit+0x100>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d201      	bcs.n	80081a8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081a8:	68fb      	ldr	r3, [r7, #12]
	}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000324 	.word	0x20000324
 80081b8:	20000328 	.word	0x20000328
 80081bc:	2000042c 	.word	0x2000042c

080081c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d06c      	beq.n	80082b0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081d6:	4b39      	ldr	r3, [pc, #228]	; (80082bc <xTaskPriorityDisinherit+0xfc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d009      	beq.n	80081f4 <xTaskPriorityDisinherit+0x34>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e7fe      	b.n	80081f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d109      	bne.n	8008210 <xTaskPriorityDisinherit+0x50>
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	429a      	cmp	r2, r3
 8008224:	d044      	beq.n	80082b0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	d140      	bne.n	80082b0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fbd6 	bl	80069e4 <uxListRemove>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d115      	bne.n	800826a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	491f      	ldr	r1, [pc, #124]	; (80082c0 <xTaskPriorityDisinherit+0x100>)
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xTaskPriorityDisinherit+0xaa>
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	2201      	movs	r2, #1
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	43da      	mvns	r2, r3
 8008260:	4b18      	ldr	r3, [pc, #96]	; (80082c4 <xTaskPriorityDisinherit+0x104>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4013      	ands	r3, r2
 8008266:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <xTaskPriorityDisinherit+0x104>)
 8008268:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008276:	f1c3 0207 	rsb	r2, r3, #7
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	2201      	movs	r2, #1
 8008284:	409a      	lsls	r2, r3
 8008286:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <xTaskPriorityDisinherit+0x104>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4313      	orrs	r3, r2
 800828c:	4a0d      	ldr	r2, [pc, #52]	; (80082c4 <xTaskPriorityDisinherit+0x104>)
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <xTaskPriorityDisinherit+0x100>)
 800829e:	441a      	add	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe fb3f 	bl	800692a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b0:	697b      	ldr	r3, [r7, #20]
	}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000324 	.word	0x20000324
 80082c0:	20000328 	.word	0x20000328
 80082c4:	2000042c 	.word	0x2000042c

080082c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082d6:	2301      	movs	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8086 	beq.w	80083ee <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <vTaskPriorityDisinheritAfterTimeout+0x36>
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e7fe      	b.n	80082fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d902      	bls.n	800830e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	61fb      	str	r3, [r7, #28]
 800830c:	e002      	b.n	8008314 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008312:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	69fa      	ldr	r2, [r7, #28]
 800831a:	429a      	cmp	r2, r3
 800831c:	d067      	beq.n	80083ee <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	429a      	cmp	r2, r3
 8008326:	d162      	bne.n	80083ee <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008328:	4b33      	ldr	r3, [pc, #204]	; (80083f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	429a      	cmp	r2, r3
 8008330:	d109      	bne.n	8008346 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	e7fe      	b.n	8008344 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	db04      	blt.n	8008364 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	f1c3 0207 	rsb	r2, r3, #7
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	6959      	ldr	r1, [r3, #20]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4a22      	ldr	r2, [pc, #136]	; (80083fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008374:	4413      	add	r3, r2
 8008376:	4299      	cmp	r1, r3
 8008378:	d101      	bne.n	800837e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d034      	beq.n	80083ee <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fb2b 	bl	80069e4 <uxListRemove>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d115      	bne.n	80083c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4918      	ldr	r1, [pc, #96]	; (80083fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	2201      	movs	r2, #1
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	43da      	mvns	r2, r3
 80083b6:	4b12      	ldr	r3, [pc, #72]	; (8008400 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4013      	ands	r3, r2
 80083bc:	4a10      	ldr	r2, [pc, #64]	; (8008400 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083be:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	2201      	movs	r2, #1
 80083c6:	409a      	lsls	r2, r3
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	4a0c      	ldr	r2, [pc, #48]	; (8008400 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a07      	ldr	r2, [pc, #28]	; (80083fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083e0:	441a      	add	r2, r3
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7fe fa9e 	bl	800692a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083ee:	bf00      	nop
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000324 	.word	0x20000324
 80083fc:	20000328 	.word	0x20000328
 8008400:	2000042c 	.word	0x2000042c

08008404 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008408:	4b07      	ldr	r3, [pc, #28]	; (8008428 <pvTaskIncrementMutexHeldCount+0x24>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <pvTaskIncrementMutexHeldCount+0x24>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008416:	3201      	adds	r2, #1
 8008418:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800841a:	4b03      	ldr	r3, [pc, #12]	; (8008428 <pvTaskIncrementMutexHeldCount+0x24>)
 800841c:	681b      	ldr	r3, [r3, #0]
	}
 800841e:	4618      	mov	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	20000324 	.word	0x20000324

0800842c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008436:	4b29      	ldr	r3, [pc, #164]	; (80084dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800843c:	4b28      	ldr	r3, [pc, #160]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3304      	adds	r3, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe face 	bl	80069e4 <uxListRemove>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800844e:	4b24      	ldr	r3, [pc, #144]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	2201      	movs	r2, #1
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43da      	mvns	r2, r3
 800845c:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4013      	ands	r3, r2
 8008462:	4a20      	ldr	r2, [pc, #128]	; (80084e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008464:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846c:	d10a      	bne.n	8008484 <prvAddCurrentTaskToDelayedList+0x58>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008474:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3304      	adds	r3, #4
 800847a:	4619      	mov	r1, r3
 800847c:	481a      	ldr	r0, [pc, #104]	; (80084e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800847e:	f7fe fa54 	bl	800692a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008482:	e026      	b.n	80084d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800848c:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d209      	bcs.n	80084b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800849c:	4b13      	ldr	r3, [pc, #76]	; (80084ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fe fa62 	bl	8006972 <vListInsert>
}
 80084ae:	e010      	b.n	80084d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084b0:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f7fe fa58 	bl	8006972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d202      	bcs.n	80084d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084cc:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6013      	str	r3, [r2, #0]
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000428 	.word	0x20000428
 80084e0:	20000324 	.word	0x20000324
 80084e4:	2000042c 	.word	0x2000042c
 80084e8:	20000410 	.word	0x20000410
 80084ec:	200003e0 	.word	0x200003e0
 80084f0:	200003dc 	.word	0x200003dc
 80084f4:	20000444 	.word	0x20000444

080084f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3b04      	subs	r3, #4
 8008508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3b04      	subs	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3b04      	subs	r3, #4
 8008526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008528:	4a0c      	ldr	r2, [pc, #48]	; (800855c <pxPortInitialiseStack+0x64>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3b14      	subs	r3, #20
 8008532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3b04      	subs	r3, #4
 800853e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f06f 0202 	mvn.w	r2, #2
 8008546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b20      	subs	r3, #32
 800854c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	08008561 	.word	0x08008561

08008560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800856a:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <prvTaskExitError+0x50>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008572:	d009      	beq.n	8008588 <prvTaskExitError+0x28>
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e7fe      	b.n	8008586 <prvTaskExitError+0x26>
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800859a:	bf00      	nop
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0fc      	beq.n	800859c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20000044 	.word	0x20000044
	...

080085c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <pxCurrentTCBConst2>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	f380 8809 	msr	PSP, r0
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	4770      	bx	lr
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst2>:
 80085e0:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085e8:	4808      	ldr	r0, [pc, #32]	; (800860c <prvPortStartFirstTask+0x24>)
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	6800      	ldr	r0, [r0, #0]
 80085ee:	f380 8808 	msr	MSP, r0
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8814 	msr	CONTROL, r0
 80085fa:	b662      	cpsie	i
 80085fc:	b661      	cpsie	f
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	df00      	svc	0
 8008608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800860a:	bf00      	nop
 800860c:	e000ed08 	.word	0xe000ed08

08008610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008616:	4b44      	ldr	r3, [pc, #272]	; (8008728 <xPortStartScheduler+0x118>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a44      	ldr	r2, [pc, #272]	; (800872c <xPortStartScheduler+0x11c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d109      	bne.n	8008634 <xPortStartScheduler+0x24>
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	e7fe      	b.n	8008632 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008634:	4b3c      	ldr	r3, [pc, #240]	; (8008728 <xPortStartScheduler+0x118>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <xPortStartScheduler+0x120>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d109      	bne.n	8008652 <xPortStartScheduler+0x42>
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e7fe      	b.n	8008650 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008652:	4b38      	ldr	r3, [pc, #224]	; (8008734 <xPortStartScheduler+0x124>)
 8008654:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008674:	b2da      	uxtb	r2, r3
 8008676:	4b30      	ldr	r3, [pc, #192]	; (8008738 <xPortStartScheduler+0x128>)
 8008678:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800867a:	4b30      	ldr	r3, [pc, #192]	; (800873c <xPortStartScheduler+0x12c>)
 800867c:	2207      	movs	r2, #7
 800867e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008680:	e009      	b.n	8008696 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008682:	4b2e      	ldr	r3, [pc, #184]	; (800873c <xPortStartScheduler+0x12c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3b01      	subs	r3, #1
 8008688:	4a2c      	ldr	r2, [pc, #176]	; (800873c <xPortStartScheduler+0x12c>)
 800868a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b80      	cmp	r3, #128	; 0x80
 80086a0:	d0ef      	beq.n	8008682 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086a2:	4b26      	ldr	r3, [pc, #152]	; (800873c <xPortStartScheduler+0x12c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1c3 0307 	rsb	r3, r3, #7
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d009      	beq.n	80086c2 <xPortStartScheduler+0xb2>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	e7fe      	b.n	80086c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086c2:	4b1e      	ldr	r3, [pc, #120]	; (800873c <xPortStartScheduler+0x12c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	4a1c      	ldr	r2, [pc, #112]	; (800873c <xPortStartScheduler+0x12c>)
 80086ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086cc:	4b1b      	ldr	r3, [pc, #108]	; (800873c <xPortStartScheduler+0x12c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086d4:	4a19      	ldr	r2, [pc, #100]	; (800873c <xPortStartScheduler+0x12c>)
 80086d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <xPortStartScheduler+0x130>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a16      	ldr	r2, [pc, #88]	; (8008740 <xPortStartScheduler+0x130>)
 80086e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086ec:	4b14      	ldr	r3, [pc, #80]	; (8008740 <xPortStartScheduler+0x130>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a13      	ldr	r2, [pc, #76]	; (8008740 <xPortStartScheduler+0x130>)
 80086f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086f8:	f000 f8d6 	bl	80088a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086fc:	4b11      	ldr	r3, [pc, #68]	; (8008744 <xPortStartScheduler+0x134>)
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008702:	f000 f8f5 	bl	80088f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008706:	4b10      	ldr	r3, [pc, #64]	; (8008748 <xPortStartScheduler+0x138>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0f      	ldr	r2, [pc, #60]	; (8008748 <xPortStartScheduler+0x138>)
 800870c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008710:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008712:	f7ff ff69 	bl	80085e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008716:	f7ff fa75 	bl	8007c04 <vTaskSwitchContext>
	prvTaskExitError();
 800871a:	f7ff ff21 	bl	8008560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed00 	.word	0xe000ed00
 800872c:	410fc271 	.word	0x410fc271
 8008730:	410fc270 	.word	0x410fc270
 8008734:	e000e400 	.word	0xe000e400
 8008738:	20000450 	.word	0x20000450
 800873c:	20000454 	.word	0x20000454
 8008740:	e000ed20 	.word	0xe000ed20
 8008744:	20000044 	.word	0x20000044
 8008748:	e000ef34 	.word	0xe000ef34

0800874c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <vPortEnterCritical+0x54>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	4a0d      	ldr	r2, [pc, #52]	; (80087a0 <vPortEnterCritical+0x54>)
 800876c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800876e:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <vPortEnterCritical+0x54>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10e      	bne.n	8008794 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <vPortEnterCritical+0x58>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <vPortEnterCritical+0x48>
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	e7fe      	b.n	8008792 <vPortEnterCritical+0x46>
	}
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	20000044 	.word	0x20000044
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087ae:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <vPortExitCritical+0x4c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <vPortExitCritical+0x22>
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	607b      	str	r3, [r7, #4]
 80087c8:	e7fe      	b.n	80087c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <vPortExitCritical+0x4c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	4a08      	ldr	r2, [pc, #32]	; (80087f4 <vPortExitCritical+0x4c>)
 80087d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <vPortExitCritical+0x4c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <vPortExitCritical+0x3e>
 80087dc:	2300      	movs	r3, #0
 80087de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20000044 	.word	0x20000044
	...

08008800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008800:	f3ef 8009 	mrs	r0, PSP
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <pxCurrentTCBConst>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f01e 0f10 	tst.w	lr, #16
 8008810:	bf08      	it	eq
 8008812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	6010      	str	r0, [r2, #0]
 800881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008824:	f380 8811 	msr	BASEPRI, r0
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f7ff f9e8 	bl	8007c04 <vTaskSwitchContext>
 8008834:	f04f 0000 	mov.w	r0, #0
 8008838:	f380 8811 	msr	BASEPRI, r0
 800883c:	bc09      	pop	{r0, r3}
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6808      	ldr	r0, [r1, #0]
 8008842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008846:	f01e 0f10 	tst.w	lr, #16
 800884a:	bf08      	it	eq
 800884c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008850:	f380 8809 	msr	PSP, r0
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w

08008860 <pxCurrentTCBConst>:
 8008860:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008880:	f7ff f904 	bl	8007a8c <xTaskIncrementTick>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <SysTick_Handler+0x3c>)
 800888c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	e000ed04 	.word	0xe000ed04

080088a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <vPortSetupTimerInterrupt+0x34>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088b2:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortSetupTimerInterrupt+0x38>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <vPortSetupTimerInterrupt+0x3c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a0a      	ldr	r2, [pc, #40]	; (80088e8 <vPortSetupTimerInterrupt+0x40>)
 80088be:	fba2 2303 	umull	r2, r3, r2, r3
 80088c2:	099b      	lsrs	r3, r3, #6
 80088c4:	4a09      	ldr	r2, [pc, #36]	; (80088ec <vPortSetupTimerInterrupt+0x44>)
 80088c6:	3b01      	subs	r3, #1
 80088c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ca:	4b04      	ldr	r3, [pc, #16]	; (80088dc <vPortSetupTimerInterrupt+0x34>)
 80088cc:	2207      	movs	r2, #7
 80088ce:	601a      	str	r2, [r3, #0]
}
 80088d0:	bf00      	nop
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	e000e010 	.word	0xe000e010
 80088e0:	e000e018 	.word	0xe000e018
 80088e4:	20000038 	.word	0x20000038
 80088e8:	10624dd3 	.word	0x10624dd3
 80088ec:	e000e014 	.word	0xe000e014

080088f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008900 <vPortEnableVFP+0x10>
 80088f4:	6801      	ldr	r1, [r0, #0]
 80088f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088fa:	6001      	str	r1, [r0, #0]
 80088fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088fe:	bf00      	nop
 8008900:	e000ed88 	.word	0xe000ed88

08008904 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800890a:	f3ef 8305 	mrs	r3, IPSR
 800890e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b0f      	cmp	r3, #15
 8008914:	d913      	bls.n	800893e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008916:	4a16      	ldr	r2, [pc, #88]	; (8008970 <vPortValidateInterruptPriority+0x6c>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008920:	4b14      	ldr	r3, [pc, #80]	; (8008974 <vPortValidateInterruptPriority+0x70>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	7afa      	ldrb	r2, [r7, #11]
 8008926:	429a      	cmp	r2, r3
 8008928:	d209      	bcs.n	800893e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	607b      	str	r3, [r7, #4]
 800893c:	e7fe      	b.n	800893c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800893e:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <vPortValidateInterruptPriority+0x74>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008946:	4b0d      	ldr	r3, [pc, #52]	; (800897c <vPortValidateInterruptPriority+0x78>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d909      	bls.n	8008962 <vPortValidateInterruptPriority+0x5e>
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	e7fe      	b.n	8008960 <vPortValidateInterruptPriority+0x5c>
	}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	e000e3f0 	.word	0xe000e3f0
 8008974:	20000450 	.word	0x20000450
 8008978:	e000ed0c 	.word	0xe000ed0c
 800897c:	20000454 	.word	0x20000454

08008980 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800898c:	f7fe ffd4 	bl	8007938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008990:	4b57      	ldr	r3, [pc, #348]	; (8008af0 <pvPortMalloc+0x170>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008998:	f000 f90c 	bl	8008bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800899c:	4b55      	ldr	r3, [pc, #340]	; (8008af4 <pvPortMalloc+0x174>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4013      	ands	r3, r2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 808c 	bne.w	8008ac2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01c      	beq.n	80089ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80089b0:	2208      	movs	r2, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d013      	beq.n	80089ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f023 0307 	bic.w	r3, r3, #7
 80089c8:	3308      	adds	r3, #8
 80089ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <pvPortMalloc+0x6a>
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e7fe      	b.n	80089e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d068      	beq.n	8008ac2 <pvPortMalloc+0x142>
 80089f0:	4b41      	ldr	r3, [pc, #260]	; (8008af8 <pvPortMalloc+0x178>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d863      	bhi.n	8008ac2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089fa:	4b40      	ldr	r3, [pc, #256]	; (8008afc <pvPortMalloc+0x17c>)
 80089fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089fe:	4b3f      	ldr	r3, [pc, #252]	; (8008afc <pvPortMalloc+0x17c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a04:	e004      	b.n	8008a10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d903      	bls.n	8008a22 <pvPortMalloc+0xa2>
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f1      	bne.n	8008a06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a22:	4b33      	ldr	r3, [pc, #204]	; (8008af0 <pvPortMalloc+0x170>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d04a      	beq.n	8008ac2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2208      	movs	r2, #8
 8008a32:	4413      	add	r3, r2
 8008a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	1ad2      	subs	r2, r2, r3
 8008a46:	2308      	movs	r3, #8
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d91e      	bls.n	8008a8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4413      	add	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <pvPortMalloc+0xf4>
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	e7fe      	b.n	8008a72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a86:	69b8      	ldr	r0, [r7, #24]
 8008a88:	f000 f8f6 	bl	8008c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <pvPortMalloc+0x178>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <pvPortMalloc+0x178>)
 8008a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a9a:	4b17      	ldr	r3, [pc, #92]	; (8008af8 <pvPortMalloc+0x178>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <pvPortMalloc+0x180>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d203      	bcs.n	8008aae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <pvPortMalloc+0x178>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a15      	ldr	r2, [pc, #84]	; (8008b00 <pvPortMalloc+0x180>)
 8008aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <pvPortMalloc+0x174>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ac2:	f7fe ff47 	bl	8007954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <pvPortMalloc+0x164>
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	e7fe      	b.n	8008ae2 <pvPortMalloc+0x162>
	return pvReturn;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3728      	adds	r7, #40	; 0x28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20004060 	.word	0x20004060
 8008af4:	2000406c 	.word	0x2000406c
 8008af8:	20004064 	.word	0x20004064
 8008afc:	20004058 	.word	0x20004058
 8008b00:	20004068 	.word	0x20004068

08008b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d046      	beq.n	8008ba4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b16:	2308      	movs	r3, #8
 8008b18:	425b      	negs	r3, r3
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	4b20      	ldr	r3, [pc, #128]	; (8008bac <vPortFree+0xa8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <vPortFree+0x42>
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e7fe      	b.n	8008b44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <vPortFree+0x5e>
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60bb      	str	r3, [r7, #8]
 8008b60:	e7fe      	b.n	8008b60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4b11      	ldr	r3, [pc, #68]	; (8008bac <vPortFree+0xa8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d019      	beq.n	8008ba4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d115      	bne.n	8008ba4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <vPortFree+0xa8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	43db      	mvns	r3, r3
 8008b82:	401a      	ands	r2, r3
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b88:	f7fe fed6 	bl	8007938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <vPortFree+0xac>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4413      	add	r3, r2
 8008b96:	4a06      	ldr	r2, [pc, #24]	; (8008bb0 <vPortFree+0xac>)
 8008b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b9a:	6938      	ldr	r0, [r7, #16]
 8008b9c:	f000 f86c 	bl	8008c78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ba0:	f7fe fed8 	bl	8007954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	2000406c 	.word	0x2000406c
 8008bb0:	20004064 	.word	0x20004064

08008bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bc0:	4b27      	ldr	r3, [pc, #156]	; (8008c60 <prvHeapInit+0xac>)
 8008bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <prvHeapInit+0xac>)
 8008be4:	4413      	add	r3, r2
 8008be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bec:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <prvHeapInit+0xb0>)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <prvHeapInit+0xb0>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c00:	2208      	movs	r2, #8
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0307 	bic.w	r3, r3, #7
 8008c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a15      	ldr	r2, [pc, #84]	; (8008c68 <prvHeapInit+0xb4>)
 8008c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <prvHeapInit+0xb4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <prvHeapInit+0xb4>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <prvHeapInit+0xb4>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <prvHeapInit+0xb8>)
 8008c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4a09      	ldr	r2, [pc, #36]	; (8008c70 <prvHeapInit+0xbc>)
 8008c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c4c:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <prvHeapInit+0xc0>)
 8008c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	20000458 	.word	0x20000458
 8008c64:	20004058 	.word	0x20004058
 8008c68:	20004060 	.word	0x20004060
 8008c6c:	20004068 	.word	0x20004068
 8008c70:	20004064 	.word	0x20004064
 8008c74:	2000406c 	.word	0x2000406c

08008c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c80:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <prvInsertBlockIntoFreeList+0xac>)
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e002      	b.n	8008c8c <prvInsertBlockIntoFreeList+0x14>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d8f7      	bhi.n	8008c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d108      	bne.n	8008cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d118      	bne.n	8008d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d00d      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	e008      	b.n	8008d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <prvInsertBlockIntoFreeList+0xb0>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e003      	b.n	8008d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d002      	beq.n	8008d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20004058 	.word	0x20004058
 8008d28:	20004060 	.word	0x20004060

08008d2c <__errno>:
 8008d2c:	4b01      	ldr	r3, [pc, #4]	; (8008d34 <__errno+0x8>)
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20000048 	.word	0x20000048

08008d38 <__libc_init_array>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4e0d      	ldr	r6, [pc, #52]	; (8008d70 <__libc_init_array+0x38>)
 8008d3c:	4c0d      	ldr	r4, [pc, #52]	; (8008d74 <__libc_init_array+0x3c>)
 8008d3e:	1ba4      	subs	r4, r4, r6
 8008d40:	10a4      	asrs	r4, r4, #2
 8008d42:	2500      	movs	r5, #0
 8008d44:	42a5      	cmp	r5, r4
 8008d46:	d109      	bne.n	8008d5c <__libc_init_array+0x24>
 8008d48:	4e0b      	ldr	r6, [pc, #44]	; (8008d78 <__libc_init_array+0x40>)
 8008d4a:	4c0c      	ldr	r4, [pc, #48]	; (8008d7c <__libc_init_array+0x44>)
 8008d4c:	f000 fc28 	bl	80095a0 <_init>
 8008d50:	1ba4      	subs	r4, r4, r6
 8008d52:	10a4      	asrs	r4, r4, #2
 8008d54:	2500      	movs	r5, #0
 8008d56:	42a5      	cmp	r5, r4
 8008d58:	d105      	bne.n	8008d66 <__libc_init_array+0x2e>
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d60:	4798      	blx	r3
 8008d62:	3501      	adds	r5, #1
 8008d64:	e7ee      	b.n	8008d44 <__libc_init_array+0xc>
 8008d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d6a:	4798      	blx	r3
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	e7f2      	b.n	8008d56 <__libc_init_array+0x1e>
 8008d70:	080097d0 	.word	0x080097d0
 8008d74:	080097d0 	.word	0x080097d0
 8008d78:	080097d0 	.word	0x080097d0
 8008d7c:	080097d4 	.word	0x080097d4

08008d80 <memcpy>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	1e43      	subs	r3, r0, #1
 8008d84:	440a      	add	r2, r1
 8008d86:	4291      	cmp	r1, r2
 8008d88:	d100      	bne.n	8008d8c <memcpy+0xc>
 8008d8a:	bd10      	pop	{r4, pc}
 8008d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d94:	e7f7      	b.n	8008d86 <memcpy+0x6>

08008d96 <memset>:
 8008d96:	4402      	add	r2, r0
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d100      	bne.n	8008da0 <memset+0xa>
 8008d9e:	4770      	bx	lr
 8008da0:	f803 1b01 	strb.w	r1, [r3], #1
 8008da4:	e7f9      	b.n	8008d9a <memset+0x4>
	...

08008da8 <siprintf>:
 8008da8:	b40e      	push	{r1, r2, r3}
 8008daa:	b500      	push	{lr}
 8008dac:	b09c      	sub	sp, #112	; 0x70
 8008dae:	ab1d      	add	r3, sp, #116	; 0x74
 8008db0:	9002      	str	r0, [sp, #8]
 8008db2:	9006      	str	r0, [sp, #24]
 8008db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008db8:	4809      	ldr	r0, [pc, #36]	; (8008de0 <siprintf+0x38>)
 8008dba:	9107      	str	r1, [sp, #28]
 8008dbc:	9104      	str	r1, [sp, #16]
 8008dbe:	4909      	ldr	r1, [pc, #36]	; (8008de4 <siprintf+0x3c>)
 8008dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc4:	9105      	str	r1, [sp, #20]
 8008dc6:	6800      	ldr	r0, [r0, #0]
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	a902      	add	r1, sp, #8
 8008dcc:	f000 f866 	bl	8008e9c <_svfiprintf_r>
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	b01c      	add	sp, #112	; 0x70
 8008dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ddc:	b003      	add	sp, #12
 8008dde:	4770      	bx	lr
 8008de0:	20000048 	.word	0x20000048
 8008de4:	ffff0208 	.word	0xffff0208

08008de8 <__ssputs_r>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	688e      	ldr	r6, [r1, #8]
 8008dee:	429e      	cmp	r6, r3
 8008df0:	4682      	mov	sl, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	4690      	mov	r8, r2
 8008df6:	4699      	mov	r9, r3
 8008df8:	d837      	bhi.n	8008e6a <__ssputs_r+0x82>
 8008dfa:	898a      	ldrh	r2, [r1, #12]
 8008dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e00:	d031      	beq.n	8008e66 <__ssputs_r+0x7e>
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	6909      	ldr	r1, [r1, #16]
 8008e06:	1a6f      	subs	r7, r5, r1
 8008e08:	6965      	ldr	r5, [r4, #20]
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e10:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e14:	f109 0301 	add.w	r3, r9, #1
 8008e18:	443b      	add	r3, r7
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	bf38      	it	cc
 8008e1e:	461d      	movcc	r5, r3
 8008e20:	0553      	lsls	r3, r2, #21
 8008e22:	d530      	bpl.n	8008e86 <__ssputs_r+0x9e>
 8008e24:	4629      	mov	r1, r5
 8008e26:	f000 fb21 	bl	800946c <_malloc_r>
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	b950      	cbnz	r0, 8008e44 <__ssputs_r+0x5c>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	f8ca 3000 	str.w	r3, [sl]
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	463a      	mov	r2, r7
 8008e46:	6921      	ldr	r1, [r4, #16]
 8008e48:	f7ff ff9a 	bl	8008d80 <memcpy>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	6126      	str	r6, [r4, #16]
 8008e5a:	6165      	str	r5, [r4, #20]
 8008e5c:	443e      	add	r6, r7
 8008e5e:	1bed      	subs	r5, r5, r7
 8008e60:	6026      	str	r6, [r4, #0]
 8008e62:	60a5      	str	r5, [r4, #8]
 8008e64:	464e      	mov	r6, r9
 8008e66:	454e      	cmp	r6, r9
 8008e68:	d900      	bls.n	8008e6c <__ssputs_r+0x84>
 8008e6a:	464e      	mov	r6, r9
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	4641      	mov	r1, r8
 8008e70:	6820      	ldr	r0, [r4, #0]
 8008e72:	f000 fa93 	bl	800939c <memmove>
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	1b9b      	subs	r3, r3, r6
 8008e7a:	60a3      	str	r3, [r4, #8]
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	441e      	add	r6, r3
 8008e80:	6026      	str	r6, [r4, #0]
 8008e82:	2000      	movs	r0, #0
 8008e84:	e7dc      	b.n	8008e40 <__ssputs_r+0x58>
 8008e86:	462a      	mov	r2, r5
 8008e88:	f000 fb4a 	bl	8009520 <_realloc_r>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d1e2      	bne.n	8008e58 <__ssputs_r+0x70>
 8008e92:	6921      	ldr	r1, [r4, #16]
 8008e94:	4650      	mov	r0, sl
 8008e96:	f000 fa9b 	bl	80093d0 <_free_r>
 8008e9a:	e7c8      	b.n	8008e2e <__ssputs_r+0x46>

08008e9c <_svfiprintf_r>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	461d      	mov	r5, r3
 8008ea2:	898b      	ldrh	r3, [r1, #12]
 8008ea4:	061f      	lsls	r7, r3, #24
 8008ea6:	b09d      	sub	sp, #116	; 0x74
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	460c      	mov	r4, r1
 8008eac:	4616      	mov	r6, r2
 8008eae:	d50f      	bpl.n	8008ed0 <_svfiprintf_r+0x34>
 8008eb0:	690b      	ldr	r3, [r1, #16]
 8008eb2:	b96b      	cbnz	r3, 8008ed0 <_svfiprintf_r+0x34>
 8008eb4:	2140      	movs	r1, #64	; 0x40
 8008eb6:	f000 fad9 	bl	800946c <_malloc_r>
 8008eba:	6020      	str	r0, [r4, #0]
 8008ebc:	6120      	str	r0, [r4, #16]
 8008ebe:	b928      	cbnz	r0, 8008ecc <_svfiprintf_r+0x30>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	f8c8 3000 	str.w	r3, [r8]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	e0c8      	b.n	800905e <_svfiprintf_r+0x1c2>
 8008ecc:	2340      	movs	r3, #64	; 0x40
 8008ece:	6163      	str	r3, [r4, #20]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed4:	2320      	movs	r3, #32
 8008ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eda:	2330      	movs	r3, #48	; 0x30
 8008edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ee0:	9503      	str	r5, [sp, #12]
 8008ee2:	f04f 0b01 	mov.w	fp, #1
 8008ee6:	4637      	mov	r7, r6
 8008ee8:	463d      	mov	r5, r7
 8008eea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eee:	b10b      	cbz	r3, 8008ef4 <_svfiprintf_r+0x58>
 8008ef0:	2b25      	cmp	r3, #37	; 0x25
 8008ef2:	d13e      	bne.n	8008f72 <_svfiprintf_r+0xd6>
 8008ef4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ef8:	d00b      	beq.n	8008f12 <_svfiprintf_r+0x76>
 8008efa:	4653      	mov	r3, sl
 8008efc:	4632      	mov	r2, r6
 8008efe:	4621      	mov	r1, r4
 8008f00:	4640      	mov	r0, r8
 8008f02:	f7ff ff71 	bl	8008de8 <__ssputs_r>
 8008f06:	3001      	adds	r0, #1
 8008f08:	f000 80a4 	beq.w	8009054 <_svfiprintf_r+0x1b8>
 8008f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0e:	4453      	add	r3, sl
 8008f10:	9309      	str	r3, [sp, #36]	; 0x24
 8008f12:	783b      	ldrb	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 809d 	beq.w	8009054 <_svfiprintf_r+0x1b8>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f2e:	462f      	mov	r7, r5
 8008f30:	2205      	movs	r2, #5
 8008f32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008f36:	4850      	ldr	r0, [pc, #320]	; (8009078 <_svfiprintf_r+0x1dc>)
 8008f38:	f7f7 f952 	bl	80001e0 <memchr>
 8008f3c:	9b04      	ldr	r3, [sp, #16]
 8008f3e:	b9d0      	cbnz	r0, 8008f76 <_svfiprintf_r+0xda>
 8008f40:	06d9      	lsls	r1, r3, #27
 8008f42:	bf44      	itt	mi
 8008f44:	2220      	movmi	r2, #32
 8008f46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f4a:	071a      	lsls	r2, r3, #28
 8008f4c:	bf44      	itt	mi
 8008f4e:	222b      	movmi	r2, #43	; 0x2b
 8008f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f54:	782a      	ldrb	r2, [r5, #0]
 8008f56:	2a2a      	cmp	r2, #42	; 0x2a
 8008f58:	d015      	beq.n	8008f86 <_svfiprintf_r+0xea>
 8008f5a:	9a07      	ldr	r2, [sp, #28]
 8008f5c:	462f      	mov	r7, r5
 8008f5e:	2000      	movs	r0, #0
 8008f60:	250a      	movs	r5, #10
 8008f62:	4639      	mov	r1, r7
 8008f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f68:	3b30      	subs	r3, #48	; 0x30
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d94d      	bls.n	800900a <_svfiprintf_r+0x16e>
 8008f6e:	b1b8      	cbz	r0, 8008fa0 <_svfiprintf_r+0x104>
 8008f70:	e00f      	b.n	8008f92 <_svfiprintf_r+0xf6>
 8008f72:	462f      	mov	r7, r5
 8008f74:	e7b8      	b.n	8008ee8 <_svfiprintf_r+0x4c>
 8008f76:	4a40      	ldr	r2, [pc, #256]	; (8009078 <_svfiprintf_r+0x1dc>)
 8008f78:	1a80      	subs	r0, r0, r2
 8008f7a:	fa0b f000 	lsl.w	r0, fp, r0
 8008f7e:	4318      	orrs	r0, r3
 8008f80:	9004      	str	r0, [sp, #16]
 8008f82:	463d      	mov	r5, r7
 8008f84:	e7d3      	b.n	8008f2e <_svfiprintf_r+0x92>
 8008f86:	9a03      	ldr	r2, [sp, #12]
 8008f88:	1d11      	adds	r1, r2, #4
 8008f8a:	6812      	ldr	r2, [r2, #0]
 8008f8c:	9103      	str	r1, [sp, #12]
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	db01      	blt.n	8008f96 <_svfiprintf_r+0xfa>
 8008f92:	9207      	str	r2, [sp, #28]
 8008f94:	e004      	b.n	8008fa0 <_svfiprintf_r+0x104>
 8008f96:	4252      	negs	r2, r2
 8008f98:	f043 0302 	orr.w	r3, r3, #2
 8008f9c:	9207      	str	r2, [sp, #28]
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	783b      	ldrb	r3, [r7, #0]
 8008fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa4:	d10c      	bne.n	8008fc0 <_svfiprintf_r+0x124>
 8008fa6:	787b      	ldrb	r3, [r7, #1]
 8008fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8008faa:	d133      	bne.n	8009014 <_svfiprintf_r+0x178>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9203      	str	r2, [sp, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfb8      	it	lt
 8008fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fbc:	3702      	adds	r7, #2
 8008fbe:	9305      	str	r3, [sp, #20]
 8008fc0:	4d2e      	ldr	r5, [pc, #184]	; (800907c <_svfiprintf_r+0x1e0>)
 8008fc2:	7839      	ldrb	r1, [r7, #0]
 8008fc4:	2203      	movs	r2, #3
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f7f7 f90a 	bl	80001e0 <memchr>
 8008fcc:	b138      	cbz	r0, 8008fde <_svfiprintf_r+0x142>
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	1b40      	subs	r0, r0, r5
 8008fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	4303      	orrs	r3, r0
 8008fda:	3701      	adds	r7, #1
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	7839      	ldrb	r1, [r7, #0]
 8008fe0:	4827      	ldr	r0, [pc, #156]	; (8009080 <_svfiprintf_r+0x1e4>)
 8008fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fe6:	2206      	movs	r2, #6
 8008fe8:	1c7e      	adds	r6, r7, #1
 8008fea:	f7f7 f8f9 	bl	80001e0 <memchr>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d038      	beq.n	8009064 <_svfiprintf_r+0x1c8>
 8008ff2:	4b24      	ldr	r3, [pc, #144]	; (8009084 <_svfiprintf_r+0x1e8>)
 8008ff4:	bb13      	cbnz	r3, 800903c <_svfiprintf_r+0x1a0>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	3307      	adds	r3, #7
 8008ffa:	f023 0307 	bic.w	r3, r3, #7
 8008ffe:	3308      	adds	r3, #8
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009004:	444b      	add	r3, r9
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
 8009008:	e76d      	b.n	8008ee6 <_svfiprintf_r+0x4a>
 800900a:	fb05 3202 	mla	r2, r5, r2, r3
 800900e:	2001      	movs	r0, #1
 8009010:	460f      	mov	r7, r1
 8009012:	e7a6      	b.n	8008f62 <_svfiprintf_r+0xc6>
 8009014:	2300      	movs	r3, #0
 8009016:	3701      	adds	r7, #1
 8009018:	9305      	str	r3, [sp, #20]
 800901a:	4619      	mov	r1, r3
 800901c:	250a      	movs	r5, #10
 800901e:	4638      	mov	r0, r7
 8009020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009024:	3a30      	subs	r2, #48	; 0x30
 8009026:	2a09      	cmp	r2, #9
 8009028:	d903      	bls.n	8009032 <_svfiprintf_r+0x196>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0c8      	beq.n	8008fc0 <_svfiprintf_r+0x124>
 800902e:	9105      	str	r1, [sp, #20]
 8009030:	e7c6      	b.n	8008fc0 <_svfiprintf_r+0x124>
 8009032:	fb05 2101 	mla	r1, r5, r1, r2
 8009036:	2301      	movs	r3, #1
 8009038:	4607      	mov	r7, r0
 800903a:	e7f0      	b.n	800901e <_svfiprintf_r+0x182>
 800903c:	ab03      	add	r3, sp, #12
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4622      	mov	r2, r4
 8009042:	4b11      	ldr	r3, [pc, #68]	; (8009088 <_svfiprintf_r+0x1ec>)
 8009044:	a904      	add	r1, sp, #16
 8009046:	4640      	mov	r0, r8
 8009048:	f3af 8000 	nop.w
 800904c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009050:	4681      	mov	r9, r0
 8009052:	d1d6      	bne.n	8009002 <_svfiprintf_r+0x166>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	065b      	lsls	r3, r3, #25
 8009058:	f53f af35 	bmi.w	8008ec6 <_svfiprintf_r+0x2a>
 800905c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800905e:	b01d      	add	sp, #116	; 0x74
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	ab03      	add	r3, sp, #12
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4622      	mov	r2, r4
 800906a:	4b07      	ldr	r3, [pc, #28]	; (8009088 <_svfiprintf_r+0x1ec>)
 800906c:	a904      	add	r1, sp, #16
 800906e:	4640      	mov	r0, r8
 8009070:	f000 f882 	bl	8009178 <_printf_i>
 8009074:	e7ea      	b.n	800904c <_svfiprintf_r+0x1b0>
 8009076:	bf00      	nop
 8009078:	08009794 	.word	0x08009794
 800907c:	0800979a 	.word	0x0800979a
 8009080:	0800979e 	.word	0x0800979e
 8009084:	00000000 	.word	0x00000000
 8009088:	08008de9 	.word	0x08008de9

0800908c <_printf_common>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	4691      	mov	r9, r2
 8009092:	461f      	mov	r7, r3
 8009094:	688a      	ldr	r2, [r1, #8]
 8009096:	690b      	ldr	r3, [r1, #16]
 8009098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800909c:	4293      	cmp	r3, r2
 800909e:	bfb8      	it	lt
 80090a0:	4613      	movlt	r3, r2
 80090a2:	f8c9 3000 	str.w	r3, [r9]
 80090a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090aa:	4606      	mov	r6, r0
 80090ac:	460c      	mov	r4, r1
 80090ae:	b112      	cbz	r2, 80090b6 <_printf_common+0x2a>
 80090b0:	3301      	adds	r3, #1
 80090b2:	f8c9 3000 	str.w	r3, [r9]
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	0699      	lsls	r1, r3, #26
 80090ba:	bf42      	ittt	mi
 80090bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090c0:	3302      	addmi	r3, #2
 80090c2:	f8c9 3000 	strmi.w	r3, [r9]
 80090c6:	6825      	ldr	r5, [r4, #0]
 80090c8:	f015 0506 	ands.w	r5, r5, #6
 80090cc:	d107      	bne.n	80090de <_printf_common+0x52>
 80090ce:	f104 0a19 	add.w	sl, r4, #25
 80090d2:	68e3      	ldr	r3, [r4, #12]
 80090d4:	f8d9 2000 	ldr.w	r2, [r9]
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	42ab      	cmp	r3, r5
 80090dc:	dc28      	bgt.n	8009130 <_printf_common+0xa4>
 80090de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80090e2:	6822      	ldr	r2, [r4, #0]
 80090e4:	3300      	adds	r3, #0
 80090e6:	bf18      	it	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	0692      	lsls	r2, r2, #26
 80090ec:	d42d      	bmi.n	800914a <_printf_common+0xbe>
 80090ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090f2:	4639      	mov	r1, r7
 80090f4:	4630      	mov	r0, r6
 80090f6:	47c0      	blx	r8
 80090f8:	3001      	adds	r0, #1
 80090fa:	d020      	beq.n	800913e <_printf_common+0xb2>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	68e5      	ldr	r5, [r4, #12]
 8009100:	f8d9 2000 	ldr.w	r2, [r9]
 8009104:	f003 0306 	and.w	r3, r3, #6
 8009108:	2b04      	cmp	r3, #4
 800910a:	bf08      	it	eq
 800910c:	1aad      	subeq	r5, r5, r2
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	bf0c      	ite	eq
 8009114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009118:	2500      	movne	r5, #0
 800911a:	4293      	cmp	r3, r2
 800911c:	bfc4      	itt	gt
 800911e:	1a9b      	subgt	r3, r3, r2
 8009120:	18ed      	addgt	r5, r5, r3
 8009122:	f04f 0900 	mov.w	r9, #0
 8009126:	341a      	adds	r4, #26
 8009128:	454d      	cmp	r5, r9
 800912a:	d11a      	bne.n	8009162 <_printf_common+0xd6>
 800912c:	2000      	movs	r0, #0
 800912e:	e008      	b.n	8009142 <_printf_common+0xb6>
 8009130:	2301      	movs	r3, #1
 8009132:	4652      	mov	r2, sl
 8009134:	4639      	mov	r1, r7
 8009136:	4630      	mov	r0, r6
 8009138:	47c0      	blx	r8
 800913a:	3001      	adds	r0, #1
 800913c:	d103      	bne.n	8009146 <_printf_common+0xba>
 800913e:	f04f 30ff 	mov.w	r0, #4294967295
 8009142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009146:	3501      	adds	r5, #1
 8009148:	e7c3      	b.n	80090d2 <_printf_common+0x46>
 800914a:	18e1      	adds	r1, r4, r3
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	2030      	movs	r0, #48	; 0x30
 8009150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009154:	4422      	add	r2, r4
 8009156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800915a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800915e:	3302      	adds	r3, #2
 8009160:	e7c5      	b.n	80090ee <_printf_common+0x62>
 8009162:	2301      	movs	r3, #1
 8009164:	4622      	mov	r2, r4
 8009166:	4639      	mov	r1, r7
 8009168:	4630      	mov	r0, r6
 800916a:	47c0      	blx	r8
 800916c:	3001      	adds	r0, #1
 800916e:	d0e6      	beq.n	800913e <_printf_common+0xb2>
 8009170:	f109 0901 	add.w	r9, r9, #1
 8009174:	e7d8      	b.n	8009128 <_printf_common+0x9c>
	...

08009178 <_printf_i>:
 8009178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800917c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009180:	460c      	mov	r4, r1
 8009182:	7e09      	ldrb	r1, [r1, #24]
 8009184:	b085      	sub	sp, #20
 8009186:	296e      	cmp	r1, #110	; 0x6e
 8009188:	4617      	mov	r7, r2
 800918a:	4606      	mov	r6, r0
 800918c:	4698      	mov	r8, r3
 800918e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009190:	f000 80b3 	beq.w	80092fa <_printf_i+0x182>
 8009194:	d822      	bhi.n	80091dc <_printf_i+0x64>
 8009196:	2963      	cmp	r1, #99	; 0x63
 8009198:	d036      	beq.n	8009208 <_printf_i+0x90>
 800919a:	d80a      	bhi.n	80091b2 <_printf_i+0x3a>
 800919c:	2900      	cmp	r1, #0
 800919e:	f000 80b9 	beq.w	8009314 <_printf_i+0x19c>
 80091a2:	2958      	cmp	r1, #88	; 0x58
 80091a4:	f000 8083 	beq.w	80092ae <_printf_i+0x136>
 80091a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80091b0:	e032      	b.n	8009218 <_printf_i+0xa0>
 80091b2:	2964      	cmp	r1, #100	; 0x64
 80091b4:	d001      	beq.n	80091ba <_printf_i+0x42>
 80091b6:	2969      	cmp	r1, #105	; 0x69
 80091b8:	d1f6      	bne.n	80091a8 <_printf_i+0x30>
 80091ba:	6820      	ldr	r0, [r4, #0]
 80091bc:	6813      	ldr	r3, [r2, #0]
 80091be:	0605      	lsls	r5, r0, #24
 80091c0:	f103 0104 	add.w	r1, r3, #4
 80091c4:	d52a      	bpl.n	800921c <_printf_i+0xa4>
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6011      	str	r1, [r2, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da03      	bge.n	80091d6 <_printf_i+0x5e>
 80091ce:	222d      	movs	r2, #45	; 0x2d
 80091d0:	425b      	negs	r3, r3
 80091d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091d6:	486f      	ldr	r0, [pc, #444]	; (8009394 <_printf_i+0x21c>)
 80091d8:	220a      	movs	r2, #10
 80091da:	e039      	b.n	8009250 <_printf_i+0xd8>
 80091dc:	2973      	cmp	r1, #115	; 0x73
 80091de:	f000 809d 	beq.w	800931c <_printf_i+0x1a4>
 80091e2:	d808      	bhi.n	80091f6 <_printf_i+0x7e>
 80091e4:	296f      	cmp	r1, #111	; 0x6f
 80091e6:	d020      	beq.n	800922a <_printf_i+0xb2>
 80091e8:	2970      	cmp	r1, #112	; 0x70
 80091ea:	d1dd      	bne.n	80091a8 <_printf_i+0x30>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	f043 0320 	orr.w	r3, r3, #32
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	e003      	b.n	80091fe <_printf_i+0x86>
 80091f6:	2975      	cmp	r1, #117	; 0x75
 80091f8:	d017      	beq.n	800922a <_printf_i+0xb2>
 80091fa:	2978      	cmp	r1, #120	; 0x78
 80091fc:	d1d4      	bne.n	80091a8 <_printf_i+0x30>
 80091fe:	2378      	movs	r3, #120	; 0x78
 8009200:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009204:	4864      	ldr	r0, [pc, #400]	; (8009398 <_printf_i+0x220>)
 8009206:	e055      	b.n	80092b4 <_printf_i+0x13c>
 8009208:	6813      	ldr	r3, [r2, #0]
 800920a:	1d19      	adds	r1, r3, #4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6011      	str	r1, [r2, #0]
 8009210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009218:	2301      	movs	r3, #1
 800921a:	e08c      	b.n	8009336 <_printf_i+0x1be>
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6011      	str	r1, [r2, #0]
 8009220:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009224:	bf18      	it	ne
 8009226:	b21b      	sxthne	r3, r3
 8009228:	e7cf      	b.n	80091ca <_printf_i+0x52>
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	6825      	ldr	r5, [r4, #0]
 800922e:	1d18      	adds	r0, r3, #4
 8009230:	6010      	str	r0, [r2, #0]
 8009232:	0628      	lsls	r0, r5, #24
 8009234:	d501      	bpl.n	800923a <_printf_i+0xc2>
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	e002      	b.n	8009240 <_printf_i+0xc8>
 800923a:	0668      	lsls	r0, r5, #25
 800923c:	d5fb      	bpl.n	8009236 <_printf_i+0xbe>
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	4854      	ldr	r0, [pc, #336]	; (8009394 <_printf_i+0x21c>)
 8009242:	296f      	cmp	r1, #111	; 0x6f
 8009244:	bf14      	ite	ne
 8009246:	220a      	movne	r2, #10
 8009248:	2208      	moveq	r2, #8
 800924a:	2100      	movs	r1, #0
 800924c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009250:	6865      	ldr	r5, [r4, #4]
 8009252:	60a5      	str	r5, [r4, #8]
 8009254:	2d00      	cmp	r5, #0
 8009256:	f2c0 8095 	blt.w	8009384 <_printf_i+0x20c>
 800925a:	6821      	ldr	r1, [r4, #0]
 800925c:	f021 0104 	bic.w	r1, r1, #4
 8009260:	6021      	str	r1, [r4, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d13d      	bne.n	80092e2 <_printf_i+0x16a>
 8009266:	2d00      	cmp	r5, #0
 8009268:	f040 808e 	bne.w	8009388 <_printf_i+0x210>
 800926c:	4665      	mov	r5, ip
 800926e:	2a08      	cmp	r2, #8
 8009270:	d10b      	bne.n	800928a <_printf_i+0x112>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	07db      	lsls	r3, r3, #31
 8009276:	d508      	bpl.n	800928a <_printf_i+0x112>
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	6862      	ldr	r2, [r4, #4]
 800927c:	429a      	cmp	r2, r3
 800927e:	bfde      	ittt	le
 8009280:	2330      	movle	r3, #48	; 0x30
 8009282:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009286:	f105 35ff 	addle.w	r5, r5, #4294967295
 800928a:	ebac 0305 	sub.w	r3, ip, r5
 800928e:	6123      	str	r3, [r4, #16]
 8009290:	f8cd 8000 	str.w	r8, [sp]
 8009294:	463b      	mov	r3, r7
 8009296:	aa03      	add	r2, sp, #12
 8009298:	4621      	mov	r1, r4
 800929a:	4630      	mov	r0, r6
 800929c:	f7ff fef6 	bl	800908c <_printf_common>
 80092a0:	3001      	adds	r0, #1
 80092a2:	d14d      	bne.n	8009340 <_printf_i+0x1c8>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	b005      	add	sp, #20
 80092aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ae:	4839      	ldr	r0, [pc, #228]	; (8009394 <_printf_i+0x21c>)
 80092b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80092b4:	6813      	ldr	r3, [r2, #0]
 80092b6:	6821      	ldr	r1, [r4, #0]
 80092b8:	1d1d      	adds	r5, r3, #4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6015      	str	r5, [r2, #0]
 80092be:	060a      	lsls	r2, r1, #24
 80092c0:	d50b      	bpl.n	80092da <_printf_i+0x162>
 80092c2:	07ca      	lsls	r2, r1, #31
 80092c4:	bf44      	itt	mi
 80092c6:	f041 0120 	orrmi.w	r1, r1, #32
 80092ca:	6021      	strmi	r1, [r4, #0]
 80092cc:	b91b      	cbnz	r3, 80092d6 <_printf_i+0x15e>
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	f022 0220 	bic.w	r2, r2, #32
 80092d4:	6022      	str	r2, [r4, #0]
 80092d6:	2210      	movs	r2, #16
 80092d8:	e7b7      	b.n	800924a <_printf_i+0xd2>
 80092da:	064d      	lsls	r5, r1, #25
 80092dc:	bf48      	it	mi
 80092de:	b29b      	uxthmi	r3, r3
 80092e0:	e7ef      	b.n	80092c2 <_printf_i+0x14a>
 80092e2:	4665      	mov	r5, ip
 80092e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e8:	fb02 3311 	mls	r3, r2, r1, r3
 80092ec:	5cc3      	ldrb	r3, [r0, r3]
 80092ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092f2:	460b      	mov	r3, r1
 80092f4:	2900      	cmp	r1, #0
 80092f6:	d1f5      	bne.n	80092e4 <_printf_i+0x16c>
 80092f8:	e7b9      	b.n	800926e <_printf_i+0xf6>
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	6961      	ldr	r1, [r4, #20]
 8009300:	1d18      	adds	r0, r3, #4
 8009302:	6010      	str	r0, [r2, #0]
 8009304:	0628      	lsls	r0, r5, #24
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	d501      	bpl.n	800930e <_printf_i+0x196>
 800930a:	6019      	str	r1, [r3, #0]
 800930c:	e002      	b.n	8009314 <_printf_i+0x19c>
 800930e:	066a      	lsls	r2, r5, #25
 8009310:	d5fb      	bpl.n	800930a <_printf_i+0x192>
 8009312:	8019      	strh	r1, [r3, #0]
 8009314:	2300      	movs	r3, #0
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	4665      	mov	r5, ip
 800931a:	e7b9      	b.n	8009290 <_printf_i+0x118>
 800931c:	6813      	ldr	r3, [r2, #0]
 800931e:	1d19      	adds	r1, r3, #4
 8009320:	6011      	str	r1, [r2, #0]
 8009322:	681d      	ldr	r5, [r3, #0]
 8009324:	6862      	ldr	r2, [r4, #4]
 8009326:	2100      	movs	r1, #0
 8009328:	4628      	mov	r0, r5
 800932a:	f7f6 ff59 	bl	80001e0 <memchr>
 800932e:	b108      	cbz	r0, 8009334 <_printf_i+0x1bc>
 8009330:	1b40      	subs	r0, r0, r5
 8009332:	6060      	str	r0, [r4, #4]
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	2300      	movs	r3, #0
 800933a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800933e:	e7a7      	b.n	8009290 <_printf_i+0x118>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	462a      	mov	r2, r5
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	47c0      	blx	r8
 800934a:	3001      	adds	r0, #1
 800934c:	d0aa      	beq.n	80092a4 <_printf_i+0x12c>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	079b      	lsls	r3, r3, #30
 8009352:	d413      	bmi.n	800937c <_printf_i+0x204>
 8009354:	68e0      	ldr	r0, [r4, #12]
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	4298      	cmp	r0, r3
 800935a:	bfb8      	it	lt
 800935c:	4618      	movlt	r0, r3
 800935e:	e7a3      	b.n	80092a8 <_printf_i+0x130>
 8009360:	2301      	movs	r3, #1
 8009362:	464a      	mov	r2, r9
 8009364:	4639      	mov	r1, r7
 8009366:	4630      	mov	r0, r6
 8009368:	47c0      	blx	r8
 800936a:	3001      	adds	r0, #1
 800936c:	d09a      	beq.n	80092a4 <_printf_i+0x12c>
 800936e:	3501      	adds	r5, #1
 8009370:	68e3      	ldr	r3, [r4, #12]
 8009372:	9a03      	ldr	r2, [sp, #12]
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	42ab      	cmp	r3, r5
 8009378:	dcf2      	bgt.n	8009360 <_printf_i+0x1e8>
 800937a:	e7eb      	b.n	8009354 <_printf_i+0x1dc>
 800937c:	2500      	movs	r5, #0
 800937e:	f104 0919 	add.w	r9, r4, #25
 8009382:	e7f5      	b.n	8009370 <_printf_i+0x1f8>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1ac      	bne.n	80092e2 <_printf_i+0x16a>
 8009388:	7803      	ldrb	r3, [r0, #0]
 800938a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800938e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009392:	e76c      	b.n	800926e <_printf_i+0xf6>
 8009394:	080097a5 	.word	0x080097a5
 8009398:	080097b6 	.word	0x080097b6

0800939c <memmove>:
 800939c:	4288      	cmp	r0, r1
 800939e:	b510      	push	{r4, lr}
 80093a0:	eb01 0302 	add.w	r3, r1, r2
 80093a4:	d807      	bhi.n	80093b6 <memmove+0x1a>
 80093a6:	1e42      	subs	r2, r0, #1
 80093a8:	4299      	cmp	r1, r3
 80093aa:	d00a      	beq.n	80093c2 <memmove+0x26>
 80093ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80093b4:	e7f8      	b.n	80093a8 <memmove+0xc>
 80093b6:	4283      	cmp	r3, r0
 80093b8:	d9f5      	bls.n	80093a6 <memmove+0xa>
 80093ba:	1881      	adds	r1, r0, r2
 80093bc:	1ad2      	subs	r2, r2, r3
 80093be:	42d3      	cmn	r3, r2
 80093c0:	d100      	bne.n	80093c4 <memmove+0x28>
 80093c2:	bd10      	pop	{r4, pc}
 80093c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80093cc:	e7f7      	b.n	80093be <memmove+0x22>
	...

080093d0 <_free_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4605      	mov	r5, r0
 80093d4:	2900      	cmp	r1, #0
 80093d6:	d045      	beq.n	8009464 <_free_r+0x94>
 80093d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093dc:	1f0c      	subs	r4, r1, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfb8      	it	lt
 80093e2:	18e4      	addlt	r4, r4, r3
 80093e4:	f000 f8d2 	bl	800958c <__malloc_lock>
 80093e8:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <_free_r+0x98>)
 80093ea:	6813      	ldr	r3, [r2, #0]
 80093ec:	4610      	mov	r0, r2
 80093ee:	b933      	cbnz	r3, 80093fe <_free_r+0x2e>
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	6014      	str	r4, [r2, #0]
 80093f4:	4628      	mov	r0, r5
 80093f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093fa:	f000 b8c8 	b.w	800958e <__malloc_unlock>
 80093fe:	42a3      	cmp	r3, r4
 8009400:	d90c      	bls.n	800941c <_free_r+0x4c>
 8009402:	6821      	ldr	r1, [r4, #0]
 8009404:	1862      	adds	r2, r4, r1
 8009406:	4293      	cmp	r3, r2
 8009408:	bf04      	itt	eq
 800940a:	681a      	ldreq	r2, [r3, #0]
 800940c:	685b      	ldreq	r3, [r3, #4]
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	bf04      	itt	eq
 8009412:	1852      	addeq	r2, r2, r1
 8009414:	6022      	streq	r2, [r4, #0]
 8009416:	6004      	str	r4, [r0, #0]
 8009418:	e7ec      	b.n	80093f4 <_free_r+0x24>
 800941a:	4613      	mov	r3, r2
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	b10a      	cbz	r2, 8009424 <_free_r+0x54>
 8009420:	42a2      	cmp	r2, r4
 8009422:	d9fa      	bls.n	800941a <_free_r+0x4a>
 8009424:	6819      	ldr	r1, [r3, #0]
 8009426:	1858      	adds	r0, r3, r1
 8009428:	42a0      	cmp	r0, r4
 800942a:	d10b      	bne.n	8009444 <_free_r+0x74>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	4401      	add	r1, r0
 8009430:	1858      	adds	r0, r3, r1
 8009432:	4282      	cmp	r2, r0
 8009434:	6019      	str	r1, [r3, #0]
 8009436:	d1dd      	bne.n	80093f4 <_free_r+0x24>
 8009438:	6810      	ldr	r0, [r2, #0]
 800943a:	6852      	ldr	r2, [r2, #4]
 800943c:	605a      	str	r2, [r3, #4]
 800943e:	4401      	add	r1, r0
 8009440:	6019      	str	r1, [r3, #0]
 8009442:	e7d7      	b.n	80093f4 <_free_r+0x24>
 8009444:	d902      	bls.n	800944c <_free_r+0x7c>
 8009446:	230c      	movs	r3, #12
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	e7d3      	b.n	80093f4 <_free_r+0x24>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	1821      	adds	r1, r4, r0
 8009450:	428a      	cmp	r2, r1
 8009452:	bf04      	itt	eq
 8009454:	6811      	ldreq	r1, [r2, #0]
 8009456:	6852      	ldreq	r2, [r2, #4]
 8009458:	6062      	str	r2, [r4, #4]
 800945a:	bf04      	itt	eq
 800945c:	1809      	addeq	r1, r1, r0
 800945e:	6021      	streq	r1, [r4, #0]
 8009460:	605c      	str	r4, [r3, #4]
 8009462:	e7c7      	b.n	80093f4 <_free_r+0x24>
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20004070 	.word	0x20004070

0800946c <_malloc_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	1ccd      	adds	r5, r1, #3
 8009470:	f025 0503 	bic.w	r5, r5, #3
 8009474:	3508      	adds	r5, #8
 8009476:	2d0c      	cmp	r5, #12
 8009478:	bf38      	it	cc
 800947a:	250c      	movcc	r5, #12
 800947c:	2d00      	cmp	r5, #0
 800947e:	4606      	mov	r6, r0
 8009480:	db01      	blt.n	8009486 <_malloc_r+0x1a>
 8009482:	42a9      	cmp	r1, r5
 8009484:	d903      	bls.n	800948e <_malloc_r+0x22>
 8009486:	230c      	movs	r3, #12
 8009488:	6033      	str	r3, [r6, #0]
 800948a:	2000      	movs	r0, #0
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	f000 f87d 	bl	800958c <__malloc_lock>
 8009492:	4a21      	ldr	r2, [pc, #132]	; (8009518 <_malloc_r+0xac>)
 8009494:	6814      	ldr	r4, [r2, #0]
 8009496:	4621      	mov	r1, r4
 8009498:	b991      	cbnz	r1, 80094c0 <_malloc_r+0x54>
 800949a:	4c20      	ldr	r4, [pc, #128]	; (800951c <_malloc_r+0xb0>)
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	b91b      	cbnz	r3, 80094a8 <_malloc_r+0x3c>
 80094a0:	4630      	mov	r0, r6
 80094a2:	f000 f863 	bl	800956c <_sbrk_r>
 80094a6:	6020      	str	r0, [r4, #0]
 80094a8:	4629      	mov	r1, r5
 80094aa:	4630      	mov	r0, r6
 80094ac:	f000 f85e 	bl	800956c <_sbrk_r>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d124      	bne.n	80094fe <_malloc_r+0x92>
 80094b4:	230c      	movs	r3, #12
 80094b6:	6033      	str	r3, [r6, #0]
 80094b8:	4630      	mov	r0, r6
 80094ba:	f000 f868 	bl	800958e <__malloc_unlock>
 80094be:	e7e4      	b.n	800948a <_malloc_r+0x1e>
 80094c0:	680b      	ldr	r3, [r1, #0]
 80094c2:	1b5b      	subs	r3, r3, r5
 80094c4:	d418      	bmi.n	80094f8 <_malloc_r+0x8c>
 80094c6:	2b0b      	cmp	r3, #11
 80094c8:	d90f      	bls.n	80094ea <_malloc_r+0x7e>
 80094ca:	600b      	str	r3, [r1, #0]
 80094cc:	50cd      	str	r5, [r1, r3]
 80094ce:	18cc      	adds	r4, r1, r3
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 f85c 	bl	800958e <__malloc_unlock>
 80094d6:	f104 000b 	add.w	r0, r4, #11
 80094da:	1d23      	adds	r3, r4, #4
 80094dc:	f020 0007 	bic.w	r0, r0, #7
 80094e0:	1ac3      	subs	r3, r0, r3
 80094e2:	d0d3      	beq.n	800948c <_malloc_r+0x20>
 80094e4:	425a      	negs	r2, r3
 80094e6:	50e2      	str	r2, [r4, r3]
 80094e8:	e7d0      	b.n	800948c <_malloc_r+0x20>
 80094ea:	428c      	cmp	r4, r1
 80094ec:	684b      	ldr	r3, [r1, #4]
 80094ee:	bf16      	itet	ne
 80094f0:	6063      	strne	r3, [r4, #4]
 80094f2:	6013      	streq	r3, [r2, #0]
 80094f4:	460c      	movne	r4, r1
 80094f6:	e7eb      	b.n	80094d0 <_malloc_r+0x64>
 80094f8:	460c      	mov	r4, r1
 80094fa:	6849      	ldr	r1, [r1, #4]
 80094fc:	e7cc      	b.n	8009498 <_malloc_r+0x2c>
 80094fe:	1cc4      	adds	r4, r0, #3
 8009500:	f024 0403 	bic.w	r4, r4, #3
 8009504:	42a0      	cmp	r0, r4
 8009506:	d005      	beq.n	8009514 <_malloc_r+0xa8>
 8009508:	1a21      	subs	r1, r4, r0
 800950a:	4630      	mov	r0, r6
 800950c:	f000 f82e 	bl	800956c <_sbrk_r>
 8009510:	3001      	adds	r0, #1
 8009512:	d0cf      	beq.n	80094b4 <_malloc_r+0x48>
 8009514:	6025      	str	r5, [r4, #0]
 8009516:	e7db      	b.n	80094d0 <_malloc_r+0x64>
 8009518:	20004070 	.word	0x20004070
 800951c:	20004074 	.word	0x20004074

08009520 <_realloc_r>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	4607      	mov	r7, r0
 8009524:	4614      	mov	r4, r2
 8009526:	460e      	mov	r6, r1
 8009528:	b921      	cbnz	r1, 8009534 <_realloc_r+0x14>
 800952a:	4611      	mov	r1, r2
 800952c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009530:	f7ff bf9c 	b.w	800946c <_malloc_r>
 8009534:	b922      	cbnz	r2, 8009540 <_realloc_r+0x20>
 8009536:	f7ff ff4b 	bl	80093d0 <_free_r>
 800953a:	4625      	mov	r5, r4
 800953c:	4628      	mov	r0, r5
 800953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009540:	f000 f826 	bl	8009590 <_malloc_usable_size_r>
 8009544:	42a0      	cmp	r0, r4
 8009546:	d20f      	bcs.n	8009568 <_realloc_r+0x48>
 8009548:	4621      	mov	r1, r4
 800954a:	4638      	mov	r0, r7
 800954c:	f7ff ff8e 	bl	800946c <_malloc_r>
 8009550:	4605      	mov	r5, r0
 8009552:	2800      	cmp	r0, #0
 8009554:	d0f2      	beq.n	800953c <_realloc_r+0x1c>
 8009556:	4631      	mov	r1, r6
 8009558:	4622      	mov	r2, r4
 800955a:	f7ff fc11 	bl	8008d80 <memcpy>
 800955e:	4631      	mov	r1, r6
 8009560:	4638      	mov	r0, r7
 8009562:	f7ff ff35 	bl	80093d0 <_free_r>
 8009566:	e7e9      	b.n	800953c <_realloc_r+0x1c>
 8009568:	4635      	mov	r5, r6
 800956a:	e7e7      	b.n	800953c <_realloc_r+0x1c>

0800956c <_sbrk_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4c06      	ldr	r4, [pc, #24]	; (8009588 <_sbrk_r+0x1c>)
 8009570:	2300      	movs	r3, #0
 8009572:	4605      	mov	r5, r0
 8009574:	4608      	mov	r0, r1
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	f7f9 f81c 	bl	80025b4 <_sbrk>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_sbrk_r+0x1a>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	b103      	cbz	r3, 8009586 <_sbrk_r+0x1a>
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	200042f0 	.word	0x200042f0

0800958c <__malloc_lock>:
 800958c:	4770      	bx	lr

0800958e <__malloc_unlock>:
 800958e:	4770      	bx	lr

08009590 <_malloc_usable_size_r>:
 8009590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009594:	1f18      	subs	r0, r3, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfbc      	itt	lt
 800959a:	580b      	ldrlt	r3, [r1, r0]
 800959c:	18c0      	addlt	r0, r0, r3
 800959e:	4770      	bx	lr

080095a0 <_init>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr

080095ac <_fini>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr
